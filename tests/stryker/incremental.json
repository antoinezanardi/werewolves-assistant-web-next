{
  "files": {
    "components/layouts/default/NavBar/ParametersMenu/ParametersMenu.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "0",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Snapshot `Parameters Menu Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "24"
          ],
          "coveredBy": [
            "24",
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 38
            },
            "start": {
              "column": 41,
              "line": 29
            }
          }
        },
        {
          "id": "1",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected [ {} ] to strictly equal [ { …(4) } ]",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "27"
          ],
          "coveredBy": [
            "24",
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 37
            },
            "start": {
              "column": 3,
              "line": 30
            }
          }
        },
        {
          "id": "2",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected [ { label: '', …(3) } ] to strictly equal [ { …(4) } ]",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "27"
          ],
          "coveredBy": [
            "24",
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 31
            },
            "start": {
              "column": 14,
              "line": 31
            }
          }
        },
        {
          "id": "3",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected [ { …(4) } ] to strictly equal [ { …(4) } ]",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "27"
          ],
          "coveredBy": [
            "24",
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 27,
              "line": 32
            },
            "start": {
              "column": 11,
              "line": 32
            }
          }
        },
        {
          "id": "4",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected [ { …(4) } ] to strictly equal [ { …(4) } ]",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "27"
          ],
          "coveredBy": [
            "24",
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 57,
              "line": 33
            },
            "start": {
              "column": 19,
              "line": 33
            }
          }
        },
        {
          "id": "5",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "28"
          ],
          "coveredBy": [
            "28"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 36
            },
            "start": {
              "column": 20,
              "line": 34
            }
          }
        },
        {
          "id": "6",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  \"/\",\n], but it was called with \"\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "28"
          ],
          "coveredBy": [
            "28"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 35
            },
            "start": {
              "column": 23,
              "line": 35
            }
          }
        },
        {
          "id": "7",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "25"
          ],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 47
            },
            "start": {
              "column": 56,
              "line": 42
            }
          }
        },
        {
          "id": "8",
          "mutatorName": "BooleanLiteral",
          "replacement": "parametersMenu.value",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "25"
          ],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 43
            },
            "start": {
              "column": 7,
              "line": 43
            }
          }
        },
        {
          "id": "9",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "25"
          ],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 43
            },
            "start": {
              "column": 7,
              "line": 43
            }
          }
        },
        {
          "id": "10",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "26"
          ],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 43
            },
            "start": {
              "column": 7,
              "line": 43
            }
          }
        },
        {
          "id": "11",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "26"
          ],
          "coveredBy": [
            "26"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 45
            },
            "start": {
              "column": 30,
              "line": 43
            }
          }
        },
        {
          "id": "12",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  \"Parameters Menu is not initialized\",\n], but it was called with \"\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "26"
          ],
          "coveredBy": [
            "26"
          ],
          "location": {
            "end": {
              "column": 59,
              "line": 44
            },
            "start": {
              "column": 23,
              "line": 44
            }
          }
        }
      ],
      "source": "<template>\n  <div id=\"parameters-menu\">\n    <VuePrimeButton\n      :aria-label=\"$t('components.ParametersMenu.parameters')\"\n      icon=\"fa fa-cog\"\n      severity=\"secondary\"\n      type=\"button\"\n      @click=\"toggleParametersMenu\"\n    />\n\n    <VuePrimeMenu\n      id=\"overlay_menu\"\n      ref=\"parametersMenu\"\n      :aria-label=\"$t('components.ParametersMenu.parametersMenu')\"\n      :model=\"parametersMenuItems\"\n      popup\n    />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport type { MenuItem } from \"primevue/menuitem\";\nimport { ref } from \"vue\";\n\nimport type { VuePrimeMenu } from \"#components\";\n\nconst { t } = useI18n();\n\nconst parametersMenuItems: MenuItem[] = [\n  {\n    label: t(\"components.ParametersMenu.backToHome\"),\n    icon: \"fa fa-sign-out\",\n    arialLabel: t(\"components.ParametersMenu.backToHome\"),\n    command: () => {\n      void navigateTo(\"/\");\n    },\n  },\n];\n\nconst parametersMenu = ref<InstanceType<typeof VuePrimeMenu> | null>(null);\n\nfunction toggleParametersMenu(event: MouseEvent): void {\n  if (!parametersMenu.value) {\n    throw createError(\"Parameters Menu is not initialized\");\n  }\n  parametersMenu.value.toggle(event);\n}\n</script>"
    },
    "components/pages/about/AboutAvailableRoles/AboutAvailableRoleDescription/AboutAvailableRoleDescription.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "13",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `About Available Role Description Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 64
            },
            "start": {
              "column": 55,
              "line": 55
            }
          }
        },
        {
          "id": "14",
          "mutatorName": "BooleanLiteral",
          "replacement": "roleDescriptionMessages",
          "statusReason": "Snapshot `About Available Role Description Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 60
            },
            "start": {
              "column": 7,
              "line": 60
            }
          }
        },
        {
          "id": "15",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `About Available Role Description Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 60
            },
            "start": {
              "column": 7,
              "line": 60
            }
          }
        },
        {
          "id": "16",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 60
            },
            "start": {
              "column": 7,
              "line": 60
            }
          }
        },
        {
          "id": "17",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 62
            },
            "start": {
              "column": 33,
              "line": 60
            }
          }
        },
        {
          "id": "18",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "expected [ DOMWrapper{ …(2) } ] to have a length of +0 but got 1",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 61
            },
            "start": {
              "column": 12,
              "line": 61
            }
          }
        },
        {
          "id": "19",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Snapshot `About Available Role Description Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23"
          ],
          "location": {
            "end": {
              "column": 142,
              "line": 63
            },
            "start": {
              "column": 51,
              "line": 63
            }
          }
        },
        {
          "id": "20",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Snapshot `About Available Role Description Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23"
          ],
          "location": {
            "end": {
              "column": 141,
              "line": 63
            },
            "start": {
              "column": 60,
              "line": 63
            }
          }
        }
      ],
      "source": "<template>\n  <div class=\"d-flex\">\n    <div\n      id=\"role-left-description\"\n      class=\"align-items-center d-flex flex-column justify-content-center\"\n    >\n      <RoleImage\n        class=\"available-role-description-role-image\"\n        :role-name=\"role.name\"\n        sizes=\"150px\"\n      />\n\n      <div class=\"available-role-description-role-name mt-3\">\n        {{ getRoleNameLabel(role.name) }}\n      </div>\n\n      <RoleTypeBadge\n        class=\"available-role-description-role-type-badge  mt-3\"\n        :role-type=\"role.type\"\n      />\n\n      <RoleOriginBadge\n        class=\"available-role-description-role-origin-badge mt-3\"\n        :role-origin=\"role.origin\"\n      />\n    </div>\n\n    <div\n      id=\"role-right-description\"\n      class=\"d-flex flex-column justify-content-center\"\n    >\n      <p\n        v-for=\"line in roleDescriptionLines\"\n        :key=\"line\"\n        class=\"available-role-description-role-description-line\"\n      >\n        {{ line }}\n      </p>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport type { AboutAvailableRoleDescriptionProps } from \"~/components/pages/about/AboutAvailableRoles/AboutAvailableRoleDescription/about-available-role-description.types\";\nimport RoleImage from \"~/components/shared/role/RoleImage/RoleImage.vue\";\nimport RoleOriginBadge from \"~/components/shared/role/RoleOriginBadge/RoleOriginBadge.vue\";\nimport RoleTypeBadge from \"~/components/shared/role/RoleTypeBadge/RoleTypeBadge.vue\";\nimport type { RoleNames } from \"~/composables/api/role/enums/role.enums\";\nimport { useRoleName } from \"~/composables/api/role/useRoleName\";\n\nconst props = defineProps<AboutAvailableRoleDescriptionProps>();\n\nconst { t, messages, locale } = useI18n();\n\nconst roleDescriptionLines = computed<string[]>(() => {\n  type ComponentsMessages = Record<\"AboutAvailableRoleDescription\", Record<\"descriptions\", Record<RoleNames, Record<string, string>>>>;\n\n  const componentsMessages = messages.value[locale.value].components as ComponentsMessages;\n  const roleDescriptionMessages = componentsMessages.AboutAvailableRoleDescription.descriptions[props.role.name] as Record<string, string> | undefined;\n  if (!roleDescriptionMessages) {\n    return [];\n  }\n  return Object.keys(roleDescriptionMessages).map(key => t(`components.AboutAvailableRoleDescription.descriptions.${props.role.name}.${key}`));\n});\n\nconst { getRoleNameLabel } = useRoleName();\n</script>\n\n<style lang=\"scss\">\n#role-left-description {\n  min-width: 200px;\n}\n</style>"
    },
    "components/pages/about/AboutAvailableRoles/AboutAvailableRoles.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "21",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '' to be 'components.AboutAvailableRoles.assist…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 76
            },
            "start": {
              "column": 63,
              "line": 71
            }
          }
        },
        {
          "id": "22",
          "mutatorName": "BooleanLiteral",
          "replacement": "roles.value",
          "statusReason": "Hook timed out in 10000ms.\nIf this is a long-running hook, pass a timeout value as the last argument or configure it globally with \"hookTimeout\".",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16"
          ],
          "location": {
            "end": {
              "column": 19,
              "line": 72
            },
            "start": {
              "column": 7,
              "line": 72
            }
          }
        },
        {
          "id": "23",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '' to be 'components.AboutAvailableRoles.assist…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16"
          ],
          "location": {
            "end": {
              "column": 19,
              "line": 72
            },
            "start": {
              "column": 7,
              "line": 72
            }
          }
        },
        {
          "id": "24",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Hook timed out in 10000ms.\nIf this is a long-running hook, pass a timeout value as the last argument or configure it globally with \"hookTimeout\".",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16"
          ],
          "location": {
            "end": {
              "column": 19,
              "line": 72
            },
            "start": {
              "column": 7,
              "line": 72
            }
          }
        },
        {
          "id": "25",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Hook timed out in 10000ms.\nIf this is a long-running hook, pass a timeout value as the last argument or configure it globally with \"hookTimeout\".",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 74
            },
            "start": {
              "column": 21,
              "line": 72
            }
          }
        },
        {
          "id": "26",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'components.AboutAvailableRoles.assist…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14",
            "15",
            "16"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 75
            },
            "start": {
              "column": 12,
              "line": 75
            }
          }
        }
      ],
      "source": "<template>\n  <div id=\"about-available-roles\">\n    <div class=\"align-items-center d-flex\">\n      <RoleImage\n        id=\"about-available-roles-title-role-image\"\n        class=\"me-3\"\n        :role-name=\"RoleNames.ANGEL\"\n        sizes=\"50px\"\n      />\n\n      <h2 id=\"about-available-roles-title\">\n        {{ $t('components.AboutAvailableRoles.availableRoles') }}\n      </h2>\n    </div>\n\n    <hr>\n\n    <div\n      v-if=\"!roles\"\n      id=\"loading-roles-container\"\n      class=\"align-items-center d-flex flex-column justify-content-center\"\n    >\n      <VuePrimeProgressSpinner/>\n\n      <small>{{ $t(\"components.AboutAvailableRoles.loadingRoles\") }}</small>\n    </div>\n\n    <div v-else>\n      <p id=\"about-available-roles-first-section\">\n        {{ availableRolesText }}\n      </p>\n\n      <VuePrimeAccordion>\n        <VuePrimeAccordionTab\n          v-for=\"role in roles\"\n          :key=\"role.name\"\n        >\n          <template #header>\n            <div class=\"align-items-center available-role-image-header d-flex\">\n              <RoleImage\n                :role-name=\"role.name\"\n                sizes=\"40px\"\n              />\n\n              <div class=\"ms-2\">\n                {{ getRoleNameLabel(role.name) }}\n              </div>\n            </div>\n          </template>\n\n          <AboutAvailableRoleDescription :role=\"role\"/>\n        </VuePrimeAccordionTab>\n      </VuePrimeAccordion>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { storeToRefs } from \"pinia\";\n\nimport AboutAvailableRoleDescription from \"~/components/pages/about/AboutAvailableRoles/AboutAvailableRoleDescription/AboutAvailableRoleDescription.vue\";\nimport RoleImage from \"~/components/shared/role/RoleImage/RoleImage.vue\";\nimport { RoleNames } from \"~/composables/api/role/enums/role.enums\";\nimport { useRoleName } from \"~/composables/api/role/useRoleName\";\nimport { useRolesStore } from \"~/stores/role/useRolesStore\";\n\nconst { t } = useI18n();\nconst { getRoleNameLabel } = useRoleName();\nconst { roles } = storeToRefs(useRolesStore());\n\nconst availableRolesText = computed<string | undefined>(() => {\n  if (!roles.value) {\n    return undefined;\n  }\n  return t(\"components.AboutAvailableRoles.assistantHasManyRoles\", roles.value.length);\n});\n</script>"
    },
    "components/shared/external/BuyMeACoffeeButton/BuyMeACoffeeButton.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "27",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "80"
          ],
          "coveredBy": [
            "80",
            "81"
          ],
          "location": {
            "end": {
              "column": 58,
              "line": 18
            },
            "start": {
              "column": 17,
              "line": 18
            }
          }
        },
        {
          "id": "28",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "80"
          ],
          "coveredBy": [
            "80",
            "81"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 27
            },
            "start": {
              "column": 38,
              "line": 19
            }
          }
        },
        {
          "id": "29",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "80"
          ],
          "coveredBy": [
            "80",
            "81"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 20
            },
            "start": {
              "column": 9,
              "line": 20
            }
          }
        },
        {
          "id": "30",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "80"
          ],
          "coveredBy": [
            "80",
            "81"
          ],
          "location": {
            "end": {
              "column": 25,
              "line": 21
            },
            "start": {
              "column": 9,
              "line": 21
            }
          }
        },
        {
          "id": "31",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "80"
          ],
          "coveredBy": [
            "80",
            "81"
          ],
          "location": {
            "end": {
              "column": 25,
              "line": 22
            },
            "start": {
              "column": 17,
              "line": 22
            }
          }
        },
        {
          "id": "32",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "80"
          ],
          "coveredBy": [
            "80",
            "81"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 23
            },
            "start": {
              "column": 15,
              "line": 23
            }
          }
        },
        {
          "id": "33",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "80"
          ],
          "coveredBy": [
            "80",
            "81"
          ],
          "location": {
            "end": {
              "column": 21,
              "line": 24
            },
            "start": {
              "column": 15,
              "line": 24
            }
          }
        },
        {
          "id": "34",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "80"
          ],
          "coveredBy": [
            "80",
            "81"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 25
            },
            "start": {
              "column": 18,
              "line": 25
            }
          }
        },
        {
          "id": "35",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "80"
          ],
          "coveredBy": [
            "80",
            "81"
          ],
          "location": {
            "end": {
              "column": 25,
              "line": 26
            },
            "start": {
              "column": 17,
              "line": 26
            }
          }
        },
        {
          "id": "36",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "80"
          ],
          "coveredBy": [
            "80",
            "81"
          ],
          "location": {
            "end": {
              "column": 55,
              "line": 28
            },
            "start": {
              "column": 13,
              "line": 28
            }
          }
        }
      ],
      "source": "<template>\n  <a\n    href=\"https://www.buymeacoffee.com/antoinezanardi\"\n    rel=\"noopener noreferrer\"\n    target=\"_blank\"\n  >\n    <img\n      alt=\"Buy me a coffee\"\n      :src=\"src\"\n    >\n  </a>\n</template>\n\n<script setup lang=\"ts\">\nimport { stringify } from \"qs\";\nimport { objectToSnake } from \"ts-case-convert\";\n\nconst baseUri = \"https://img.buymeacoffee.com/button-api\";\nconst urlQueryParams = objectToSnake({\n  text: \"Buy me a coffee\",\n  slug: \"antoinezanardi\",\n  buttonColour: \"46a6ff\",\n  fontColour: \"FFFFFF\",\n  fontFamily: \"Lato\",\n  outlineColour: \"000000\",\n  coffeeColour: \"FFDD00\",\n});\nconst src = `${baseUri}/?${stringify(urlQueryParams)}`;\n</script>"
    },
    "components/shared/external/GitHubRepositoryButton/GitHubRepositoryButton.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "37",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `App Component > should render component without shallow and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "83"
          ],
          "coveredBy": [
            "66",
            "74",
            "75",
            "76",
            "83"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 26
            },
            "start": {
              "column": 43,
              "line": 21
            }
          }
        },
        {
          "id": "38",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `App Component > should render component without shallow and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "83"
          ],
          "coveredBy": [
            "66",
            "74",
            "75",
            "76",
            "83"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "41",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `App Component > should render component without shallow and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "83"
          ],
          "coveredBy": [
            "66",
            "76",
            "83"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 25
            },
            "start": {
              "column": 12,
              "line": 25
            }
          }
        },
        {
          "id": "40",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `GitHub Repository Button > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "74"
          ],
          "coveredBy": [
            "74",
            "75",
            "76"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 24
            },
            "start": {
              "column": 25,
              "line": 22
            }
          }
        },
        {
          "id": "39",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `GitHub Repository Button > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "74"
          ],
          "coveredBy": [
            "66",
            "74",
            "75",
            "76",
            "83"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        }
      ],
      "source": "<template>\n  <a\n    id=\"github-repository-link\"\n    class=\"p-button primary\"\n    href=\"https://www.github.com/antoinezanardi/werewolves-assistant-web-next\"\n    rel=\"noopener noreferrer\"\n    target=\"_blank\"\n  >\n    <span class=\"fa-github fab me-2\"/>\n    {{ textButton }}\n  </a>\n</template>\n\n<script lang=\"ts\" setup>\nimport type { GitHubRepositoryButtonProps } from \"~/components/shared/external/GitHubRepositoryButton/git-hub-repository-button.types\";\n\nconst props = defineProps<GitHubRepositoryButtonProps>();\n\nconst { t } = useI18n();\n\nconst textButton = computed<string>(() => {\n  if (props.textButton) {\n    return props.textButton;\n  }\n  return t(\"components.GitHubRepositoryButton.thisProjectIsOpenSource\");\n});\n</script>"
    },
    "components/shared/role/RoleImage/RoleImage.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "42",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "We can't mutate defineProps macro as it is stated here: https://github.com/stryker-mutator/stryker-js/issues/3305.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 18
            },
            "start": {
              "column": 59,
              "line": 15
            }
          }
        },
        {
          "id": "43",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "We can't mutate defineProps macro as it is stated here: https://github.com/stryker-mutator/stryker-js/issues/3305.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 16
            },
            "start": {
              "column": 10,
              "line": 16
            }
          }
        },
        {
          "id": "44",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "We can't mutate defineProps macro as it is stated here: https://github.com/stryker-mutator/stryker-js/issues/3305.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 23,
              "line": 17
            },
            "start": {
              "column": 15,
              "line": 17
            }
          }
        },
        {
          "id": "45",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Hook timed out in 10000ms.\nIf this is a long-running hook, pass a timeout value as the last argument or configure it globally with \"hookTimeout\".",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "59",
            "60",
            "61",
            "62"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 28
            },
            "start": {
              "column": 45,
              "line": 24
            }
          }
        },
        {
          "id": "46",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'http://127.0.0.1/public/assets/images…' to be 'http://127.0.0.1/public/assets/images…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "62"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "59",
            "60",
            "61",
            "62"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 26
            },
            "start": {
              "column": 23,
              "line": 26
            }
          }
        },
        {
          "id": "47",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `Role Image Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "59"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "59",
            "60",
            "61",
            "62"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 26
            },
            "start": {
              "column": 23,
              "line": 26
            }
          }
        },
        {
          "id": "48",
          "mutatorName": "EqualityOperator",
          "replacement": "props.definition !== \"normal\"",
          "statusReason": "Snapshot `Role Image Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "59"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "59",
            "60",
            "61",
            "62"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 26
            },
            "start": {
              "column": 23,
              "line": 26
            }
          }
        },
        {
          "id": "49",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Role Image Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "59"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "59",
            "60",
            "61",
            "62"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 26
            },
            "start": {
              "column": 44,
              "line": 26
            }
          }
        },
        {
          "id": "50",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Snapshot `Role Image Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "59"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "59",
            "60",
            "61",
            "62"
          ],
          "location": {
            "end": {
              "column": 57,
              "line": 26
            },
            "start": {
              "column": 55,
              "line": 26
            }
          }
        },
        {
          "id": "51",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected 'http://127.0.0.1/public/assets/images…' to be 'http://127.0.0.1/public/assets/images…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "62"
          ],
          "coveredBy": [
            "62"
          ],
          "location": {
            "end": {
              "column": 82,
              "line": 26
            },
            "start": {
              "column": 60,
              "line": 26
            }
          }
        },
        {
          "id": "52",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Snapshot `Role Image Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "59"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "59",
            "60",
            "61",
            "62"
          ],
          "location": {
            "end": {
              "column": 107,
              "line": 27
            },
            "start": {
              "column": 10,
              "line": 27
            }
          }
        }
      ],
      "source": "<template>\n  <NuxtImg\n    :aria-label=\"getRoleNameLabel(roleName)\"\n    class=\"role-image\"\n    :height=\"sizes\"\n    :src=\"roleImageSrc\"\n    :width=\"sizes\"\n  />\n</template>\n\n<script setup lang=\"ts\">\nimport type { RoleImageProps } from \"~/components/shared/role/RoleImage/role-image.types\";\nimport { useRoleName } from \"~/composables/api/role/useRoleName\";\n\nconst props = withDefaults(defineProps<RoleImageProps>(), {\n  sizes: \"50\",\n  definition: \"normal\",\n});\n\nconst { getRoleNameLabel } = useRoleName();\n\nconst runtimeConfig = useRuntimeConfig();\n\nconst roleImageSrc = computed<string>(() => {\n  const apiBaseUrl = runtimeConfig.public.werewolvesAssistantApi.baseUrl;\n  const imageSuffix = props.definition === \"normal\" ? \"\" : `-${props.definition}`;\n  return `${apiBaseUrl}/public/assets/images/roles/${props.roleName}/${props.roleName}${imageSuffix}.jpeg`;\n});\n</script>\n\n<style lang=\"scss\" scoped>\n.role-image {\n  border-radius: 10%;\n  border: 3px solid #1c1c1c;\n}\n</style>"
    },
    "components/shared/role/RoleTypeBadge/RoleTypeBadge.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "53",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Hook timed out in 10000ms.\nIf this is a long-running hook, pass a timeout value as the last argument or configure it globally with \"hookTimeout\".",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "41"
          ],
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 28
            },
            "start": {
              "column": 60,
              "line": 20
            }
          }
        },
        {
          "id": "54",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Hook timed out in 10000ms.\nIf this is a long-running hook, pass a timeout value as the last argument or configure it globally with \"hookTimeout\".",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "41"
          ],
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 26
            },
            "start": {
              "column": 67,
              "line": 21
            }
          }
        },
        {
          "id": "55",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'success' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": [
            "45"
          ],
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 22
            },
            "start": {
              "column": 27,
              "line": 22
            }
          }
        },
        {
          "id": "56",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'success' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": [
            "45"
          ],
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 22
            },
            "start": {
              "column": 39,
              "line": 22
            }
          }
        },
        {
          "id": "57",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Snapshot `Role Type Badge Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "41"
          ],
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 23
            },
            "start": {
              "column": 27,
              "line": 23
            }
          }
        },
        {
          "id": "58",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Role Type Badge Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "41"
          ],
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 23
            },
            "start": {
              "column": 39,
              "line": 23
            }
          }
        },
        {
          "id": "59",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'info' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "47"
          ],
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 45,
              "line": 24
            },
            "start": {
              "column": 25,
              "line": 24
            }
          }
        },
        {
          "id": "60",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'info' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "47"
          ],
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 24
            },
            "start": {
              "column": 37,
              "line": 24
            }
          }
        },
        {
          "id": "61",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'warning' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "46"
          ],
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 25
            },
            "start": {
              "column": 28,
              "line": 25
            }
          }
        },
        {
          "id": "62",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'warning' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "46"
          ],
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 25
            },
            "start": {
              "column": 40,
              "line": 25
            }
          }
        }
      ],
      "source": "<template>\n  <VuePrimeBadge\n    v-p-tooltip=\"$t(`components.RoleTypeBadge.descriptions.${roleType}`)\"\n    :aria-label=\"$t(`components.RoleTypeBadge.roleType`)\"\n    class=\"role-type-badge\"\n    :severity=\"roleTypeBadgeAttributes.severity\"\n    size=\"large\"\n    :value=\"$t(`shared.role.type.${roleType}`)\"\n  />\n</template>\n\n<script setup lang=\"ts\">\nimport type { BadgeProps } from \"primevue/badge\";\n\nimport type { RoleTypeBadgeProps } from \"~/components/shared/role/RoleTypeBadge/role-type-badge-types\";\nimport { RoleTypes } from \"~/composables/api/role/enums/role.enums\";\n\nconst props = defineProps<RoleTypeBadgeProps>();\n\nconst roleTypeBadgeAttributes = computed<BadgeProps>(() => {\n  const roleTypesBadgeAttributes: Record<RoleTypes, BadgeProps> = {\n    [RoleTypes.VILLAGER]: { severity: \"success\" },\n    [RoleTypes.WEREWOLF]: { severity: \"danger\" },\n    [RoleTypes.LONELY]: { severity: \"info\" },\n    [RoleTypes.AMBIGUOUS]: { severity: \"warning\" },\n  };\n  return roleTypesBadgeAttributes[props.roleType];\n});\n</script>\n\n<style lang=\"scss\" scoped>\n  .role-type-badge {\n    cursor: help;\n  }\n</style>"
    },
    "composables/api/api.constants.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "63",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 3
            },
            "start": {
              "column": 35,
              "line": 3
            }
          }
        },
        {
          "id": "64",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 84,
              "line": 3
            },
            "start": {
              "column": 46,
              "line": 3
            }
          }
        },
        {
          "id": "65",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 3
            },
            "start": {
              "column": 64,
              "line": 3
            }
          }
        }
      ],
      "source": "import type { UseFetchOptions } from \"#app\";\n\nconst DEFAULT_USE_FETCH_OPTIONS = { headers: { \"Content-Type\": \"application/json\" } } satisfies UseFetchOptions<unknown>;\n\nexport { DEFAULT_USE_FETCH_OPTIONS };"
    },
    "composables/api/role/useFetchRoles.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "66",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/role/useFetchRoles.ts(10,27): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "82",
            "83",
            "84",
            "88",
            "89"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 41,
              "line": 10
            }
          }
        },
        {
          "id": "67",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/role/useFetchRoles.ts(14,69): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "88",
            "89"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 20
            },
            "start": {
              "column": 121,
              "line": 14
            }
          }
        },
        {
          "id": "68",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  \"http://127.0.0.1/roles\",\n  Object {\n    \"headers\": Object {\n      \"Content-Type\": \"application/json\",\n    },\n    \"method\": \"GET\",\n  },\n  \"$dk08ZMi4Ri\",\n], but it was called with \"\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "88"
          ],
          "coveredBy": [
            "88",
            "89"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 15
            },
            "start": {
              "column": 29,
              "line": 15
            }
          }
        },
        {
          "id": "69",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  \"http://127.0.0.1/roles\",\n  Object {\n    \"headers\": Object {\n      \"Content-Type\": \"application/json\",\n    },\n    \"method\": \"GET\",\n  },\n  \"$dk08ZMi4Ri\",\n], but it was called with \"http://127.0.0.1/roles\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "88"
          ],
          "coveredBy": [
            "88",
            "89"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 19
            },
            "start": {
              "column": 49,
              "line": 15
            }
          }
        },
        {
          "id": "70",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "composables/api/role/useFetchRoles.ts(15,5): error TS2322: Type '_AsyncData<PickFrom<_ResT, KeysOf<DataT>> | null, FetchError<any> | null>' is not assignable to type '_AsyncData<Role[] | null, FetchError<any> | null>'.\n  Type 'PickFrom<_ResT, KeysOf<DataT>> | null' is not assignable to type 'Role[] | null'.\n    Type 'PickFrom<_ResT, KeysOf<DataT>>' is not assignable to type 'Role[] | null'.\n      Type '_ResT | (_ResT extends Record<string, any> ? keyof _ResT extends (DataT extends DataT ? keyof DataT extends string ? string & keyof DataT : never : never) ? _ResT : (DataT extends DataT ? keyof DataT extends string ? string & keyof DataT : never : never) extends never ? _ResT : Pick<...> : _ResT)' is not assignable to type 'Role[] | null'.\n        Type '_ResT extends Record<string, any> ? keyof _ResT extends (DataT extends DataT ? keyof DataT extends string ? string & keyof DataT : never : never) ? _ResT : (DataT extends DataT ? keyof DataT extends string ? string & keyof DataT : never : never) extends never ? _ResT : Pick<...> : _ResT' is not assignable to type 'Role[] | null'.\n          Type '_ResT | (keyof _ResT extends (DataT extends DataT ? keyof DataT extends string ? string & keyof DataT : never : never) ? _ResT : (DataT extends DataT ? keyof DataT extends string ? string & keyof DataT : never : never) extends never ? _ResT : Pick<...>)' is not assignable to type 'Role[] | null'.\n            Type '_ResT' is not assignable to type 'Role[] | null'.\n              Type '_ResT' is not assignable to type 'Role[]'.\n                Type '_ResT extends Record<string, any> ? keyof _ResT extends (DataT extends DataT ? keyof DataT extends string ? string & keyof DataT : never : never) ? _ResT : (DataT extends DataT ? keyof DataT extends string ? string & keyof DataT : never : never) extends never ? _ResT : Pick<...> : _ResT' is not assignable to type 'Role[]'.\n                  Type 'PickFrom<_ResT, KeysOf<DataT>>' is not assignable to type 'Role[]'.\n                    Type '_ResT | (_ResT extends Record<string, any> ? keyof _ResT extends (DataT extends DataT ? keyof DataT extends string ? string & keyof DataT : never : never) ? _ResT : (DataT extends DataT ? keyof DataT extends string ? string & keyof DataT : never : never) extends never ? _ResT : Pick<...> : _ResT)' is not assignable to type 'Role[]'.\n                      Type '_ResT extends Record<string, any> ? keyof _ResT extends (DataT extends DataT ? keyof DataT extends string ? string & keyof DataT : never : never) ? _ResT : (DataT extends DataT ? keyof DataT extends string ? string & keyof DataT : never : never) extends never ? _ResT : Pick<...> : _ResT' is not assignable to type 'Role[]'.\n                        Type '_ResT | (keyof _ResT extends (DataT extends DataT ? keyof DataT extends string ? string & keyof DataT : never : never) ? _ResT : (DataT extends DataT ? keyof DataT extends string ? string & keyof DataT : never : never) extends never ? _ResT : Pick<...>)' is not assignable to type 'Role[]'.\n                          Type '_ResT' is not assignable to type 'Role[]'.\ncomposables/api/role/useFetchRoles.ts(16,7): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(request: NitroFetchRequest | Ref<NitroFetchRequest> | (() => NitroFetchRequest), opts?: UseFetchOptions<Role[], Role[], KeysOf<...>, null, NitroFetchRequest, AvailableRouterMethod<...>> | undefined): AsyncData<...>', gave the following error.\n    Type '\"\"' is not assignable to type '\"GET\" | \"HEAD\" | \"PATCH\" | \"POST\" | \"PUT\" | \"DELETE\" | \"CONNECT\" | \"OPTIONS\" | \"TRACE\" | \"get\" | \"head\" | \"patch\" | \"post\" | \"put\" | \"delete\" | \"connect\" | \"options\" | \"trace\" | Ref<...> | undefined'.\n  Overload 2 of 2, '(request: NitroFetchRequest | Ref<NitroFetchRequest> | (() => NitroFetchRequest), opts?: UseFetchOptions<Role[], Role[], KeysOf<...>, Role[], NitroFetchRequest, AvailableRouterMethod<...>> | undefined): AsyncData<...>', gave the following error.\n    Type '\"\"' is not assignable to type '\"GET\" | \"HEAD\" | \"PATCH\" | \"POST\" | \"PUT\" | \"DELETE\" | \"CONNECT\" | \"OPTIONS\" | \"TRACE\" | \"get\" | \"head\" | \"patch\" | \"post\" | \"put\" | \"delete\" | \"connect\" | \"options\" | \"trace\" | Ref<...> | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "88",
            "89"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 16
            },
            "start": {
              "column": 15,
              "line": 16
            }
          }
        },
        {
          "id": "71",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "composables/api/role/useFetchRoles.ts(21,3): error TS2741: Property 'fetchRoles' is missing in type '{}' but required in type 'UseFetchRoles'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "82",
            "83",
            "84",
            "88",
            "89"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 21
            },
            "start": {
              "column": 10,
              "line": 21
            }
          }
        }
      ],
      "source": "import type { UseFetchOptions } from \"#app\";\n\nimport { DEFAULT_USE_FETCH_OPTIONS } from \"~/composables/api/api.constants\";\nimport type { Role } from \"~/composables/api/role/types/role.types\";\n\ntype UseFetchRoles = {\n  fetchRoles: (options?: UseFetchOptions<Role[]>) => Promise<ReturnType<typeof useFetch<Role[] | null>>>;\n};\n\nfunction useFetchRoles(): UseFetchRoles {\n  const config = useRuntimeConfig();\n  const { baseUrl } = config.public.werewolvesAssistantApi;\n\n  async function fetchRoles(options: UseFetchOptions<Role[]> = {}): Promise<ReturnType<typeof useFetch<Role[] | null>>> {\n    return useFetch<Role[]>(`${baseUrl}/roles`, {\n      method: \"GET\",\n      ...DEFAULT_USE_FETCH_OPTIONS,\n      ...options,\n    });\n  }\n  return { fetchRoles };\n}\n\nexport { useFetchRoles };"
    },
    "composables/api/role/useRoleName.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "72",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/role/useRoleName.ts(7,25): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "87"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 14
            },
            "start": {
              "column": 37,
              "line": 7
            }
          }
        },
        {
          "id": "73",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/role/useRoleName.ts(10,51): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "87"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 12
            },
            "start": {
              "column": 58,
              "line": 10
            }
          }
        },
        {
          "id": "74",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Snapshot `About Available Role Description Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "87"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 11
            },
            "start": {
              "column": 14,
              "line": 11
            }
          }
        },
        {
          "id": "75",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "composables/api/role/useRoleName.ts(13,3): error TS2741: Property 'getRoleNameLabel' is missing in type '{}' but required in type 'UseRoleName'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "87"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 13
            },
            "start": {
              "column": 10,
              "line": 13
            }
          }
        }
      ],
      "source": "import type { RoleNames } from \"~/composables/api/role/enums/role.enums\";\n\ntype UseRoleName = {\n  getRoleNameLabel: (roleName: RoleNames) => string;\n};\n\nfunction useRoleName(): UseRoleName {\n  const { t } = useI18n();\n\n  function getRoleNameLabel(roleName: RoleNames): string {\n    return t(`shared.role.name.${roleName}`);\n  }\n  return { getRoleNameLabel };\n}\n\nexport { useRoleName };"
    },
    "pages/index.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "76",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "The macro definePageMeta from Nuxt is breaking Stryker, so we ignore it.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 33,
              "line": 56
            },
            "start": {
              "column": 16,
              "line": 56
            }
          }
        },
        {
          "id": "77",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "The macro definePageMeta from Nuxt is breaking Stryker, so we ignore it.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 31,
              "line": 56
            },
            "start": {
              "column": 26,
              "line": 56
            }
          }
        },
        {
          "id": "78",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Snapshot `App Component > should render component without shallow and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "83"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67",
            "83"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 61
            },
            "start": {
              "column": 77,
              "line": 58
            }
          }
        },
        {
          "id": "79",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected { label: '', icon: 'fa-2x' } to strictly equal { icon: 'fa-2x', …(1) }",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "66"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67",
            "83"
          ],
          "location": {
            "end": {
              "column": 39,
              "line": 59
            },
            "start": {
              "column": 10,
              "line": 59
            }
          }
        },
        {
          "id": "80",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected { …(2) } to strictly equal { icon: 'fa-2x', …(1) }",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "66"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67",
            "83"
          ],
          "location": {
            "end": {
              "column": 16,
              "line": 60
            },
            "start": {
              "column": 9,
              "line": 60
            }
          }
        }
      ],
      "source": "<template>\n  <div class=\"container-fluid d-flex flex-column\">\n    <div class=\"align-items-center container-fluid d-flex flex-column flex-grow-1 justify-content-center\">\n      <div class=\"col-12 text-center\">\n        <NuxtImg\n          sizes=\"lg:200px\"\n          src=\"/img/logo/square/werewolves-logo.png\"\n        />\n      </div>\n\n      <div class=\"col-12 text-center\">\n        <h1\n          id=\"title\"\n          :aria-label=\"$t('shared.werewolvesAssistant')\"\n          class=\"mt-0\"\n        >\n          {{ $t('shared.werewolvesAssistant') }}\n        </h1>\n      </div>\n\n      <div class=\"col-12 col-lg-3\">\n        <VuePrimeButton\n          class=\"w-100\"\n          icon=\"fa fa-play-circle\"\n          :label=\"$t('pages.index.play')\"\n          :pt=\"buttonsPassThroughProperties\"\n          raised\n          size=\"large\"\n        />\n      </div>\n\n      <div class=\"col-12 col-lg-3 mt-4\">\n        <NuxtLink\n          :aria-label=\"$t('pages.index.about')\"\n          class=\"p-button p-button-secondary w-100\"\n          to=\"/about\"\n        >\n          <span class=\"fa fa-question me-2\"/>\n          {{ $t('pages.index.about') }}\n        </NuxtLink>\n      </div>\n    </div>\n\n    <hr class=\"w-100\">\n\n    <IndexFooter/>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport type { ButtonPassThroughOptions } from \"primevue/button\";\nimport type { PassThrough } from \"primevue/ts-helpers\";\n\nimport IndexFooter from \"~/components/pages/index/IndexFooter.vue\";\n\ndefinePageMeta({ layout: false });\n\nconst buttonsPassThroughProperties: PassThrough<ButtonPassThroughOptions> = {\n  label: \"fs-3 fw-bold text-uppercase\",\n  icon: \"fa-2x\",\n};\n</script>\n\n<style>\n#title {\n  font-size: 4rem;\n}\n</style>"
    },
    "stores/role/useRolesStore.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "81",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "tests/unit/specs/app.nuxt.spec.ts(28,23): error TS2339: Property 'fetchAndSetRoles' does not exist on type 'Store<StoreIds, {}, {}, {}>'.\ntests/unit/specs/components/pages/about/AboutAvailableRoles/AboutAvailableRoles.nuxt.spec.ts(44,20): error TS2339: Property 'roles' does not exist on type 'Store<StoreIds, {}, {}, {}>'.\ntests/unit/specs/components/pages/about/AboutAvailableRoles/AboutAvailableRoles.nuxt.spec.ts(74,20): error TS2339: Property 'roles' does not exist on type 'Store<StoreIds, {}, {}, {}>'.\ntests/unit/specs/stores/useRolesStore.spec.ts(25,23): error TS2339: Property 'roles' does not exist on type 'Store<StoreIds, {}, {}, {}>'.\ntests/unit/specs/stores/useRolesStore.spec.ts(26,23): error TS2339: Property 'fetchingRoleStatus' does not exist on type 'Store<StoreIds, {}, {}, {}>'.\ntests/unit/specs/stores/useRolesStore.spec.ts(32,24): error TS2339: Property 'fetchAndSetRoles' does not exist on type 'Store<StoreIds, {}, {}, {}>'.\ntests/unit/specs/stores/useRolesStore.spec.ts(45,24): error TS2339: Property 'fetchAndSetRoles' does not exist on type 'Store<StoreIds, {}, {}, {}>'.\ntests/unit/specs/stores/useRolesStore.spec.ts(47,25): error TS2339: Property 'roles' does not exist on type 'Store<StoreIds, {}, {}, {}>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "71",
            "72",
            "73",
            "82",
            "83",
            "84"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 26
            },
            "start": {
              "column": 57,
              "line": 9
            }
          }
        },
        {
          "id": "82",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "stores/role/useRolesStore.ts(12,58): error TS2345: Argument of type '\"\"' is not assignable to parameter of type 'AsyncDataRequestStatus'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "71",
            "72",
            "73",
            "82",
            "83",
            "84"
          ],
          "location": {
            "end": {
              "column": 64,
              "line": 12
            },
            "start": {
              "column": 58,
              "line": 12
            }
          }
        },
        {
          "id": "83",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "72"
          ],
          "coveredBy": [
            "72",
            "73"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 20
            },
            "start": {
              "column": 52,
              "line": 15
            }
          }
        },
        {
          "id": "84",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "stores/role/useRolesStore.ts(16,5): error TS2322: Type '\"\"' is not assignable to type 'AsyncDataRequestStatus'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "72",
            "73"
          ],
          "location": {
            "end": {
              "column": 41,
              "line": 16
            },
            "start": {
              "column": 32,
              "line": 16
            }
          }
        },
        {
          "id": "85",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "tests/unit/specs/app.nuxt.spec.ts(28,23): error TS2339: Property 'fetchAndSetRoles' does not exist on type 'Store<StoreIds, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/about/AboutAvailableRoles/AboutAvailableRoles.nuxt.spec.ts(44,20): error TS2339: Property 'roles' does not exist on type 'Store<StoreIds, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/about/AboutAvailableRoles/AboutAvailableRoles.nuxt.spec.ts(74,20): error TS2339: Property 'roles' does not exist on type 'Store<StoreIds, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/useRolesStore.spec.ts(25,23): error TS2339: Property 'roles' does not exist on type 'Store<StoreIds, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/useRolesStore.spec.ts(26,23): error TS2339: Property 'fetchingRoleStatus' does not exist on type 'Store<StoreIds, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/useRolesStore.spec.ts(32,24): error TS2339: Property 'fetchAndSetRoles' does not exist on type 'Store<StoreIds, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/useRolesStore.spec.ts(45,24): error TS2339: Property 'fetchAndSetRoles' does not exist on type 'Store<StoreIds, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/useRolesStore.spec.ts(47,25): error TS2339: Property 'roles' does not exist on type 'Store<StoreIds, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "71",
            "72",
            "73",
            "82",
            "83",
            "84"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 25
            },
            "start": {
              "column": 10,
              "line": 21
            }
          }
        }
      ],
      "source": "import type { AsyncDataRequestStatus } from \"#app/composables/asyncData\";\nimport { ref } from \"vue\";\nimport { defineStore } from \"pinia\";\n\nimport type { Role } from \"~/composables/api/role/types/role.types\";\nimport { useFetchRoles } from \"~/composables/api/role/useFetchRoles\";\nimport { StoreIds } from \"~/stores/enums/store.enum\";\n\nconst useRolesStore = defineStore(StoreIds.ROLES, () => {\n  const { fetchRoles } = useFetchRoles();\n\n  const fetchingRoleStatus = ref<AsyncDataRequestStatus>(\"idle\");\n  const roles = ref<Role[] | null>(null);\n\n  async function fetchAndSetRoles(): Promise<void> {\n    fetchingRoleStatus.value = \"pending\";\n    const { data, status } = await fetchRoles();\n    roles.value = data.value;\n    fetchingRoleStatus.value = status.value;\n  }\n  return {\n    roles,\n    fetchingRoleStatus,\n    fetchAndSetRoles,\n  };\n});\n\nexport { useRolesStore };"
    }
  },
  "schemaVersion": "1.0",
  "thresholds": {
    "high": 100,
    "low": 100,
    "break": 100
  },
  "testFiles": {
    "tests/unit/specs/components/pages/about/AboutWerewolvesAssistant/AboutWerewolvesAssistant.nuxt.spec.ts": {
      "tests": [
        {
          "id": "0",
          "name": "About Werewolves Assistant Component should render component and match snapshot when mounted."
        },
        {
          "id": "1",
          "name": "About Werewolves Assistant Component Title should display translated title when rendered."
        },
        {
          "id": "2",
          "name": "About Werewolves Assistant Component Sections should translate first section when rendered."
        },
        {
          "id": "3",
          "name": "About Werewolves Assistant Component Sections should translate second section when rendered."
        },
        {
          "id": "4",
          "name": "About Werewolves Assistant Component Sections should translate third section for each bullet item when rendered."
        },
        {
          "id": "5",
          "name": "About Werewolves Assistant Component Sections should translate fourth section when rendered."
        },
        {
          "id": "6",
          "name": "About Werewolves Assistant Component Sections Disclaimer should translate disclaimer title when rendered."
        },
        {
          "id": "7",
          "name": "About Werewolves Assistant Component Sections Disclaimer should translate disclaimer first section when rendered."
        },
        {
          "id": "8",
          "name": "About Werewolves Assistant Component Sections Disclaimer should translate disclaimer second section when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport { expect } from \"vitest\";\n\nimport AboutWerewolvesAssistant from \"~/components/pages/about/AboutWerewolvesAssistant.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"About Werewolves Assistant Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof AboutWerewolvesAssistant>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(AboutWerewolvesAssistant);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Title\", () => {\n    it(\"should display translated title when rendered.\", () => {\n      const title = wrapper.find<HTMLHeadElement>(\"#about-werewolves-assistant-title\");\n\n      expect(title.text()).toBe(\"The Werewolves Assistant takes the stage !\");\n    });\n  });\n\n  describe(\"Sections\", () => {\n    it(\"should translate first section when rendered.\", () => {\n      const firstSection = wrapper.find<HTMLParagraphElement>(\"#about-werewolves-assistant-first-section\");\n\n      expect(firstSection.text()).toBe(\"To ease the heavy task that falls on the game master when hosting a Werewolves game, \" +\n      \"the Werewolves Assistant proves to be the ideal tool !\");\n    });\n\n    it(\"should translate second section when rendered.\", () => {\n      const secondSection = wrapper.find<HTMLParagraphElement>(\"#about-werewolves-assistant-second-section\");\n\n      expect(secondSection.text()).toBe(\"This Assistant offers a variety of features, including:\");\n    });\n\n    it(\"should translate third section for each bullet item when rendered.\", () => {\n      const thirdSection = wrapper.find<HTMLUListElement>(\"#about-werewolves-assistant-third-section\");\n      const thirdSectionBulletItems = thirdSection.findAll<HTMLLIElement>(\"li\");\n\n      expect(thirdSectionBulletItems).toHaveLength(5);\n      expect(thirdSectionBulletItems[0].text()).toBe(\"A game composition screen allowing the creation of sessions for 4 to 40 players, \" +\n      \"with the option to randomly assign roles.\");\n      expect(thirdSectionBulletItems[1].text()).toBe(\"A playful game tracking interface, providing a pleasant visual experience.\");\n      expect(thirdSectionBulletItems[2].text()).toBe(\"For each key event, the ability to input players' choices, such as the selection of \" +\n      \"the Werewolves' target or the election of the mayor.\");\n      expect(thirdSectionBulletItems[3].text()).toBe(\"The Assistant handles the scheduling of game turns, displaying deaths and other events, \" +\n      \"as well as retaining all choices made during the game.\");\n      expect(thirdSectionBulletItems[4].text()).toBe(\"At the end of the game, a summary is generated, indicating the victorious camp and \" +\n      \"providing a complete history of past actions.\");\n    });\n\n    it(\"should translate fourth section when rendered.\", () => {\n      const fourthSection = wrapper.find<HTMLParagraphElement>(\"#about-werewolves-assistant-fourth-section\");\n\n      expect(fourthSection.text()).toBe(\"In summary, the Werewolves Assistant invites you to (re)discover the joy of taking on the role of the game master in a Werewolves \" +\n      \"game. Accessible from any device with an internet browser, this tool is and will remain entirely FREE.\");\n    });\n\n    describe(\"Disclaimer\", () => {\n      it(\"should translate disclaimer title when rendered.\", () => {\n        const disclaimerTitle = wrapper.find<HTMLParagraphElement>(\"#about-werewolves-assistant-disclaimer-title\");\n\n        expect(disclaimerTitle.text()).toBe(\"However, please be aware\");\n      });\n\n      it(\"should translate disclaimer first section when rendered.\", () => {\n        const disclaimerFirstSection = wrapper.find<HTMLParagraphElement>(\"#about-werewolves-assistant-disclaimer-first-section\");\n\n        expect(disclaimerFirstSection.text()).toBe(\"The Werewolves Assistant has no intention of replacing the original \" +\n        \"Werewolves of Miller's Hollow™ game. Its use requires prior possession of a game with its cards.\");\n      });\n\n      it(\"should translate disclaimer second section when rendered.\", () => {\n        const disclaimerSecondSection = wrapper.find<HTMLParagraphElement>(\"#about-werewolves-assistant-disclaimer-second-section\");\n\n        expect(disclaimerSecondSection.text()).toBe(\"It is important to emphasize that the Assistant positions itself as an exclusive aid \" +\n        \"to the game master, facilitating game management without altering the essence and experience unique to the original board game. \" +\n        \"Thus, it complements and enhances the game's dynamics while preserving its authentic character.\");\n      });\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/about/AboutAvailableRoles/AboutAvailableRoles.nuxt.spec.ts": {
      "tests": [
        {
          "id": "9",
          "name": "About Available Roles Component should render component and match snapshot when mounted."
        },
        {
          "id": "10",
          "name": "About Available Roles Component Title should display role image with angel when rendered."
        },
        {
          "id": "11",
          "name": "About Available Roles Component Title should translate title when rendered."
        },
        {
          "id": "12",
          "name": "About Available Roles Component Available Roles Accordion Roles are not set yet should display loading roles container when roles are not set yet."
        },
        {
          "id": "13",
          "name": "About Available Roles Component Available Roles Accordion Roles are not set yet should translate loading roles text when roles are not set yet."
        },
        {
          "id": "14",
          "name": "About Available Roles Component Available Roles Accordion Roles are set should translate first section when roles are set."
        },
        {
          "id": "15",
          "name": "About Available Roles Component Available Roles Accordion Roles are set should display 3 available roles accordion tabs when 3 roles are set."
        },
        {
          "id": "16",
          "name": "About Available Roles Component Available Roles Accordion Roles are set should display werewolf role description for first accordion tab when first accordion tab is for werewolf role."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport AccordionTab from \"primevue/accordiontab\";\nimport { nextTick } from \"vue\";\n\nimport AboutAvailableRoleDescription from \"~/components/pages/about/AboutAvailableRoles/AboutAvailableRoleDescription/AboutAvailableRoleDescription.vue\";\nimport AboutAvailableRoles from \"~/components/pages/about/AboutAvailableRoles/AboutAvailableRoles.vue\";\nimport type RoleImage from \"~/components/shared/role/RoleImage/RoleImage.vue\";\nimport { RoleNames } from \"~/composables/api/role/enums/role.enums\";\nimport type { Role } from \"~/composables/api/role/types/role.types\";\nimport { useRolesStore } from \"~/stores/role/useRolesStore\";\nimport { createFakeRole } from \"~/tests/unit/utils/factories/composables/api/role/role.factory\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"About Available Roles Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof AboutAvailableRoles>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(AboutAvailableRoles);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Title\", () => {\n    it(\"should display role image with angel when rendered.\", () => {\n      const roleImage = wrapper.findComponent<typeof RoleImage>(\"#about-available-roles-title-role-image\");\n\n      expect(roleImage.props(\"roleName\")).toBe(RoleNames.ANGEL);\n    });\n\n    it(\"should translate title when rendered.\", () => {\n      const title = wrapper.find<HTMLHeadElement>(\"#about-available-roles-title\");\n\n      expect(title.text()).toBe(\"Available roles\");\n    });\n  });\n\n  describe(\"Available Roles Accordion\", () => {\n    describe(\"Roles are not set yet\", () => {\n      beforeEach(async() => {\n        const rolesStore = useRolesStore();\n        rolesStore.roles = null;\n        await nextTick();\n      });\n\n      it(\"should display loading roles container when roles are not set yet.\", () => {\n        const loadingRolesContainer = wrapper.find<HTMLDivElement>(\"#loading-roles-container\");\n\n        expect(loadingRolesContainer.exists()).toBeTruthy();\n      });\n\n      it(\"should translate loading roles text when roles are not set yet.\", () => {\n        const loadingRolesText = wrapper.find<HTMLDivElement>(\"#loading-roles-container\");\n\n        expect(loadingRolesText.text()).toBe(\"Loading roles…\");\n      });\n    });\n\n    describe(\"Roles are set\", () => {\n      const roles = [\n        createFakeRole({ name: RoleNames.WEREWOLF }),\n        createFakeRole({ name: RoleNames.ANGEL }),\n        createFakeRole({ name: RoleNames.ACCURSED_WOLF_FATHER }),\n      ];\n\n      beforeEach(async() => {\n        wrapper = await mountSuspendedComponent(AboutAvailableRoles, {\n          shallow: false,\n          global: { stubs: { AboutAvailableRoleDescription: true } },\n        });\n        const rolesStore = useRolesStore();\n        rolesStore.roles = roles;\n        await nextTick();\n      });\n\n      it(\"should translate first section when roles are set.\", () => {\n        const firstSection = wrapper.find<HTMLDivElement>(\"#about-available-roles-first-section\");\n\n        expect(firstSection.text()).toBe(\"components.AboutAvailableRoles.assistantHasManyRoles\");\n      });\n\n      it(\"should display 3 available roles accordion tabs when 3 roles are set.\", () => {\n        const availableRolesAccordionTabs = wrapper.findAllComponents<typeof AccordionTab>(AccordionTab);\n\n        expect(availableRolesAccordionTabs).toHaveLength(3);\n      });\n\n      it(\"should display werewolf role description for first accordion tab when first accordion tab is for werewolf role.\", () => {\n        const availableRolesAccordionTabs = wrapper.findAllComponents<typeof AccordionTab>(AccordionTab);\n        const firstAccordionTab = availableRolesAccordionTabs[0];\n        const aboutAvailableRoleDescription = firstAccordionTab.findComponent<typeof AboutAvailableRoleDescription>(AboutAvailableRoleDescription);\n\n        expect(aboutAvailableRoleDescription.props(\"role\")).toStrictEqual<Role>(roles[0]);\n      });\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/about/AboutAvailableRoles/AboutAvailableRoleDescription/AboutAvailableRoleDescription.nuxt.spec.ts": {
      "tests": [
        {
          "id": "17",
          "name": "About Available Role Description Component should render component and match snapshot when mounted."
        },
        {
          "id": "18",
          "name": "About Available Role Description Component Role Image should display role image when rendered."
        },
        {
          "id": "19",
          "name": "About Available Role Description Component Role Image should display role name when rendered."
        },
        {
          "id": "20",
          "name": "About Available Role Description Component Role Image should display role type badge when rendered."
        },
        {
          "id": "21",
          "name": "About Available Role Description Component Role Image should display role origin badge when rendered."
        },
        {
          "id": "22",
          "name": "About Available Role Description Component Role Image should display role description lines when rendered."
        },
        {
          "id": "23",
          "name": "About Available Role Description Component Role Image should not display role description lines when rendered if role description is not set in messages."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport type { AboutAvailableRoleDescriptionProps } from \"~/components/pages/about/AboutAvailableRoles/AboutAvailableRoleDescription/about-available-role-description.types\";\nimport AboutAvailableRoleDescription from \"~/components/pages/about/AboutAvailableRoles/AboutAvailableRoleDescription/AboutAvailableRoleDescription.vue\";\nimport type RoleImage from \"~/components/shared/role/RoleImage/RoleImage.vue\";\nimport type RoleOriginBadge from \"~/components/shared/role/RoleOriginBadge/RoleOriginBadge.vue\";\nimport type RoleTypeBadge from \"~/components/shared/role/RoleTypeBadge/RoleTypeBadge.vue\";\nimport { RoleNames, RoleOrigins, RoleTypes } from \"~/composables/api/role/enums/role.enums\";\nimport type { Role } from \"~/composables/api/role/types/role.types\";\nimport { createFakeRole } from \"~/tests/unit/utils/factories/composables/api/role/role.factory\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"About Available Role Description Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof AboutAvailableRoleDescription>>;\n  const defaultRole: Role = createFakeRole({ name: RoleNames.WEREWOLF, type: RoleTypes.WEREWOLF, origin: RoleOrigins.CLASSIC });\n  const defaultProps: AboutAvailableRoleDescriptionProps = { role: defaultRole };\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(AboutAvailableRoleDescription, { props: defaultProps });\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Role Image\", () => {\n    it(\"should display role image when rendered.\", () => {\n      const roleImage = wrapper.findComponent<typeof RoleImage>(\".available-role-description-role-image\");\n\n      expect(roleImage.props(\"roleName\")).toBe(RoleNames.WEREWOLF);\n    });\n\n    it(\"should display role name when rendered.\", () => {\n      const roleName = wrapper.find<HTMLDivElement>(\".available-role-description-role-name\");\n\n      expect(roleName.text()).toBe(\"shared.role.name.werewolf\");\n    });\n\n    it(\"should display role type badge when rendered.\", () => {\n      const roleTypeBadge = wrapper.findComponent<typeof RoleTypeBadge>(\".available-role-description-role-type-badge\");\n\n      expect(roleTypeBadge.props(\"roleType\")).toBe(RoleTypes.WEREWOLF);\n    });\n\n    it(\"should display role origin badge when rendered.\", () => {\n      const roleOriginBadge = wrapper.findComponent<typeof RoleOriginBadge>(\".available-role-description-role-origin-badge\");\n\n      expect(roleOriginBadge.props(\"roleOrigin\")).toBe(RoleOrigins.CLASSIC);\n    });\n\n    it(\"should display role description lines when rendered.\", () => {\n      const roleDescriptionLines = wrapper.findAll<HTMLParagraphElement>(\".available-role-description-role-description-line\");\n\n      expect(roleDescriptionLines).toHaveLength(4);\n      expect(roleDescriptionLines[0].text()).toBe(\"components.AboutAvailableRoleDescription.descriptions.werewolf.hisGoalIsToKillVillagers\");\n      expect(roleDescriptionLines[1].text()).toBe(\"components.AboutAvailableRoleDescription.descriptions.werewolf.eachNightEatsVillager\");\n      expect(roleDescriptionLines[2].text()).toBe(\"components.AboutAvailableRoleDescription.descriptions.werewolf.numberOfWolvesVaries\");\n      expect(roleDescriptionLines[3].text()).toBe(\"components.AboutAvailableRoleDescription.descriptions.werewolf.werewolvesCantEatEachOther\");\n    });\n\n    it(\"should not display role description lines when rendered if role description is not set in messages.\", async() => {\n      const unknownRole = createFakeRole({ name: \"unknown\" as RoleNames });\n      wrapper = await mountSuspendedComponent(AboutAvailableRoleDescription, { props: { role: unknownRole } });\n      const roleDescriptionLines = wrapper.findAll<HTMLParagraphElement>(\".available-role-description-role-description-line\");\n\n      expect(roleDescriptionLines).toHaveLength(0);\n    });\n  });\n});"
    },
    "tests/unit/specs/components/layouts/default/ParametersMenu/ParametersMenu.nuxt.spec.ts": {
      "tests": [
        {
          "id": "24",
          "name": "Parameters Menu Component should render component and match snapshot when mounted."
        },
        {
          "id": "25",
          "name": "Parameters Menu Component Parameters Menu Button should open the parameters menu when clicked."
        },
        {
          "id": "26",
          "name": "Parameters Menu Component Parameters Menu Button should not open the parameters menu and throw error when clicked if the menu is not found in refs."
        },
        {
          "id": "27",
          "name": "Parameters Menu Component Parameters Menu should pass the correct items to the menu when mounted."
        },
        {
          "id": "28",
          "name": "Parameters Menu Component Parameters Menu should navigate to home page when clicking on back to home button."
        }
      ],
      "source": "import { mockNuxtImport } from \"@nuxt/test-utils/runtime\";\nimport type { mount } from \"@vue/test-utils\";\nimport { MouseEvent } from \"happy-dom\";\nimport Menu from \"primevue/menu\";\nimport type { MenuItem } from \"primevue/menuitem\";\nimport { beforeAll, expect } from \"vitest\";\nimport type { Mock } from \"vitest\";\nimport type { Ref } from \"vue\";\n\nimport type { VuePrimeButton } from \"#components\";\nimport ParametersMenu from \"~/components/layouts/default/NavBar/ParametersMenu/ParametersMenu.vue\";\nimport { createFakeI18n } from \"~/tests/unit/utils/factories/composables/i18n/useI18n.factory\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"Parameters Menu Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof ParametersMenu>>;\n\n  beforeAll(() => {\n    mockNuxtImport<() => ReturnType<typeof createFakeI18n>>(\n      \"useI18n\",\n    () => vi.fn(() => createFakeI18n()),\n    );\n  });\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(ParametersMenu);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Parameters Menu Button\", () => {\n    let toggleMenuMock: Mock;\n\n    beforeEach(async() => {\n      toggleMenuMock = vi.fn();\n      wrapper = await mountSuspendedComponent(ParametersMenu, {\n        global: {\n          stubs: {\n            Menu: {\n              template: \"<div></div>\",\n              methods: { toggle: toggleMenuMock },\n            },\n          },\n        },\n      });\n    });\n\n    it(\"should open the parameters menu when clicked.\", async() => {\n      const parametersMenuButton = wrapper.findComponent<typeof VuePrimeButton>(\"[aria-label='Parameters']\");\n      await parametersMenuButton.trigger(\"click\");\n\n      expect(toggleMenuMock).toHaveBeenCalledExactlyOnceWith(expect.any(MouseEvent));\n    });\n\n    it(\"should not open the parameters menu and throw error when clicked if the menu is not found in refs.\", async() => {\n      wrapper = await mountSuspendedComponent(ParametersMenu, {\n        global: {\n          stubs: {\n            Menu: {\n              template: \"<div></div>\",\n              methods: { toggle: toggleMenuMock },\n            },\n          },\n        },\n      });\n      (wrapper.vm.$root?.$refs.VTU_COMPONENT as { parametersMenu: Ref }).parametersMenu.value = null;\n      const parametersMenuButton = wrapper.findComponent<typeof VuePrimeButton>(\"[aria-label='Parameters']\");\n      await parametersMenuButton.trigger(\"click\");\n\n      expect(toggleMenuMock).not.toHaveBeenCalled();\n      expect(createError).toHaveBeenCalledExactlyOnceWith(\"Parameters Menu is not initialized\");\n    });\n  });\n\n  describe(\"Parameters Menu\", () => {\n    beforeEach(async() => {\n      wrapper = await mountSuspendedComponent(ParametersMenu, { shallow: false });\n      const parametersMenuButton = wrapper.findComponent<typeof VuePrimeButton>(\"[aria-label='Parameters']\");\n      await parametersMenuButton.trigger(\"click\");\n    });\n\n    it(\"should pass the correct items to the menu when mounted.\", () => {\n      const parametersMenu = wrapper.findComponent<typeof Menu>(Menu);\n\n      expect(parametersMenu.props(\"model\")).toStrictEqual<MenuItem[]>([\n        {\n          label: \"components.ParametersMenu.backToHome\",\n          icon: \"fa fa-sign-out\",\n          arialLabel: \"components.ParametersMenu.backToHome\",\n          command: expect.any(Function) as () => Promise<void>,\n        },\n      ]);\n    });\n\n    it(\"should navigate to home page when clicking on back to home button.\", () => {\n      document.querySelector<HTMLElement>(\"[aria-label=\\\"components.ParametersMenu.backToHome\\\"] .p-menuitem-link\")?.click();\n\n      expect(navigateTo).toHaveBeenCalledExactlyOnceWith(\"/\");\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/about/AboutCreator/AboutCreator.nuxt.spec.ts": {
      "tests": [
        {
          "id": "29",
          "name": "About Creator Component should render component and match snapshot when mounted."
        },
        {
          "id": "30",
          "name": "About Creator Component Title should translate title when rendered."
        },
        {
          "id": "31",
          "name": "About Creator Component Sections should translate first section when rendered."
        },
        {
          "id": "32",
          "name": "About Creator Component Sections should translate portfolio button when rendered."
        },
        {
          "id": "33",
          "name": "About Creator Component Sections should translate second section when rendered."
        },
        {
          "id": "34",
          "name": "About Creator Component Sections should translate third section when rendered."
        },
        {
          "id": "35",
          "name": "About Creator Component Sections should translate fourth section when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport AboutCreator from \"~/components/pages/about/AboutCreator.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"About Creator Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof AboutCreator>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(AboutCreator);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Title\", () => {\n    it(\"should translate title when rendered.\", () => {\n      const title = wrapper.find<HTMLHeadElement>(\"#about-creator-title\");\n\n      expect(title.text()).toBe(\"A word from the creator\");\n    });\n  });\n\n  describe(\"Sections\", () => {\n    it(\"should translate first section when rendered.\", () => {\n      const firstSection = wrapper.find<HTMLParagraphElement>(\"#about-creator-first-section\");\n\n      expect(firstSection.text()).toBe(\"I am Antoine ZANARDI, a Full-Stack Web developer and a fan of open source in general. \" +\n      \"If you want to learn more about me, I invite you to explore my portfolio.\");\n    });\n\n    it(\"should translate portfolio button when rendered.\", () => {\n      const portfolioButton = wrapper.find<HTMLAnchorElement>(\"#about-creator-portfolio-button\");\n\n      expect(portfolioButton.text()).toBe(\"My portfolio\");\n    });\n\n    it(\"should translate second section when rendered.\", () => {\n      const secondSection = wrapper.find<HTMLParagraphElement>(\"#about-creator-second-section\");\n\n      expect(secondSection.text()).toBe(\"For me, Werewolves of Miller's Hollow™ game is one of the best games to play with friends or \" +\n      \"family around a table, where alliances and betrayals intertwine, much like in Mario Kart. \" +\n      \"As the game progresses, the true nature of each player is revealed, masks fall, and everyone feels threatened. Each game is a unique adventure, full of unexpected twists.\");\n    });\n\n    it(\"should translate third section when rendered.\", () => {\n      const thirdSection = wrapper.find<HTMLParagraphElement>(\"#about-creator-third-section\");\n\n      expect(thirdSection.text()).toBe(\"As a big fan of the game master role, I've always wanted to share the rewarding feeling of being \" +\n      \"the conductor during a game. So, I created this assistant so that anyone can take on this important role, in any game configuration.\");\n    });\n\n    it(\"should translate fourth section when rendered.\", () => {\n      const fourthSection = wrapper.find<HTMLParagraphElement>(\"#about-creator-forth-section\");\n\n      expect(fourthSection.text()).toBe(\"Your feedback on this assistant is welcome. \" +\n      \"It was created to serve all game masters, whether novice or expert, and make your games memorable. Have fun!\");\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/about/AboutHowToContribute/AboutHowToContribute.nuxt.spec.ts": {
      "tests": [
        {
          "id": "36",
          "name": "About How To Contribute Component should render component and match snapshot when mounted."
        },
        {
          "id": "37",
          "name": "About How To Contribute Component Title should translate title when rendered."
        },
        {
          "id": "38",
          "name": "About How To Contribute Component Sections should translate first section when rendered."
        },
        {
          "id": "39",
          "name": "About How To Contribute Component Sections should translate second section for each bullet item when rendered."
        },
        {
          "id": "40",
          "name": "About How To Contribute Component Sections should translate gitHub text button when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport AboutHowToContribute from \"~/components/pages/about/AboutHowToContribute.vue\";\nimport type GitHubRepositoryButton from \"~/components/shared/external/GitHubRepositoryButton/GitHubRepositoryButton.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"About How To Contribute Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof AboutHowToContribute>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(AboutHowToContribute);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Title\", () => {\n    it(\"should translate title when rendered.\", () => {\n      const title = wrapper.find<HTMLHeadElement>(\"#about-how-to-contribute-title\");\n\n      expect(title.text()).toBe(\"How to contribute to this project?\");\n    });\n  });\n\n  describe(\"Sections\", () => {\n    it(\"should translate first section when rendered.\", () => {\n      const firstSection = wrapper.find<HTMLParagraphElement>(\"#about-how-to-contribute-first-section\");\n\n      expect(firstSection.text()).toBe(\"There are several ways to contribute to this project:\");\n    });\n\n    it(\"should translate second section for each bullet item when rendered.\", () => {\n      const secondSection = wrapper.find<HTMLUListElement>(\"#about-how-to-contribute-second-section\");\n      const secondSectionBulletItems = secondSection.findAll<HTMLLIElement>(\"li\");\n\n      expect(secondSectionBulletItems).toHaveLength(3);\n      expect(secondSectionBulletItems[0].text()).toBe(\"The Werewolf Assistant is an open-source project! Available on GitHub, whether you are a developer, graphic designer, \" +\n      \"or even a tester, your help is welcome. If you like the project, feel free to star it or follow the creator!\");\n      expect(secondSectionBulletItems[1].text()).toBe(\"This project is intended to remain a free service. However, both hosting and tool infrastructure are paid for. \" +\n      \"If you would like to contribute or appreciate the creator's work, you can make a donation on their Buy Me A Coffee page.\");\n      expect(secondSectionBulletItems[2].text()).toBe(\"Talk about this project around you! \" +\n      \"Word of mouth will encourage many role-play enthusiasts to embark on the grand adventure of the game master with the Werewolf Assistant.\");\n    });\n\n    it(\"should translate gitHub text button when rendered.\", () => {\n      const gitHubButton = wrapper.findComponent<typeof GitHubRepositoryButton>(\"#about-how-to-contribute-github-button\");\n\n      expect(gitHubButton.props(\"textButton\")).toBe(\"Access the project on GitHub\");\n    });\n  });\n});"
    },
    "tests/unit/specs/components/shared/role/RoleTypeBadge/RoleTypeBadge.nuxt.spec.ts": {
      "tests": [
        {
          "id": "41",
          "name": "Role Type Badge Component should render component and match snapshot when mounted."
        },
        {
          "id": "42",
          "name": "Role Type Badge Component Badge should have tooltip when mounted."
        },
        {
          "id": "43",
          "name": "Role Type Badge Component Badge should translate role type when mounted."
        },
        {
          "id": "44",
          "name": "Role Type Badge Component Badge 'should have severity of danger when role type is werewolf.'"
        },
        {
          "id": "45",
          "name": "Role Type Badge Component Badge 'should have severity of success when role type is villager.'"
        },
        {
          "id": "46",
          "name": "Role Type Badge Component Badge 'should have severity of warning when role type is ambiguous.'"
        },
        {
          "id": "47",
          "name": "Role Type Badge Component Badge 'should have severity of info when role type is lonely.'"
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport type { ComponentMountingOptions } from \"@vue/test-utils/dist/mount\";\n\nimport type { RoleTypeBadgeProps } from \"~/components/shared/role/RoleTypeBadge/role-type-badge-types\";\nimport RoleTypeBadge from \"~/components/shared/role/RoleTypeBadge/RoleTypeBadge.vue\";\nimport { RoleTypes } from \"~/composables/api/role/enums/role.enums\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"Role Type Badge Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof RoleTypeBadge>>;\n  const defaultProps: RoleTypeBadgeProps = { roleType: RoleTypes.WEREWOLF };\n\n  async function mountRoleTypeBadgeComponent(options: ComponentMountingOptions<typeof RoleTypeBadge> = {}): Promise<ReturnType<typeof mount<typeof RoleTypeBadge>>> {\n    return mountSuspendedComponent(RoleTypeBadge, {\n      props: defaultProps,\n      ...options,\n    });\n  }\n\n  beforeEach(async() => {\n    wrapper = await mountRoleTypeBadgeComponent();\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Badge\", () => {\n    it(\"should have tooltip when mounted.\", () => {\n      const badge = wrapper.findComponent(\"[aria-label='Role Type']\");\n\n      expect(badge.attributes(\"data-pd-tooltip\")).toBe(\"true\");\n    });\n\n    it(\"should translate role type when mounted.\", () => {\n      const badge = wrapper.findComponent(\"[aria-label='Role Type']\");\n\n      expect(badge.attributes(\"value\")).toBe(\"Werewolf\");\n    });\n\n    it.each< {\n      roleType: RoleTypes;\n      expectedSeverity: \"danger\" | \"info\" | \"success\" | \"warning\";\n      test: string;\n    }>([\n      {\n        roleType: RoleTypes.WEREWOLF,\n        expectedSeverity: \"danger\",\n        test: \"should have severity of danger when role type is werewolf.\",\n      },\n      {\n        roleType: RoleTypes.VILLAGER,\n        expectedSeverity: \"success\",\n        test: \"should have severity of success when role type is villager.\",\n      },\n      {\n        roleType: RoleTypes.AMBIGUOUS,\n        expectedSeverity: \"warning\",\n        test: \"should have severity of warning when role type is ambiguous.\",\n      },\n      {\n        roleType: RoleTypes.LONELY,\n        expectedSeverity: \"info\",\n        test: \"should have severity of info when role type is lonely.\",\n      },\n    ])(\"$test\", async({ roleType, expectedSeverity }) => {\n      await wrapper.setProps({ roleType });\n      const badge = wrapper.findComponent(\"[aria-label='Role Type']\");\n\n      expect(badge.attributes(\"severity\")).toBe(expectedSeverity);\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/about/AboutWerewolvesGame/AboutWerewolvesGame.nuxt.spec.ts": {
      "tests": [
        {
          "id": "48",
          "name": "About Werewolves Game Component should render component and match snapshot when mounted."
        },
        {
          "id": "49",
          "name": "About Werewolves Game Component Title should display translated title when rendered."
        },
        {
          "id": "50",
          "name": "About Werewolves Game Component Watch tutorial on Youtube Anchor should have tooltip when rendered."
        },
        {
          "id": "51",
          "name": "About Werewolves Game Component Watch tutorial on Youtube Anchor should have translated button when rendered."
        },
        {
          "id": "52",
          "name": "About Werewolves Game Component Sections should translate first section when rendered."
        },
        {
          "id": "53",
          "name": "About Werewolves Game Component Sections should translate second section when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport AboutWerewolvesGame from \"~/components/pages/about/AboutWerewolvesGame.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"About Werewolves Game Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof AboutWerewolvesGame>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(AboutWerewolvesGame);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Title\", () => {\n    it(\"should display translated title when rendered.\", () => {\n      const title = wrapper.find<HTMLHeadElement>(\"#about-werewolves-game-title\");\n\n      expect(title.text()).toBe(\"The Werewolves of Thiercelieux™ game\");\n    });\n  });\n\n  describe(\"Watch tutorial on Youtube Anchor\", () => {\n    it(\"should have tooltip when rendered.\", () => {\n      const watchTutorialOnYoutubeAnchor = wrapper.find<HTMLAnchorElement>(\"#about-werewolves-game-watch-tutorial-video-on-youtube\");\n\n      expect(watchTutorialOnYoutubeAnchor.attributes(\"data-pd-tooltip\")).toBeTruthy();\n    });\n\n    it(\"should have translated button when rendered.\", () => {\n      const watchTutorialOnYoutubeAnchor = wrapper.find<HTMLAnchorElement>(\"#about-werewolves-game-watch-tutorial-video-on-youtube\");\n\n      expect(watchTutorialOnYoutubeAnchor.text()).toBe(\"I don't know this game\");\n    });\n  });\n\n  describe(\"Sections\", () => {\n    it(\"should translate first section when rendered.\", () => {\n      const firstSection = wrapper.find<HTMLParagraphElement>(\"#about-werewolves-game-first-section\");\n\n      expect(firstSection.text()).toBe(\"The Werewolves of Miller's Hollow™ is a captivating social board game, where each participant takes\" +\n      \" on the role of either a Villager or a Werewolf. Under the guidance of a game master, each session unveils a range of surprises,\" +\n      \" betrayals, twists, and even moments filled with laughter and sometimes tears.\");\n    });\n\n    it(\"should translate second section when rendered.\", () => {\n      const secondSection = wrapper.find<HTMLParagraphElement>(\"#about-werewolves-game-second-section\");\n\n      expect(secondSection.text()).toBe(\"The success of a game relies on the shoulders of the game master, tasked with creating an \" +\n      \"enchanting atmosphere, maintaining a dynamic pace, and mastering the subtleties of the game rules. Managing a sizable group of players, \" +\n      \"lacking experience, or being in a state of distraction make this task a significant challenge.\");\n    });\n  });\n});"
    },
    "tests/unit/specs/components/layouts/default/NavBar.nuxt.spec.ts": {
      "tests": [
        {
          "id": "54",
          "name": "NavBar Component should render component and match snapshot when mounted."
        },
        {
          "id": "55",
          "name": "NavBar Component Home Page Link should have the prop 'to' set to home page when mounted."
        },
        {
          "id": "56",
          "name": "NavBar Component Home Page Link Werewolves Assistant Logo should have the prop 'src' set to the small logo when mounted."
        },
        {
          "id": "57",
          "name": "NavBar Component Home Page Link Werewolves Assistant Logo Text should translate the logo text when mounted."
        },
        {
          "id": "58",
          "name": "NavBar Component Parameters Menu should have left tooltip when mounted."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport type { ComponentMountingOptions } from \"@vue/test-utils/dist/mount\";\n\nimport type { NuxtImg, NuxtLink } from \"#components\";\nimport NavBar from \"~/components/layouts/default/NavBar/NavBar.vue\";\nimport type ParametersMenu from \"~/components/layouts/default/NavBar/ParametersMenu/ParametersMenu.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"NavBar Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof NavBar>>;\n\n  async function mountNavBarComponent(options: ComponentMountingOptions<typeof NavBar> = {}): Promise<ReturnType<typeof mount<typeof NavBar>>> {\n    const defaultMountingOptions: ComponentMountingOptions<typeof NavBar> = { global: { stubs: { ParametersMenu: true } } };\n    return mountSuspendedComponent(NavBar, {\n      ...defaultMountingOptions,\n      ...options,\n    });\n  }\n\n  beforeEach(async() => {\n    wrapper = await mountNavBarComponent();\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Home Page Link\", () => {\n    it(\"should have the prop 'to' set to home page when mounted.\", () => {\n      const homePageLink = wrapper.findComponent<typeof NuxtLink>(\"[aria-label='Home page']\");\n\n      expect(homePageLink.props(\"to\")).toBe(\"/\");\n    });\n\n    describe(\"Werewolves Assistant Logo\", () => {\n      it(\"should have the prop 'src' set to the small logo when mounted.\", async() => {\n        wrapper = await mountNavBarComponent({ shallow: false });\n        const werewolvesAssistantLogo = wrapper.findComponent<typeof NuxtImg>(\"[aria-label='Werewolves Assistant logo']\");\n\n        expect(werewolvesAssistantLogo.attributes(\"src\")).toBe(\"/_ipx/_/img/logo/square/werewolves-logo-small.png\");\n      });\n    });\n\n    describe(\"Werewolves Assistant Logo Text\", () => {\n      it(\"should translate the logo text when mounted.\", async() => {\n        wrapper = await mountNavBarComponent({ shallow: false });\n        const werewolvesAssistantLogoText = wrapper.find(\"[aria-label='Werewolves Assistant']\");\n\n        expect(werewolvesAssistantLogoText.text()).toBe(\"Werewolves Assistant\");\n      });\n    });\n  });\n\n  describe(\"Parameters Menu\", () => {\n    it(\"should have left tooltip when mounted.\", async() => {\n      wrapper = await mountNavBarComponent({ shallow: false });\n      const parametersMenu = wrapper.findComponent<typeof ParametersMenu>(\"[aria-label='Parameters menu']\");\n\n      expect(parametersMenu.attributes(\"data-pd-tooltip\")).toBe(\"true\");\n    });\n  });\n});"
    },
    "tests/unit/specs/components/shared/role/RoleImage/RoleImage.nuxt.spec.ts": {
      "tests": [
        {
          "id": "59",
          "name": "Role Image Component should render component and match snapshot when mounted."
        },
        {
          "id": "60",
          "name": "Role Image Component Image should have default width and height from props sizes when mounted."
        },
        {
          "id": "61",
          "name": "Role Image Component Image should have src based on role name from props when mounted."
        },
        {
          "id": "62",
          "name": "Role Image Component Image should have small suffix for src when definition from props is small."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport type { ComponentMountingOptions } from \"@vue/test-utils/dist/mount\";\n\nimport type { NuxtImg } from \"#components\";\nimport type { RoleImageProps } from \"~/components/shared/role/RoleImage/role-image.types\";\nimport RoleImage from \"~/components/shared/role/RoleImage/RoleImage.vue\";\nimport { RoleNames } from \"~/composables/api/role/enums/role.enums\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\nimport * as UseRoleName from \"~/composables/api/role/useRoleName\";\n\ndescribe(\"Role Image Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof RoleImage>>;\n  const defaultProps: RoleImageProps = { roleName: RoleNames.WEREWOLF };\n\n  async function mountRoleImageComponent(options: ComponentMountingOptions<typeof RoleImage> = {}): Promise<ReturnType<typeof mount<typeof RoleImage>>> {\n    return mountSuspendedComponent(RoleImage, {\n      props: defaultProps,\n      ...options,\n    });\n  }\n\n  beforeEach(async() => {\n    vi.spyOn(UseRoleName, \"useRoleName\").mockReturnValue({ getRoleNameLabel: vi.fn().mockReturnValue(RoleNames.WEREWOLF) });\n    wrapper = await mountRoleImageComponent();\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Image\", () => {\n    it(\"should have default width and height from props sizes when mounted.\", () => {\n      const image = wrapper.findComponent<typeof NuxtImg>(\"[aria-label='werewolf']\");\n\n      expect(image.attributes(\"width\")).toBe(\"50\");\n      expect(image.attributes(\"height\")).toBe(\"50\");\n    });\n\n    it(\"should have src based on role name from props when mounted.\", () => {\n      const image = wrapper.findComponent<typeof NuxtImg>(\"[aria-label='werewolf']\");\n\n      expect(image.attributes(\"src\")).toBe(\"http://127.0.0.1/public/assets/images/roles/werewolf/werewolf.jpeg\");\n    });\n\n    it(\"should have small suffix for src when definition from props is small.\", async() => {\n      await wrapper.setProps({ definition: \"small\" });\n      const image = wrapper.findComponent<typeof NuxtImg>(\"[aria-label='werewolf']\");\n\n      expect(image.attributes(\"src\")).toBe(\"http://127.0.0.1/public/assets/images/roles/werewolf/werewolf-small.jpeg\");\n    });\n  });\n});"
    },
    "tests/unit/specs/pages/index/index.nuxt.spec.ts": {
      "tests": [
        {
          "id": "63",
          "name": "Index Page Component should render component and match snapshot when mounted."
        },
        {
          "id": "64",
          "name": "Index Page Component Title should display translated title when rendered."
        },
        {
          "id": "65",
          "name": "Index Page Component Play button should display play button with translated label when rendered."
        },
        {
          "id": "66",
          "name": "Index Page Component Play button should display play button with pass through data when rendered."
        },
        {
          "id": "67",
          "name": "Index Page Component About button should display about button with translated label when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport type { ButtonPassThroughOptions } from \"primevue/button\";\nimport type { PassThrough } from \"primevue/ts-helpers\";\n\nimport type { NuxtLink, VuePrimeButton } from \"#components\";\nimport Index from \"@/pages/index.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"Index Page Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof Index>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(Index);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Title\", () => {\n    it(\"should display translated title when rendered.\", () => {\n      const title = wrapper.find(\"[aria-label='Werewolves Assistant']\");\n\n      expect(title.text()).toBe(\"Werewolves Assistant\");\n    });\n  });\n\n  describe(\"Play button\", () => {\n    it(\"should display play button with translated label when rendered.\", () => {\n      const playButton = wrapper.findComponent<typeof VuePrimeButton>(\"[label='Play']\");\n\n      expect(playButton.attributes(\"label\")).toBe(\"Play\");\n    });\n\n    it(\"should display play button with pass through data when rendered.\", async() => {\n      wrapper = await mountSuspendedComponent(Index, { shallow: false });\n      const playButton = wrapper.findComponent<typeof VuePrimeButton>(\"[aria-label='Play']\");\n\n      expect(playButton.props(\"pt\")).toStrictEqual<PassThrough<ButtonPassThroughOptions>>({\n        icon: \"fa-2x\",\n        label: \"fs-3 fw-bold text-uppercase\",\n      });\n    });\n  });\n\n  describe(\"About button\", () => {\n    it(\"should display about button with translated label when rendered.\", () => {\n      const aboutButton = wrapper.findComponent<typeof NuxtLink>(\"[aria-label='About']\");\n\n      expect(aboutButton.html()).toContain(\"About\");\n    });\n  });\n});"
    },
    "tests/unit/specs/components/shared/role/RoleOriginBadge/RoleOriginBadge.nuxt.spec.ts": {
      "tests": [
        {
          "id": "68",
          "name": "Role Origin Badge Component should render component and match snapshot when mounted."
        },
        {
          "id": "69",
          "name": "Role Origin Badge Component Badge should have tooltip when mounted."
        },
        {
          "id": "70",
          "name": "Role Origin Badge Component Badge should translate role origin when mounted."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport type { ComponentMountingOptions } from \"@vue/test-utils/dist/mount\";\nimport { expect } from \"vitest\";\n\nimport type { VuePrimeBadge } from \"#components\";\nimport type { RoleOriginBadgeProps } from \"~/components/shared/role/RoleOriginBadge/role-origin-badge.types\";\nimport RoleOriginBadge from \"~/components/shared/role/RoleOriginBadge/RoleOriginBadge.vue\";\nimport { RoleOrigins } from \"~/composables/api/role/enums/role.enums\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"Role Origin Badge Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof RoleOriginBadge>>;\n  const defaultProps: RoleOriginBadgeProps = { roleOrigin: RoleOrigins.CLASSIC };\n\n  async function mountRoleOriginBadgeComponent(options: ComponentMountingOptions<typeof RoleOriginBadge> = {}): Promise<ReturnType<typeof mount<typeof RoleOriginBadge>>> {\n    return mountSuspendedComponent(RoleOriginBadge, {\n      props: defaultProps,\n      ...options,\n    });\n  }\n\n  beforeEach(async() => {\n    wrapper = await mountRoleOriginBadgeComponent();\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Badge\", () => {\n    it(\"should have tooltip when mounted.\", () => {\n      const badge = wrapper.findComponent<typeof VuePrimeBadge>(\"[aria-label='Role Origin']\");\n\n      expect(badge.attributes(\"data-pd-tooltip\")).toBe(\"true\");\n    });\n\n    it(\"should translate role origin when mounted.\", () => {\n      const badge = wrapper.findComponent<typeof VuePrimeBadge>(\"[aria-label='Role Origin']\");\n\n      expect(badge.attributes(\"value\")).toBe(\"Base Game\");\n    });\n  });\n});"
    },
    "tests/unit/specs/stores/useRolesStore.spec.ts": {
      "tests": [
        {
          "id": "71",
          "name": "Roles Store should have initial state when created."
        },
        {
          "id": "72",
          "name": "Roles Store fetchAndSetRoles should fetch roles when called."
        },
        {
          "id": "73",
          "name": "Roles Store fetchAndSetRoles should set roles when called."
        }
      ],
      "source": "import { createPinia, setActivePinia } from \"pinia\";\nimport { expect } from \"vitest\";\nimport type { Mock } from \"vitest\";\nimport { ref } from \"vue\";\n\nimport type { Role } from \"~/composables/api/role/types/role.types\";\nimport { useRolesStore } from \"~/stores/role/useRolesStore\";\nimport * as UseFetchRolesComposable from \"~/composables/api/role/useFetchRoles\";\nimport { createFakeRole } from \"~/tests/unit/utils/factories/composables/api/role/role.factory\";\n\ndescribe(\"Roles Store\", () => {\n  let mockedUseFetchRoles: {\n    fetchRoles: Mock;\n  };\n\n  beforeEach(() => {\n    mockedUseFetchRoles = { fetchRoles: vi.fn().mockResolvedValue({ data: ref([]), status: ref(\"success\") }) };\n    vi.spyOn(UseFetchRolesComposable, \"useFetchRoles\").mockImplementation(() => mockedUseFetchRoles);\n    setActivePinia(createPinia());\n  });\n\n  it(\"should have initial state when created.\", () => {\n    const rolesStore = useRolesStore();\n\n    expect(rolesStore.roles).toBeNull();\n    expect(rolesStore.fetchingRoleStatus).toBe(\"idle\");\n  });\n\n  describe(\"fetchAndSetRoles\", () => {\n    it(\"should fetch roles when called.\", async() => {\n      const rolesStore = useRolesStore();\n      await rolesStore.fetchAndSetRoles();\n\n      expect(mockedUseFetchRoles.fetchRoles).toHaveBeenCalledExactlyOnceWith();\n    });\n\n    it(\"should set roles when called.\", async() => {\n      const roles = [\n        createFakeRole(),\n        createFakeRole(),\n        createFakeRole(),\n      ];\n      mockedUseFetchRoles.fetchRoles.mockResolvedValue({ data: ref(roles), status: ref(\"success\") });\n      const rolesStore = useRolesStore();\n      await rolesStore.fetchAndSetRoles();\n\n      expect(rolesStore.roles).toStrictEqual<Role[]>(roles);\n    });\n  });\n});"
    },
    "tests/unit/specs/components/shared/external/GitHubRepositoryButton/GitHubRepositoryButton.nuxt.spec.ts": {
      "tests": [
        {
          "id": "74",
          "name": "GitHub Repository Button should render component and match snapshot when mounted."
        },
        {
          "id": "75",
          "name": "GitHub Repository Button Button Text should render button text with other text when text is passed as prop."
        },
        {
          "id": "76",
          "name": "GitHub Repository Button Button Text should render button text with default text when text is not passed as prop."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport type { GitHubRepositoryButtonProps } from \"~/components/shared/external/GitHubRepositoryButton/git-hub-repository-button.types\";\nimport GitHubRepositoryButton from \"~/components/shared/external/GitHubRepositoryButton/GitHubRepositoryButton.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"GitHub Repository Button\", () => {\n  let wrapper: ReturnType<typeof mount<typeof GitHubRepositoryButton>>;\n  const defaultProps: GitHubRepositoryButtonProps = { textButton: \"GitHub\" };\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(GitHubRepositoryButton, { props: defaultProps });\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Button Text\", () => {\n    it(\"should render button text with other text when text is passed as prop.\", async() => {\n      wrapper = await mountSuspendedComponent(GitHubRepositoryButton, { props: { textButton: \"Other text\" } });\n      const buttonText = wrapper.find<HTMLAnchorElement>(\"#github-repository-link\");\n\n      expect(buttonText.text()).toBe(\"Other text\");\n    });\n\n    it(\"should render button text with default text when text is not passed as prop.\", async() => {\n      wrapper = await mountSuspendedComponent(GitHubRepositoryButton);\n      const buttonText = wrapper.find<HTMLAnchorElement>(\"#github-repository-link\");\n\n      expect(buttonText.text()).toBe(\"components.GitHubRepositoryButton.thisProjectIsOpenSource\");\n    });\n  });\n});"
    },
    "tests/unit/specs/pages/about/about.nuxt.spec.ts": {
      "tests": [
        {
          "id": "77",
          "name": "About Page Component should render component and match snapshot when mounted."
        },
        {
          "id": "78",
          "name": "About Page Component Title should display role image of werewolf when rendered."
        },
        {
          "id": "79",
          "name": "About Page Component Title should display translated title when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport type RoleImage from \"~/components/shared/role/RoleImage/RoleImage.vue\";\nimport { RoleNames } from \"~/composables/api/role/enums/role.enums\";\nimport About from \"~/pages/about.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"About Page Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof About>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(About);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Title\", () => {\n    it(\"should display role image of werewolf when rendered.\", () => {\n      const roleImage = wrapper.findComponent<typeof RoleImage>(\"#about-role-image-title\");\n\n      expect(roleImage.props(\"roleName\")).toBe(RoleNames.WEREWOLF);\n    });\n\n    it(\"should display translated title when rendered.\", () => {\n      const title = wrapper.find<HTMLHeadElement>(\"#about-title\");\n\n      expect(title.text()).toBe(\"Why an assistant ?\");\n    });\n  });\n});"
    },
    "tests/unit/specs/components/shared/external/BuyMeACoffeeButton/BuyMeACoffeeButton.nuxt.spec.ts": {
      "tests": [
        {
          "id": "80",
          "name": "Buy Me A Coffee Button Component should render component and match snapshot when mounted."
        },
        {
          "id": "81",
          "name": "Buy Me A Coffee Button Component Link image should call link image with correct src when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport BuyMeACoffeeButton from \"~/components/shared/external/BuyMeACoffeeButton/BuyMeACoffeeButton.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"Buy Me A Coffee Button Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof BuyMeACoffeeButton>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(BuyMeACoffeeButton);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Link image\", () => {\n    it(\"should call link image with correct src when rendered.\", () => {\n      const linkImage = wrapper.find<HTMLImageElement>(\"[alt='Buy me a coffee']\");\n      const expectedSrc = \"https://img.buymeacoffee.com/button-api/?\" +\n        \"text=Buy%20me%20a%20coffee&slug=antoinezanardi&button_colour=46a6ff&font_colour=FFFFFF&font_family=Lato&outline_colour=000000&coffee_colour=FFDD00\";\n\n      expect(linkImage.attributes(\"src\")).toBe(expectedSrc);\n    });\n  });\n});"
    },
    "tests/unit/specs/app.nuxt.spec.ts": {
      "tests": [
        {
          "id": "82",
          "name": "App Component should render component and match snapshot when mounted."
        },
        {
          "id": "83",
          "name": "App Component should render component without shallow and match snapshot when mounted."
        },
        {
          "id": "84",
          "name": "App Component should fetch and set roles from store when mounted."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport App from \"@/app.vue\";\nimport { useRolesStore } from \"~/stores/role/useRolesStore\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"App Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof App>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(App);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  it(\"should render component without shallow and match snapshot when mounted.\", async() => {\n    wrapper = await mountSuspendedComponent(App, { shallow: false });\n\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  it(\"should fetch and set roles from store when mounted.\", () => {\n    const rolesStore = useRolesStore();\n    expect(rolesStore.fetchAndSetRoles).toHaveBeenCalledWith();\n  });\n});"
    },
    "tests/unit/specs/components/pages/index/index-footer.nuxt.spec.ts": {
      "tests": [
        {
          "id": "85",
          "name": "Index Page Footer Component should render component and match snapshot when mounted."
        },
        {
          "id": "86",
          "name": "Index Page Footer Component Contact Me Button should render contact me with translated text button when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport IndexFooter from \"~/components/pages/index/IndexFooter.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"Index Page Footer Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof IndexFooter>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(IndexFooter);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Contact Me Button\", () => {\n    it(\"should render contact me with translated text button when rendered.\", () => {\n      const contactMeButton = wrapper.find(\"[aria-label='Contact me']\");\n\n      expect(contactMeButton.text()).toBe(\"Contact me\");\n    });\n  });\n});"
    },
    "tests/unit/specs/composables/api/role/useRoleName.spec.ts": {
      "tests": [
        {
          "id": "87",
          "name": "Use Role Name Composable getRoleLabel should translate role when called with role name."
        }
      ],
      "source": "import { mockNuxtImport } from \"@nuxt/test-utils/runtime\";\n\nimport { RoleNames } from \"~/composables/api/role/enums/role.enums\";\nimport { useRoleName } from \"~/composables/api/role/useRoleName\";\nimport { createFakeI18n } from \"~/tests/unit/utils/factories/composables/i18n/useI18n.factory\";\n\nconst { tMock } = vi.hoisted(() => ({ tMock: vi.fn() }));\n\ndescribe(\"Use Role Name Composable\", () => {\n  beforeEach(() => {\n    mockNuxtImport<() => ReturnType<typeof createFakeI18n>>(\n      \"useI18n\",\n    () => vi.fn(() => createFakeI18n({ t: tMock })),\n    );\n  });\n\n  describe(\"getRoleLabel\", () => {\n    it(\"should translate role when called with role name.\", () => {\n      useRoleName().getRoleNameLabel(RoleNames.WEREWOLF);\n\n      expect(tMock).toHaveBeenCalledExactlyOnceWith(\"shared.role.name.werewolf\");\n    });\n  });\n});"
    },
    "tests/unit/specs/composables/api/role/useFetchRoles.spec.ts": {
      "tests": [
        {
          "id": "88",
          "name": "Use Fetch Roles Composable fetchRoles should fetch roles when called without options."
        },
        {
          "id": "89",
          "name": "Use Fetch Roles Composable fetchRoles should fetch roles when called with options."
        }
      ],
      "source": "import { useFetchRoles } from \"~/composables/api/role/useFetchRoles\";\n\ndescribe(\"Use Fetch Roles Composable\", () => {\n  describe(\"fetchRoles\", () => {\n    it(\"should fetch roles when called without options.\", async() => {\n      await useFetchRoles().fetchRoles();\n\n      expect(useFetch).toHaveBeenCalledExactlyOnceWith(\"http://127.0.0.1/roles\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n      }, \"$dk08ZMi4Ri\");\n    });\n\n    it(\"should fetch roles when called with options.\", async() => {\n      await useFetchRoles().fetchRoles({ method: \"POST\" });\n\n      expect(useFetch).toHaveBeenCalledExactlyOnceWith(\"http://127.0.0.1/roles\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n      }, \"$dk08ZMi4Ri\");\n    });\n  });\n});"
    },
    "tests/unit/specs/modules/i18n.spec.ts": {
      "tests": [
        {
          "id": "90",
          "name": "I18n module Locales should contain all keys set in fr locale when locale is en."
        }
      ],
      "source": "import { crush } from \"radash\";\n\nimport fr from \"~/modules/i18n/locales/fr.json\";\nimport en from \"~/modules/i18n/locales/en.json\";\n\ndescribe(\"I18n module\", () => {\n  describe(\"Locales\", () => {\n    const flatFrLocale = crush(fr);\n    const frKeys = Object.keys(flatFrLocale).toSorted();\n\n    it(\"should contain all keys set in fr locale when locale is en.\", () => {\n      const flatEnLocale = crush(en);\n      const enKeys = Object.keys(flatEnLocale).toSorted();\n\n      expect(frKeys).toStrictEqual<string[]>(enKeys);\n    });\n  });\n});"
    },
    "tests/unit/specs/layouts/default.nuxt.spec.ts": {
      "tests": [
        {
          "id": "91",
          "name": "Default Layout should render component and match snapshot when mounted."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport Default from \"~/layouts/default.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"Default Layout\", () => {\n  let wrapper: ReturnType<typeof mount<typeof Default>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(Default);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n});"
    }
  },
  "projectRoot": "/Users/antoinezanardi/WebstormProjects/werewolves-assistant-web-next",
  "config": {
    "cleanTempDir": "always",
    "incremental": true,
    "incrementalFile": "tests/stryker/incremental.json",
    "checkers": [
      "typescript"
    ],
    "tsconfigFile": "tsconfig.json",
    "testRunner": "vitest",
    "ignoreStatic": true,
    "mutate": [
      "app.vue",
      "components/**/*.{ts,vue}",
      "composables/**/*.ts",
      "pages/**/*.{ts,vue}",
      "layouts/**/*.{ts,vue}",
      "stores/**/*.ts"
    ],
    "plugins": [
      "@stryker-mutator/vitest-runner",
      "@stryker-mutator/typescript-checker",
      "./config/stryker/plugins/stryker-define-props-ignorer-plugin.mjs",
      "./config/stryker/plugins/stryker-define-emits-ignorer-plugin.mjs",
      "./config/stryker/plugins/stryker-define-page-meta-ignorer-plugin.mjs"
    ],
    "ignorers": [
      "defineProps",
      "defineEmits",
      "definePageMeta"
    ],
    "ignorePatterns": [
      ".github/",
      ".husky/",
      ".output/",
      ".run/",
      ".idea/",
      "config/commitlint",
      "config/cucumber",
      "config/eslint",
      "config/lint-staged",
      "config/stryker",
      "scripts/",
      "server/",
      ".editorconfig",
      ".npmrc",
      ".nvmrc",
      ".releaserc.js",
      ".DS_Store",
      ".validate-branch-namerc.json",
      "CHANGELOG.md",
      "LICENSE",
      "pnpm-lock.yaml",
      "sonar-project.properties",
      "README.md"
    ],
    "symlinkNodeModules": false,
    "vitest": {
      "configFile": "config/vitest/vitest.unit-config.ts"
    },
    "reporters": [
      "clear-text",
      "progress",
      "html",
      "json"
    ],
    "htmlReporter": {
      "fileName": "tests/stryker/coverage/index.html"
    },
    "jsonReporter": {
      "fileName": "tests/stryker/coverage/mutation.json"
    },
    "thresholds": {
      "high": 100,
      "low": 100,
      "break": 100
    },
    "disableTypeChecks": true,
    "configFile": "config/stryker/stryker.conf.mjs",
    "allowConsoleColors": true,
    "checkerNodeArgs": [],
    "commandRunner": {
      "command": "npm test"
    },
    "coverageAnalysis": "perTest",
    "clearTextReporter": {
      "allowColor": true,
      "allowEmojis": false,
      "logTests": true,
      "maxTestsToLog": 3,
      "reportTests": true,
      "reportMutants": true,
      "reportScoreTable": true
    },
    "dashboard": {
      "baseUrl": "https://dashboard.stryker-mutator.io/api/reports",
      "reportType": "full"
    },
    "dryRunOnly": false,
    "eventReporter": {
      "baseDir": "reports/mutation/events"
    },
    "force": false,
    "fileLogLevel": "off",
    "inPlace": false,
    "logLevel": "info",
    "maxConcurrentTestRunners": 9007199254740991,
    "maxTestRunnerReuse": 0,
    "mutator": {
      "plugins": null,
      "excludedMutations": []
    },
    "appendPlugins": [],
    "tempDirName": ".stryker-tmp",
    "testRunnerNodeArgs": [],
    "timeoutFactor": 1.5,
    "timeoutMS": 5000,
    "dryRunTimeoutMinutes": 5,
    "warnings": true,
    "disableBail": false,
    "allowEmpty": false,
    "typescriptChecker": {
      "prioritizePerformanceOverAccuracy": true
    }
  },
  "framework": {
    "name": "StrykerJS",
    "version": "8.0.0",
    "branding": {
      "homepageUrl": "https://stryker-mutator.io",
      "imageUrl": "data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"
    },
    "dependencies": {
      "@stryker-mutator/typescript-checker": "8.0.0",
      "typescript": "5.3.3"
    }
  }
}