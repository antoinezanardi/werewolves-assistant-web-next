{
  "files": {
    "components/layouts/default/NavBar/ParametersMenu/ParametersMenu.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "0",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Snapshot `Parameters Menu Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "102"
          ],
          "coveredBy": [
            "102",
            "103",
            "104",
            "105",
            "106"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 38
            },
            "start": {
              "column": 41,
              "line": 29
            }
          }
        },
        {
          "id": "1",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected [ {} ] to strictly equal [ { …(4) } ]",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "105"
          ],
          "coveredBy": [
            "102",
            "103",
            "104",
            "105",
            "106"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 37
            },
            "start": {
              "column": 3,
              "line": 30
            }
          }
        },
        {
          "id": "2",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected [ { label: '', …(3) } ] to strictly equal [ { …(4) } ]",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "105"
          ],
          "coveredBy": [
            "102",
            "103",
            "104",
            "105",
            "106"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 31
            },
            "start": {
              "column": 14,
              "line": 31
            }
          }
        },
        {
          "id": "3",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected [ { …(4) } ] to strictly equal [ { …(4) } ]",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "105"
          ],
          "coveredBy": [
            "102",
            "103",
            "104",
            "105",
            "106"
          ],
          "location": {
            "end": {
              "column": 27,
              "line": 32
            },
            "start": {
              "column": 11,
              "line": 32
            }
          }
        },
        {
          "id": "4",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected [ { …(4) } ] to strictly equal [ { …(4) } ]",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "105"
          ],
          "coveredBy": [
            "102",
            "103",
            "104",
            "105",
            "106"
          ],
          "location": {
            "end": {
              "column": 57,
              "line": 33
            },
            "start": {
              "column": 19,
              "line": 33
            }
          }
        },
        {
          "id": "5",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "106"
          ],
          "coveredBy": [
            "106"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 36
            },
            "start": {
              "column": 26,
              "line": 34
            }
          }
        },
        {
          "id": "6",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  \"/\",\n], but it was called with \"\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "106"
          ],
          "coveredBy": [
            "106"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 35
            },
            "start": {
              "column": 23,
              "line": 35
            }
          }
        },
        {
          "id": "7",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "103"
          ],
          "coveredBy": [
            "103",
            "104",
            "105",
            "106"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 47
            },
            "start": {
              "column": 56,
              "line": 42
            }
          }
        },
        {
          "id": "8",
          "mutatorName": "BooleanLiteral",
          "replacement": "parametersMenu.value",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "103"
          ],
          "coveredBy": [
            "103",
            "104",
            "105",
            "106"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 43
            },
            "start": {
              "column": 7,
              "line": 43
            }
          }
        },
        {
          "id": "9",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "103"
          ],
          "coveredBy": [
            "103",
            "104",
            "105",
            "106"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 43
            },
            "start": {
              "column": 7,
              "line": 43
            }
          }
        },
        {
          "id": "10",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "104"
          ],
          "coveredBy": [
            "103",
            "104",
            "105",
            "106"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 43
            },
            "start": {
              "column": 7,
              "line": 43
            }
          }
        },
        {
          "id": "11",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "104"
          ],
          "coveredBy": [
            "104"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 45
            },
            "start": {
              "column": 30,
              "line": 43
            }
          }
        },
        {
          "id": "12",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  \"Parameters Menu is not initialized\",\n], but it was called with \"\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "104"
          ],
          "coveredBy": [
            "104"
          ],
          "location": {
            "end": {
              "column": 59,
              "line": 44
            },
            "start": {
              "column": 23,
              "line": 44
            }
          }
        }
      ],
      "source": "<template>\n  <div id=\"parameters-menu\">\n    <VuePrimeButton\n      :aria-label=\"$t('components.ParametersMenu.parameters')\"\n      icon=\"fa fa-cog\"\n      severity=\"secondary\"\n      type=\"button\"\n      @click=\"toggleParametersMenu\"\n    />\n\n    <VuePrimeMenu\n      id=\"overlay_menu\"\n      ref=\"parametersMenu\"\n      :aria-label=\"$t('components.ParametersMenu.parametersMenu')\"\n      :model=\"parametersMenuItems\"\n      popup\n    />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport type { MenuItem } from \"primevue/menuitem\";\nimport { ref } from \"vue\";\n\nimport { VuePrimeMenu } from \"#components\";\n\nconst { t } = useI18n();\n\nconst parametersMenuItems: MenuItem[] = [\n  {\n    label: t(\"components.ParametersMenu.backToHome\"),\n    icon: \"fa fa-sign-out\",\n    arialLabel: t(\"components.ParametersMenu.backToHome\"),\n    command: (): void => {\n      void navigateTo(\"/\");\n    },\n  },\n];\n\nconst parametersMenu = ref<InstanceType<typeof VuePrimeMenu> | null>(null);\n\nfunction toggleParametersMenu(event: MouseEvent): void {\n  if (!parametersMenu.value) {\n    throw createError(\"Parameters Menu is not initialized\");\n  }\n  parametersMenu.value.toggle(event);\n}\n</script>"
    },
    "components/pages/about/AboutAvailableRoles/AboutAvailableRoleDescription/AboutAvailableRoleDescription.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "13",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `About Available Role Description Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "94"
          ],
          "coveredBy": [
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 67
            },
            "start": {
              "column": 55,
              "line": 58
            }
          }
        },
        {
          "id": "14",
          "mutatorName": "BooleanLiteral",
          "replacement": "roleDescriptionMessages",
          "statusReason": "Snapshot `About Available Role Description Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "94"
          ],
          "coveredBy": [
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 63
            },
            "start": {
              "column": 7,
              "line": 63
            }
          }
        },
        {
          "id": "15",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `About Available Role Description Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "94"
          ],
          "coveredBy": [
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 63
            },
            "start": {
              "column": 7,
              "line": 63
            }
          }
        },
        {
          "id": "16",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "killedBy": [
            "101"
          ],
          "coveredBy": [
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 63
            },
            "start": {
              "column": 7,
              "line": 63
            }
          }
        },
        {
          "id": "17",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "101"
          ],
          "coveredBy": [
            "101"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 65
            },
            "start": {
              "column": 33,
              "line": 63
            }
          }
        },
        {
          "id": "18",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "expected [ DOMWrapper{ …(2) } ] to have a length of +0 but got 1",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "101"
          ],
          "coveredBy": [
            "101"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 64
            },
            "start": {
              "column": 12,
              "line": 64
            }
          }
        },
        {
          "id": "19",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Snapshot `About Available Role Description Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "94"
          ],
          "coveredBy": [
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101"
          ],
          "location": {
            "end": {
              "column": 142,
              "line": 66
            },
            "start": {
              "column": 51,
              "line": 66
            }
          }
        },
        {
          "id": "20",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Snapshot `About Available Role Description Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "94"
          ],
          "coveredBy": [
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101"
          ],
          "location": {
            "end": {
              "column": 141,
              "line": 66
            },
            "start": {
              "column": 60,
              "line": 66
            }
          }
        },
        {
          "id": "21",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `About Available Role Description Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "94"
          ],
          "coveredBy": [
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 71
            },
            "start": {
              "column": 70,
              "line": 69
            }
          }
        },
        {
          "id": "22",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `About Available Role Description Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "94"
          ],
          "coveredBy": [
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101"
          ],
          "location": {
            "end": {
              "column": 82,
              "line": 70
            },
            "start": {
              "column": 12,
              "line": 70
            }
          }
        },
        {
          "id": "23",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Snapshot `About Available Role Description Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "94"
          ],
          "coveredBy": [
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101"
          ],
          "location": {
            "end": {
              "column": 120,
              "line": 70
            },
            "start": {
              "column": 84,
              "line": 70
            }
          }
        }
      ],
      "source": "<template>\n  <div class=\"d-flex\">\n    <div\n      id=\"role-left-description\"\n      class=\"align-items-center d-flex flex-column justify-content-center\"\n    >\n      <RoleImage\n        :alt=\"getRoleDescriptionLeftImageAlt(role.name)\"\n        class=\"available-role-description-role-image\"\n        :role-name=\"role.name\"\n        sizes=\"150px\"\n      />\n\n      <h2 class=\"available-role-description-role-name mt-3\">\n        {{ getRoleNameLabel(role.name) }}\n      </h2>\n\n      <RoleTypeBadge\n        class=\"available-role-description-role-type-badge mt-3\"\n        :role-type=\"role.type\"\n      />\n\n      <RoleOriginBadge\n        class=\"available-role-description-role-origin-badge mt-3\"\n        :role-origin=\"role.origin\"\n      />\n    </div>\n\n    <div\n      id=\"role-right-description\"\n      class=\"container-fluid d-flex flex-column justify-content-center\"\n    >\n      <p\n        v-for=\"line in roleDescriptionLines\"\n        :key=\"line\"\n        class=\"available-role-description-role-description-line\"\n      >\n        {{ line }}\n      </p>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport type { AboutAvailableRoleDescriptionProps } from \"~/components/pages/about/AboutAvailableRoles/AboutAvailableRoleDescription/about-available-role-description.types\";\nimport RoleImage from \"~/components/shared/role/RoleImage/RoleImage.vue\";\nimport RoleOriginBadge from \"~/components/shared/role/RoleOriginBadge/RoleOriginBadge.vue\";\nimport RoleTypeBadge from \"~/components/shared/role/RoleTypeBadge/RoleTypeBadge.vue\";\nimport type { RoleNames } from \"~/composables/api/role/enums/role.enums\";\nimport { useRoleName } from \"~/composables/api/role/useRoleName\";\n\nconst props = defineProps<AboutAvailableRoleDescriptionProps>();\n\nconst { t, messages, locale } = useI18n();\n\nconst { getRoleNameLabel } = useRoleName();\n\nconst roleDescriptionLines = computed<string[]>(() => {\n  type ComponentsMessages = Record<\"AboutAvailableRoleDescription\", Record<\"descriptions\", Record<RoleNames, Record<string, string>>>>;\n\n  const componentsMessages = messages.value[locale.value].components as ComponentsMessages;\n  const roleDescriptionMessages = componentsMessages.AboutAvailableRoleDescription.descriptions[props.role.name] as Record<string, string> | undefined;\n  if (!roleDescriptionMessages) {\n    return [];\n  }\n  return Object.keys(roleDescriptionMessages).map(key => t(`components.AboutAvailableRoleDescription.descriptions.${props.role.name}.${key}`));\n});\n\nfunction getRoleDescriptionLeftImageAlt(roleName: RoleNames): string {\n  return t(\"components.AboutAvailableRoleDescription.roleDescriptionLeftImageAlt\", { role: getRoleNameLabel(roleName) });\n}\n</script>\n\n<style lang=\"scss\">\n#role-left-description {\n  min-width: 200px;\n}\n</style>"
    },
    "components/pages/about/AboutAvailableRoles/AboutAvailableRoles.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "24",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '' to be 'components.AboutAvailableRoles.assist…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "63"
          ],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 79
            },
            "start": {
              "column": 63,
              "line": 74
            }
          }
        },
        {
          "id": "25",
          "mutatorName": "BooleanLiteral",
          "replacement": "roles.value",
          "statusReason": "Hook timed out in 10000ms.\nIf this is a long-running hook, pass a timeout value as the last argument or configure it globally with \"hookTimeout\".",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "58"
          ],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67"
          ],
          "location": {
            "end": {
              "column": 19,
              "line": 75
            },
            "start": {
              "column": 7,
              "line": 75
            }
          }
        },
        {
          "id": "26",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '' to be 'components.AboutAvailableRoles.assist…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "63"
          ],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67"
          ],
          "location": {
            "end": {
              "column": 19,
              "line": 75
            },
            "start": {
              "column": 7,
              "line": 75
            }
          }
        },
        {
          "id": "27",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Hook timed out in 10000ms.\nIf this is a long-running hook, pass a timeout value as the last argument or configure it globally with \"hookTimeout\".",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "58"
          ],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67"
          ],
          "location": {
            "end": {
              "column": 19,
              "line": 75
            },
            "start": {
              "column": 7,
              "line": 75
            }
          }
        },
        {
          "id": "28",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Hook timed out in 10000ms.\nIf this is a long-running hook, pass a timeout value as the last argument or configure it globally with \"hookTimeout\".",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "58"
          ],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 77
            },
            "start": {
              "column": 21,
              "line": 75
            }
          }
        },
        {
          "id": "29",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected ', 3' to be 'components.AboutAvailableRoles.assist…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "63"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 78
            },
            "start": {
              "column": 12,
              "line": 78
            }
          }
        },
        {
          "id": "30",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected { headerAction: { …(1) } } to strictly equal { Object (headerAction) }",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "65"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 83
            },
            "start": {
              "column": 80,
              "line": 81
            }
          }
        },
        {
          "id": "31",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected { Object (headerAction) } to strictly equal { Object (headerAction) }",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "65"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67"
          ],
          "location": {
            "end": {
              "column": 73,
              "line": 82
            },
            "start": {
              "column": 12,
              "line": 82
            }
          }
        },
        {
          "id": "32",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected { Object (headerAction) } to strictly equal { Object (headerAction) }",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "65"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67"
          ],
          "location": {
            "end": {
              "column": 111,
              "line": 82
            },
            "start": {
              "column": 75,
              "line": 82
            }
          }
        },
        {
          "id": "33",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'components.AboutAvailableRoles.availa…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "66"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 87
            },
            "start": {
              "column": 70,
              "line": 85
            }
          }
        },
        {
          "id": "34",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected ', {\"role\":\"werewolf\"}' to be 'components.AboutAvailableRoles.availa…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "66"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67"
          ],
          "location": {
            "end": {
              "column": 63,
              "line": 86
            },
            "start": {
              "column": 12,
              "line": 86
            }
          }
        },
        {
          "id": "35",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected 'components.AboutAvailableRoles.availa…' to be 'components.AboutAvailableRoles.availa…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "66"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67"
          ],
          "location": {
            "end": {
              "column": 101,
              "line": 86
            },
            "start": {
              "column": 65,
              "line": 86
            }
          }
        }
      ],
      "source": "<template>\n  <div id=\"about-available-roles\">\n    <div class=\"align-items-center d-flex\">\n      <RoleImage\n        id=\"about-available-roles-title-role-image\"\n        :alt=\"$t('components.AboutAvailableRoles.availableRolesImage')\"\n        class=\"me-3\"\n        :role-name=\"RoleNames.ANGEL\"\n        sizes=\"50px\"\n      />\n\n      <h2 id=\"about-available-roles-title\">\n        {{ $t('components.AboutAvailableRoles.availableRoles') }}\n      </h2>\n    </div>\n\n    <hr>\n\n    <div\n      v-if=\"!roles\"\n      id=\"loading-roles-container\"\n      class=\"align-items-center d-flex flex-column justify-content-center\"\n    >\n      <VuePrimeProgressSpinner :aria-label=\"$t('components.AboutAvailableRoles.loadingRoles')\"/>\n\n      <small>{{ $t(\"components.AboutAvailableRoles.loadingRoles\") }}</small>\n    </div>\n\n    <div v-else>\n      <p id=\"about-available-roles-first-section\">\n        {{ availableRolesText }}\n      </p>\n\n      <VuePrimeAccordion>\n        <VuePrimeAccordionTab\n          v-for=\"role in roles\"\n          :key=\"role.name\"\n          :pt=\"{ 'headerAction': { 'aria-label': getAvailableRoleAccordionHeaderAriaLabel(role.name) } }\"\n        >\n          <template #header>\n            <div class=\"align-items-center available-role-image-header d-flex\">\n              <RoleImage\n                :alt=\"getAvailableRoleHeaderImageAlt(role.name)\"\n                :role-name=\"role.name\"\n                sizes=\"40px\"\n              />\n\n              <div class=\"ms-2\">\n                {{ getRoleNameLabel(role.name) }}\n              </div>\n            </div>\n          </template>\n\n          <AboutAvailableRoleDescription :role=\"role\"/>\n        </VuePrimeAccordionTab>\n      </VuePrimeAccordion>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { storeToRefs } from \"pinia\";\n\nimport AboutAvailableRoleDescription from \"~/components/pages/about/AboutAvailableRoles/AboutAvailableRoleDescription/AboutAvailableRoleDescription.vue\";\nimport RoleImage from \"~/components/shared/role/RoleImage/RoleImage.vue\";\nimport { RoleNames } from \"~/composables/api/role/enums/role.enums\";\nimport { useRoleName } from \"~/composables/api/role/useRoleName\";\nimport { useRolesStore } from \"~/stores/role/useRolesStore\";\n\nconst { t } = useI18n();\nconst { getRoleNameLabel } = useRoleName();\nconst { roles } = storeToRefs(useRolesStore());\n\nconst availableRolesText = computed<string | undefined>(() => {\n  if (!roles.value) {\n    return undefined;\n  }\n  return t(\"components.AboutAvailableRoles.assistantHasManyRoles\", roles.value.length);\n});\n\nfunction getAvailableRoleAccordionHeaderAriaLabel(roleName: RoleNames): string {\n  return t(\"components.AboutAvailableRoles.clickToExpandRoleDescription\", { role: getRoleNameLabel(roleName) });\n}\n\nfunction getAvailableRoleHeaderImageAlt(roleName: RoleNames): string {\n  return t(\"components.AboutAvailableRoles.availableRoleImage\", { role: getRoleNameLabel(roleName) });\n}\n</script>"
    },
    "components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "36",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Snapshot `Game Lobby Random Composition Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "38"
          ],
          "coveredBy": [
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 61,
              "line": 37
            },
            "start": {
              "column": 56,
              "line": 37
            }
          }
        },
        {
          "id": "37",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `Game Lobby Random Composition Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "38"
          ],
          "coveredBy": [
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 44
            },
            "start": {
              "column": 61,
              "line": 39
            }
          }
        },
        {
          "id": "38",
          "mutatorName": "BooleanLiteral",
          "replacement": "isMinimumPlayersReached.value",
          "statusReason": "Snapshot `Game Lobby Random Composition Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "38"
          ],
          "coveredBy": [
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 40
            },
            "start": {
              "column": 7,
              "line": 40
            }
          }
        },
        {
          "id": "39",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'components.GameLobbyRandomComposition…' to be undefined",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "40"
          ],
          "coveredBy": [
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 40
            },
            "start": {
              "column": 7,
              "line": 40
            }
          }
        },
        {
          "id": "40",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `Game Lobby Random Composition Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "38"
          ],
          "coveredBy": [
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 40
            },
            "start": {
              "column": 7,
              "line": 40
            }
          }
        },
        {
          "id": "41",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `Game Lobby Random Composition Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "38"
          ],
          "coveredBy": [
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 42
            },
            "start": {
              "column": 39,
              "line": 40
            }
          }
        },
        {
          "id": "42",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Game Lobby Random Composition Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "38"
          ],
          "coveredBy": [
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 80,
              "line": 41
            },
            "start": {
              "column": 14,
              "line": 41
            }
          }
        },
        {
          "id": "43",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected \"spy\" to be called with arguments: [ { players: [ …(4) ] } ]\n\nReceived: \n\n\n\nNumber of calls: 0\n",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "43"
          ],
          "coveredBy": [
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 53
            },
            "start": {
              "column": 68,
              "line": 46
            }
          }
        },
        {
          "id": "44",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "expect(received).toBeTrue()\n\nExpected value to be true:\n  true\nReceived:\n  false",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "46"
          ],
          "coveredBy": [
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 47
            },
            "start": {
              "column": 45,
              "line": 47
            }
          }
        },
        {
          "id": "45",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected \"spy\" to be called with arguments: [ { players: [ …(4) ] } ]\n\nReceived: \n\n  1st spy call:\n\n  Array [\n-   Object {\n-     \"players\": Array [\n-       _CreateGamePlayerDto {\n-         \"group\": undefined,\n-         \"name\": \"Player 1\",\n-         \"role\": CreateGamePlayerRoleDto {\n-           \"name\": undefined,\n-         },\n-         \"side\": CreateGamePlayerSideDto {\n-           \"current\": undefined,\n-           \"original\": undefined,\n-         },\n-       },\n-       _CreateGamePlayerDto {\n-         \"group\": undefined,\n-         \"name\": \"Player 2\",\n-         \"role\": CreateGamePlayerRoleDto {\n-           \"name\": undefined,\n-         },\n-         \"side\": CreateGamePlayerSideDto {\n-           \"current\": undefined,\n-           \"original\": undefined,\n-         },\n-       },\n-       _CreateGamePlayerDto {\n-         \"group\": undefined,\n-         \"name\": \"Player 3\",\n-         \"role\": CreateGamePlayerRoleDto {\n-           \"name\": undefined,\n-         },\n-         \"side\": CreateGamePlayerSideDto {\n-           \"current\": undefined,\n-           \"original\": undefined,\n-         },\n-       },\n-       _CreateGamePlayerDto {\n-         \"group\": undefined,\n-         \"name\": \"Player 4\",\n-         \"role\": CreateGamePlayerRoleDto {\n-           \"name\": undefined,\n-         },\n-         \"side\": CreateGamePlayerSideDto {\n-           \"current\": undefined,\n-           \"original\": undefined,\n-         },\n-       },\n-     ],\n-   },\n+   Object {},\n  ]\n\n\nNumber of calls: 1\n",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "43"
          ],
          "coveredBy": [
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 106,
              "line": 48
            },
            "start": {
              "column": 66,
              "line": 48
            }
          }
        },
        {
          "id": "46",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected \"spy\" to not be called at all, but actually been called 1 times\n\nReceived: \n\n  1st spy call:\n\n    Array [\n      null,\n    ]\n\n\nNumber of calls: 1\n",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "45"
          ],
          "coveredBy": [
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 49
            },
            "start": {
              "column": 7,
              "line": 49
            }
          }
        },
        {
          "id": "47",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "44"
          ],
          "coveredBy": [
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 49
            },
            "start": {
              "column": 7,
              "line": 49
            }
          }
        },
        {
          "id": "48",
          "mutatorName": "EqualityOperator",
          "replacement": "randomGameComposition === null",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "44"
          ],
          "coveredBy": [
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 49
            },
            "start": {
              "column": 7,
              "line": 49
            }
          }
        },
        {
          "id": "49",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "44"
          ],
          "coveredBy": [
            "43",
            "44",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 51
            },
            "start": {
              "column": 39,
              "line": 49
            }
          }
        },
        {
          "id": "50",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected 'true' to be 'false' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": [
            "47"
          ],
          "coveredBy": [
            "43",
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 52
            },
            "start": {
              "column": 45,
              "line": 52
            }
          }
        }
      ],
      "source": "<template>\n  <div\n    id=\"game-lobby-random-composition-button-container\"\n    v-p-tooltip.top=\"containerTooltip\"\n  >\n    <VuePrimeButton\n      class=\"random-composition-button\"\n      :disabled=\"!isMinimumPlayersReached\"\n      icon=\"fa-random fa\"\n      :label=\"$t('components.GameLobbyRandomCompositionButton.randomComposition')\"\n      :loading=\"isLoadingGetRandomGameComposition\"\n      raised\n      severity=\"secondary\"\n      size=\"large\"\n      type=\"button\"\n      @click=\"handleRandomCompositionButtonClick\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { storeToRefs } from \"pinia\";\n\nimport { useCreateGameDtoValidation } from \"~/composables/api/game/useCreateGameDtoValidation\";\nimport { useFetchRandomGameComposition } from \"~/composables/api/game/useFetchRandomGameComposition\";\nimport { useCreateGameDtoStore } from \"~/stores/game/create-game-dto/useCreateGameDtoStore\";\n\nconst { fetchRandomGameComposition } = useFetchRandomGameComposition();\n\nconst { t } = useI18n();\n\nconst createGameDtoStore = useCreateGameDtoStore();\nconst { createGameDto } = storeToRefs(createGameDtoStore);\nconst { setPlayersToCreateGameDto } = createGameDtoStore;\nconst { isMinimumPlayersReached } = useCreateGameDtoValidation(createGameDto);\n\nconst isLoadingGetRandomGameComposition = ref<boolean>(false);\n\nconst containerTooltip = computed<string | undefined>(() => {\n  if (!isMinimumPlayersReached.value) {\n    return t(\"components.GameLobbyRandomCompositionButton.minPlayersNotReached\");\n  }\n  return undefined;\n});\n\nasync function handleRandomCompositionButtonClick(): Promise<void> {\n  isLoadingGetRandomGameComposition.value = true;\n  const randomGameComposition = await fetchRandomGameComposition({ players: createGameDto.value.players });\n  if (randomGameComposition !== null) {\n    setPlayersToCreateGameDto(randomGameComposition);\n  }\n  isLoadingGetRandomGameComposition.value = false;\n}\n</script>"
    },
    "components/pages/game-lobby/GameLobbyFooter/GameLobbyStartGameButton/GameLobbyStartGameButton.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "51",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Snapshot `Game Lobby Start Game Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "48"
          ],
          "coveredBy": [
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 38
            },
            "start": {
              "column": 42,
              "line": 38
            }
          }
        },
        {
          "id": "52",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Snapshot `Game Lobby Start Game Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "48"
          ],
          "coveredBy": [
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 98,
              "line": 40
            },
            "start": {
              "column": 55,
              "line": 40
            }
          }
        },
        {
          "id": "53",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "53"
          ],
          "coveredBy": [
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 49
            },
            "start": {
              "column": 60,
              "line": 42
            }
          }
        },
        {
          "id": "54",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "expect(received).toBeTrue()\n\nExpected value to be true:\n  true\nReceived:\n  false",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "56"
          ],
          "coveredBy": [
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 35,
              "line": 43
            },
            "start": {
              "column": 31,
              "line": 43
            }
          }
        },
        {
          "id": "55",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected \"spy\" to not be called at all, but actually been called 1 times\n\nReceived: \n\n  1st spy call:\n\n    Array [\n      Object {\n        \"summary\": \"components.GameLobbyStartGameButton.gameCreated\",\n      },\n    ]\n\n\nNumber of calls: 1\n",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "55"
          ],
          "coveredBy": [
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 45
            },
            "start": {
              "column": 7,
              "line": 45
            }
          }
        },
        {
          "id": "56",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "54"
          ],
          "coveredBy": [
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 45
            },
            "start": {
              "column": 7,
              "line": 45
            }
          }
        },
        {
          "id": "57",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "54"
          ],
          "coveredBy": [
            "54"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 47
            },
            "start": {
              "column": 20,
              "line": 45
            }
          }
        },
        {
          "id": "58",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  Object {\n    \"summary\": \"components.GameLobbyStartGameButton.gameCreated\",\n  },\n], but it was called with Object {}",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "54"
          ],
          "coveredBy": [
            "54"
          ],
          "location": {
            "end": {
              "column": 86,
              "line": 46
            },
            "start": {
              "column": 21,
              "line": 46
            }
          }
        },
        {
          "id": "59",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  Object {\n    \"summary\": \"components.GameLobbyStartGameButton.gameCreated\",\n  },\n], but it was called with Object {\n  \"summary\": \"\",\n}",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "54"
          ],
          "coveredBy": [
            "54"
          ],
          "location": {
            "end": {
              "column": 83,
              "line": 46
            },
            "start": {
              "column": 34,
              "line": 46
            }
          }
        },
        {
          "id": "60",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected 'true' to be 'false' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": [
            "57"
          ],
          "coveredBy": [
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 36,
              "line": 48
            },
            "start": {
              "column": 31,
              "line": 48
            }
          }
        }
      ],
      "source": "<template>\n  <div\n    id=\"game-lobby-start-game-button-container\"\n    v-p-tooltip.top=\"containerTooltip\"\n  >\n    <VuePrimeButton\n      class=\"start-game-button\"\n      :disabled=\"!canCreateGame\"\n      icon=\"fa-play fa\"\n      :label=\"$t('components.GameLobbyStartGameButton.startGame')\"\n      :loading=\"isLoadingCreateGame\"\n      raised\n      size=\"large\"\n      type=\"button\"\n      @click=\"handleStartGameButtonClick\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { storeToRefs } from \"pinia\";\n\nimport { useCreateGameDtoValidation } from \"~/composables/api/game/useCreateGameDtoValidation\";\nimport { useFetchGames } from \"~/composables/api/game/useFetchGames\";\nimport { useVuePrimeToasts } from \"~/composables/vue-prime/useVuePrimeToasts\";\nimport { useCreateGameDtoStore } from \"~/stores/game/create-game-dto/useCreateGameDtoStore\";\n\nconst { t } = useI18n();\n\nconst { addSuccessToast } = useVuePrimeToasts();\n\nconst { createGame } = useFetchGames();\n\nconst createGameDtoStore = useCreateGameDtoStore();\nconst { createGameDto } = storeToRefs(createGameDtoStore);\nconst { canCreateGame, gameCreationValidationErrors } = useCreateGameDtoValidation(createGameDto);\n\nconst isLoadingCreateGame = ref<boolean>(false);\n\nconst containerTooltip = computed<string | undefined>(() => gameCreationValidationErrors.value[0]);\n\nasync function handleStartGameButtonClick(): Promise<void> {\n  isLoadingCreateGame.value = true;\n  const createdGame = await createGame(createGameDto.value);\n  if (createdGame) {\n    addSuccessToast({ summary: t(\"components.GameLobbyStartGameButton.gameCreated\") });\n  }\n  isLoadingCreateGame.value = false;\n}\n</script>"
    },
    "components/pages/game-lobby/GameLobbyHeader/GameLobbyHeader.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "61",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Snapshot `Game Lobby Header Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "68"
          ],
          "coveredBy": [
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 35
            },
            "start": {
              "column": 38,
              "line": 35
            }
          }
        },
        {
          "id": "62",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "72"
          ],
          "coveredBy": [
            "72",
            "73",
            "74",
            "75",
            "76",
            "77"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 57
            },
            "start": {
              "column": 43,
              "line": 39
            }
          }
        },
        {
          "id": "63",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": [
            "76"
          ],
          "coveredBy": [
            "72",
            "73",
            "74",
            "75",
            "76",
            "77"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 40
            },
            "start": {
              "column": 7,
              "line": 40
            }
          }
        },
        {
          "id": "64",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "72"
          ],
          "coveredBy": [
            "72",
            "73",
            "74",
            "75",
            "76",
            "77"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 40
            },
            "start": {
              "column": 7,
              "line": 40
            }
          }
        },
        {
          "id": "65",
          "mutatorName": "EqualityOperator",
          "replacement": "gameLobbyPlayerInput.value !== null",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "72"
          ],
          "coveredBy": [
            "72",
            "73",
            "74",
            "75",
            "76",
            "77"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 40
            },
            "start": {
              "column": 7,
              "line": 40
            }
          }
        },
        {
          "id": "66",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "72"
          ],
          "coveredBy": [
            "72"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 42
            },
            "start": {
              "column": 44,
              "line": 40
            }
          }
        },
        {
          "id": "67",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  \"Game Lobby Player Input is not initialized\",\n], but it was called with \"\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "72"
          ],
          "coveredBy": [
            "72"
          ],
          "location": {
            "end": {
              "column": 67,
              "line": 41
            },
            "start": {
              "column": 23,
              "line": 41
            }
          }
        },
        {
          "id": "68",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "76"
          ],
          "coveredBy": [
            "73",
            "74",
            "75",
            "76",
            "77"
          ],
          "location": {
            "end": {
              "column": 53,
              "line": 43
            },
            "start": {
              "column": 7,
              "line": 43
            }
          }
        },
        {
          "id": "69",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '' to be 'Player 1' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "73"
          ],
          "coveredBy": [
            "73",
            "74",
            "75",
            "76",
            "77"
          ],
          "location": {
            "end": {
              "column": 53,
              "line": 43
            },
            "start": {
              "column": 7,
              "line": 43
            }
          }
        },
        {
          "id": "70",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '' to be 'Player 1' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "73"
          ],
          "coveredBy": [
            "73",
            "74"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 45
            },
            "start": {
              "column": 55,
              "line": 43
            }
          }
        },
        {
          "id": "71",
          "mutatorName": "MethodExpression",
          "replacement": "playerInputValue.value",
          "statusReason": "expected \"spy\" to not be called at all, but actually been called 1 times\n\nReceived: \n\n  1st spy call:\n\n    Array [\n      _CreateGamePlayerDto {\n        \"group\": undefined,\n        \"name\": \"   \",\n        \"role\": CreateGamePlayerRoleDto {\n          \"name\": undefined,\n        },\n        \"side\": CreateGamePlayerSideDto {\n          \"current\": undefined,\n          \"original\": undefined,\n        },\n      },\n    ]\n\n\nNumber of calls: 1\n",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "75"
          ],
          "coveredBy": [
            "75",
            "76",
            "77"
          ],
          "location": {
            "end": {
              "column": 64,
              "line": 46
            },
            "start": {
              "column": 35,
              "line": 46
            }
          }
        },
        {
          "id": "72",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "expected 'Stryker was here!' to be '' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "77"
          ],
          "coveredBy": [
            "75",
            "76",
            "77"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 47
            },
            "start": {
              "column": 28,
              "line": 47
            }
          }
        },
        {
          "id": "73",
          "mutatorName": "BooleanLiteral",
          "replacement": "trimmedPlayerInputValue",
          "statusReason": "expected \"spy\" to not be called at all, but actually been called 1 times\n\nReceived: \n\n  1st spy call:\n\n    Array [\n      _CreateGamePlayerDto {\n        \"group\": undefined,\n        \"name\": \"\",\n        \"role\": CreateGamePlayerRoleDto {\n          \"name\": undefined,\n        },\n        \"side\": CreateGamePlayerSideDto {\n          \"current\": undefined,\n          \"original\": undefined,\n        },\n      },\n    ]\n\n\nNumber of calls: 1\n",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "75"
          ],
          "coveredBy": [
            "75",
            "76",
            "77"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 48
            },
            "start": {
              "column": 7,
              "line": 48
            }
          }
        },
        {
          "id": "74",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "76"
          ],
          "coveredBy": [
            "75",
            "76",
            "77"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 48
            },
            "start": {
              "column": 7,
              "line": 48
            }
          }
        },
        {
          "id": "75",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected \"spy\" to not be called at all, but actually been called 1 times\n\nReceived: \n\n  1st spy call:\n\n    Array [\n      _CreateGamePlayerDto {\n        \"group\": undefined,\n        \"name\": \"\",\n        \"role\": CreateGamePlayerRoleDto {\n          \"name\": undefined,\n        },\n        \"side\": CreateGamePlayerSideDto {\n          \"current\": undefined,\n          \"original\": undefined,\n        },\n      },\n    ]\n\n\nNumber of calls: 1\n",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "75"
          ],
          "coveredBy": [
            "75",
            "76",
            "77"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 48
            },
            "start": {
              "column": 7,
              "line": 48
            }
          }
        },
        {
          "id": "76",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected \"spy\" to not be called at all, but actually been called 1 times\n\nReceived: \n\n  1st spy call:\n\n    Array [\n      _CreateGamePlayerDto {\n        \"group\": undefined,\n        \"name\": \"\",\n        \"role\": CreateGamePlayerRoleDto {\n          \"name\": undefined,\n        },\n        \"side\": CreateGamePlayerSideDto {\n          \"current\": undefined,\n          \"original\": undefined,\n        },\n      },\n    ]\n\n\nNumber of calls: 1\n",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "75"
          ],
          "coveredBy": [
            "75"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 50
            },
            "start": {
              "column": 33,
              "line": 48
            }
          }
        },
        {
          "id": "77",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  _CreateGamePlayerDto {\n    \"group\": undefined,\n    \"name\": \"Player 1\",\n    \"role\": CreateGamePlayerRoleDto {\n      \"name\": undefined,\n    },\n    \"side\": CreateGamePlayerSideDto {\n      \"current\": undefined,\n      \"original\": undefined,\n    },\n  },\n], but it was called with _CreateGamePlayerDto {\n  \"group\": undefined,\n  \"name\": undefined,\n  \"role\": undefined,\n  \"side\": undefined,\n}",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "76"
          ],
          "coveredBy": [
            "76",
            "77"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 55
            },
            "start": {
              "column": 71,
              "line": 51
            }
          }
        }
      ],
      "source": "<template>\n  <div id=\"game-lobby-header\">\n    <h1\n      id=\"game-lobby-header-title\"\n      class=\"d-flex justify-content-center my-1\"\n    >\n      {{ $t(\"components.GameLobbyHeader.gameLobby\") }}\n    </h1>\n\n    <div class=\"d-flex justify-content-center row\">\n      <div class=\"col-lg-6\">\n        <form\n          id=\"game-lobby-header-form\"\n          @submit.prevent=\"addPlayerToCreateGameDto\"\n        >\n          <GameLobbyPlayerInput\n            id=\"game-lobby-player-input\"\n            ref=\"gameLobbyPlayerInput\"\n            v-model=\"playerInputValue\"\n          />\n        </form>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport type { GameLobbyPlayerInputExposed } from \"~/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/game-lobby-player-input.types\";\nimport GameLobbyPlayerInput from \"~/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.vue\";\nimport { CreateGamePlayerDto } from \"~/composables/api/game/dto/create-game/create-game-player/create-game-player.dto\";\nimport { useCreateGameDtoStore } from \"~/stores/game/create-game-dto/useCreateGameDtoStore\";\n\nconst createGameDtoStore = useCreateGameDtoStore();\n\nconst playerInputValue = ref<string>(\"\");\n\nconst gameLobbyPlayerInput = ref<GameLobbyPlayerInputExposed | null>(null);\n\nfunction addPlayerToCreateGameDto(): void {\n  if (gameLobbyPlayerInput.value === null) {\n    throw createError(\"Game Lobby Player Input is not initialized\");\n  }\n  if (gameLobbyPlayerInput.value.isAddButtonDisabled) {\n    return;\n  }\n  const trimmedPlayerInputValue = playerInputValue.value.trim();\n  playerInputValue.value = \"\";\n  if (!trimmedPlayerInputValue) {\n    return;\n  }\n  const playerToAdd: CreateGamePlayerDto = CreateGamePlayerDto.create({\n    name: trimmedPlayerInputValue,\n    role: {},\n    side: {},\n  });\n  createGameDtoStore.addPlayerToCreateGameDto(playerToAdd);\n}\n</script>"
    },
    "components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "78",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "We can't mutate defineModel macro as it is stated here: https://github.com/stryker-mutator/stryker-js/issues/3305.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 58,
              "line": 66
            },
            "start": {
              "column": 40,
              "line": 66
            }
          }
        },
        {
          "id": "79",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "We can't mutate defineModel macro as it is stated here: https://github.com/stryker-mutator/stryker-js/issues/3305.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 56,
              "line": 66
            },
            "start": {
              "column": 52,
              "line": 66
            }
          }
        },
        {
          "id": "80",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expect(received).toBeTrue()\n\nExpected value to be true:\n  true\nReceived:\n  false",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "26"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 139,
              "line": 68
            },
            "start": {
              "column": 53,
              "line": 68
            }
          }
        },
        {
          "id": "81",
          "mutatorName": "MethodExpression",
          "replacement": "createGameDto.value.players.every(({\n  name\n}) => name === inputValue.value.trim())",
          "statusReason": "Snapshot `Game Lobby Player Input Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 139,
              "line": 68
            },
            "start": {
              "column": 59,
              "line": 68
            }
          }
        },
        {
          "id": "82",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expect(received).toBeTrue()\n\nExpected value to be true:\n  true\nReceived:\n  false",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "26"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 138,
              "line": 68
            },
            "start": {
              "column": 92,
              "line": 68
            }
          }
        },
        {
          "id": "83",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'true' to be 'false' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "32"
          ],
          "coveredBy": [
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "34",
            "35"
          ],
          "location": {
            "end": {
              "column": 138,
              "line": 68
            },
            "start": {
              "column": 106,
              "line": 68
            }
          }
        },
        {
          "id": "84",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expect(received).toBeTrue()\n\nExpected value to be true:\n  true\nReceived:\n  false",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "26"
          ],
          "coveredBy": [
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "34",
            "35"
          ],
          "location": {
            "end": {
              "column": 138,
              "line": 68
            },
            "start": {
              "column": 106,
              "line": 68
            }
          }
        },
        {
          "id": "85",
          "mutatorName": "EqualityOperator",
          "replacement": "name !== inputValue.value.trim()",
          "statusReason": "expected 'true' to be 'false' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "32"
          ],
          "coveredBy": [
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "34",
            "35"
          ],
          "location": {
            "end": {
              "column": 138,
              "line": 68
            },
            "start": {
              "column": 106,
              "line": 68
            }
          }
        },
        {
          "id": "86",
          "mutatorName": "MethodExpression",
          "replacement": "inputValue.value",
          "statusReason": "expect(received).toBeTrue()\n\nExpected value to be true:\n  true\nReceived:\n  false",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "26"
          ],
          "coveredBy": [
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "34",
            "35"
          ],
          "location": {
            "end": {
              "column": 138,
              "line": 68
            },
            "start": {
              "column": 115,
              "line": 68
            }
          }
        },
        {
          "id": "87",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected 'components.GameLobbyPlayerInput.pleas…' to be 'components.GameLobbyPlayerInput.playe…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 14,
          "static": false,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 119,
              "line": 70
            },
            "start": {
              "column": 57,
              "line": 70
            }
          }
        },
        {
          "id": "88",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `Game Lobby Player Input Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 119,
              "line": 70
            },
            "start": {
              "column": 63,
              "line": 70
            }
          }
        },
        {
          "id": "89",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'components.GameLobbyPlayerInput.pleas…' to be 'components.GameLobbyPlayerInput.playe…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 14,
          "static": false,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 119,
              "line": 70
            },
            "start": {
              "column": 63,
              "line": 70
            }
          }
        },
        {
          "id": "90",
          "mutatorName": "EqualityOperator",
          "replacement": "inputValue.value.trim().length > MAX_PLAYER_NAME_LENGTH",
          "statusReason": "expected 'components.GameLobbyPlayerInput.pleas…' to be 'components.GameLobbyPlayerInput.playe…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 14,
          "static": false,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 119,
              "line": 70
            },
            "start": {
              "column": 63,
              "line": 70
            }
          }
        },
        {
          "id": "91",
          "mutatorName": "EqualityOperator",
          "replacement": "inputValue.value.trim().length < MAX_PLAYER_NAME_LENGTH",
          "statusReason": "Snapshot `Game Lobby Player Input Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 119,
              "line": 70
            },
            "start": {
              "column": 63,
              "line": 70
            }
          }
        },
        {
          "id": "92",
          "mutatorName": "MethodExpression",
          "replacement": "inputValue.value",
          "statusReason": "expected 'components.GameLobbyPlayerInput.playe…' to be 'components.GameLobbyPlayerInput.pleas…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 15,
          "static": false,
          "killedBy": [
            "37"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 86,
              "line": 70
            },
            "start": {
              "column": 63,
              "line": 70
            }
          }
        },
        {
          "id": "93",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Snapshot `Game Lobby Player Input Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 113,
              "line": 72
            },
            "start": {
              "column": 50,
              "line": 72
            }
          }
        },
        {
          "id": "94",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `Game Lobby Player Input Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 113,
              "line": 72
            },
            "start": {
              "column": 56,
              "line": 72
            }
          }
        },
        {
          "id": "95",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'false' to be 'true' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "25"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 113,
              "line": 72
            },
            "start": {
              "column": 56,
              "line": 72
            }
          }
        },
        {
          "id": "96",
          "mutatorName": "EqualityOperator",
          "replacement": "createGameDto.value.players.length > MAX_PLAYERS_IN_GAME",
          "statusReason": "expected 'false' to be 'true' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "25"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 113,
              "line": 72
            },
            "start": {
              "column": 56,
              "line": 72
            }
          }
        },
        {
          "id": "97",
          "mutatorName": "EqualityOperator",
          "replacement": "createGameDto.value.players.length < MAX_PLAYERS_IN_GAME",
          "statusReason": "Snapshot `Game Lobby Player Input Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 113,
              "line": 72
            },
            "start": {
              "column": 56,
              "line": 72
            }
          }
        },
        {
          "id": "98",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Snapshot `Game Lobby Player Input Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 77,
              "line": 74
            },
            "start": {
              "column": 43,
              "line": 74
            }
          }
        },
        {
          "id": "99",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Snapshot `Game Lobby Player Input Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 109,
              "line": 76
            },
            "start": {
              "column": 47,
              "line": 76
            }
          }
        },
        {
          "id": "100",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `Game Lobby Player Input Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 109,
              "line": 76
            },
            "start": {
              "column": 53,
              "line": 76
            }
          }
        },
        {
          "id": "101",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'false' to be 'true' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "29"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 109,
              "line": 76
            },
            "start": {
              "column": 53,
              "line": 76
            }
          }
        },
        {
          "id": "102",
          "mutatorName": "LogicalOperator",
          "replacement": "doesPlayerNameExistInGame.value && isInputDisabled.value",
          "statusReason": "expected 'false' to be 'true' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "29"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 109,
              "line": 76
            },
            "start": {
              "column": 53,
              "line": 76
            }
          }
        },
        {
          "id": "103",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `Game Lobby Player Input Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 89
            },
            "start": {
              "column": 56,
              "line": 78
            }
          }
        },
        {
          "id": "104",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `Game Lobby Player Input Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 35,
              "line": 79
            },
            "start": {
              "column": 7,
              "line": 79
            }
          }
        },
        {
          "id": "105",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'components.GameLobbyPlayerInput.pleas…' to be 'components.GameLobbyPlayerInput.maxPl…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 12,
          "static": false,
          "killedBy": [
            "34"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 35,
              "line": 79
            },
            "start": {
              "column": 7,
              "line": 79
            }
          }
        },
        {
          "id": "106",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'components.GameLobbyPlayerInput.pleas…' to be 'components.GameLobbyPlayerInput.maxPl…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "34"
          ],
          "coveredBy": [
            "25",
            "29",
            "34"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 81
            },
            "start": {
              "column": 37,
              "line": 79
            }
          }
        },
        {
          "id": "107",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'components.GameLobbyPlayerInput.maxPl…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "34"
          ],
          "coveredBy": [
            "25",
            "29",
            "34"
          ],
          "location": {
            "end": {
              "column": 65,
              "line": 80
            },
            "start": {
              "column": 14,
              "line": 80
            }
          }
        },
        {
          "id": "108",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `Game Lobby Player Input Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 38,
              "line": 82
            },
            "start": {
              "column": 7,
              "line": 82
            }
          }
        },
        {
          "id": "109",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'components.GameLobbyPlayerInput.pleas…' to be 'components.GameLobbyPlayerInput.playe…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 13,
          "static": false,
          "killedBy": [
            "35"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 38,
              "line": 82
            },
            "start": {
              "column": 7,
              "line": 82
            }
          }
        },
        {
          "id": "110",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'components.GameLobbyPlayerInput.pleas…' to be 'components.GameLobbyPlayerInput.playe…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "35"
          ],
          "coveredBy": [
            "26",
            "30",
            "31",
            "35"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 84
            },
            "start": {
              "column": 40,
              "line": 82
            }
          }
        },
        {
          "id": "111",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'components.GameLobbyPlayerInput.playe…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "35"
          ],
          "coveredBy": [
            "26",
            "30",
            "31",
            "35"
          ],
          "location": {
            "end": {
              "column": 72,
              "line": 83
            },
            "start": {
              "column": 14,
              "line": 83
            }
          }
        },
        {
          "id": "112",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `Game Lobby Player Input Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 85
            },
            "start": {
              "column": 7,
              "line": 85
            }
          }
        },
        {
          "id": "113",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'components.GameLobbyPlayerInput.pleas…' to be 'components.GameLobbyPlayerInput.playe…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 14,
          "static": false,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 85
            },
            "start": {
              "column": 7,
              "line": 85
            }
          }
        },
        {
          "id": "114",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'components.GameLobbyPlayerInput.pleas…' to be 'components.GameLobbyPlayerInput.playe…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "36"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 87
            },
            "start": {
              "column": 44,
              "line": 85
            }
          }
        },
        {
          "id": "115",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'components.GameLobbyPlayerInput.playe…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "36"
          ],
          "location": {
            "end": {
              "column": 74,
              "line": 86
            },
            "start": {
              "column": 14,
              "line": 86
            }
          }
        },
        {
          "id": "116",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Game Lobby Player Input Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37"
          ],
          "location": {
            "end": {
              "column": 67,
              "line": 88
            },
            "start": {
              "column": 12,
              "line": 88
            }
          }
        },
        {
          "id": "117",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "The macro defineExpose from Nuxt is breaking Stryker, so we ignore it.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 91
            },
            "start": {
              "column": 14,
              "line": 91
            }
          }
        }
      ],
      "source": "<template>\n  <div id=\"game-lobby-player-input\">\n    <VuePrimeInputGroup\n      id=\"game-lobby-player-input-group\"\n      class=\"mt-3\"\n    >\n      <span class=\"p-float-label\">\n        <VuePrimeInputText\n          id=\"player-name-input\"\n          v-model=\"inputValue\"\n          aria-labelledby=\"player-name-input-help\"\n          :class=\"{ 'p-invalid': doesPlayerNameExistInGame }\"\n          :disabled=\"isInputDisabled\"\n          :maxlength=\"MAX_PLAYER_NAME_LENGTH\"\n          size=\"large\"\n          type=\"text\"\n        />\n\n        <label for=\"player-name-input\">\n          {{ $t(\"components.GameLobbyPlayerInput.playerName\") }}\n        </label>\n      </span>\n\n      <VuePrimeButton\n        id=\"add-player-button\"\n        :disabled=\"isAddButtonDisabled\"\n        severity=\"primary\"\n        type=\"submit\"\n      >\n        <i class=\"fa fa-plus me-2\"/>\n\n        <span>\n          {{ $t(\"shared.actions.add\") }}\n        </span>\n      </VuePrimeButton>\n    </VuePrimeInputGroup>\n\n    <transition\n      mode=\"out-in\"\n      name=\"fade\"\n    >\n      <small\n        id=\"player-name-input-help\"\n        :key=\"playerNameInputHelpText\"\n      >\n        {{ playerNameInputHelpText }}\n      </small>\n    </transition>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { storeToRefs } from \"pinia\";\nimport { computed, defineModel } from \"vue\";\n\nimport { MAX_PLAYERS_IN_GAME } from \"~/composables/api/game/constants/game.constants\";\nimport { MAX_PLAYER_NAME_LENGTH } from \"~/composables/api/game/constants/player/player.constants\";\nimport { useCreateGameDtoStore } from \"~/stores/game/create-game-dto/useCreateGameDtoStore\";\n\nconst { t } = useI18n();\n\nconst createGameDtoStore = useCreateGameDtoStore();\n\nconst { createGameDto } = storeToRefs(createGameDtoStore);\n\nconst inputValue = defineModel<string>({ required: true });\n\nconst doesPlayerNameExistInGame = computed<boolean>(() => createGameDto.value.players.some(({ name }) => name === inputValue.value.trim()));\n\nconst hasPlayerNameReachedMaxLength = computed<boolean>(() => inputValue.value.trim().length >= MAX_PLAYER_NAME_LENGTH);\n\nconst doesGameHaveMaxPlayers = computed<boolean>(() => createGameDto.value.players.length >= MAX_PLAYERS_IN_GAME);\n\nconst isInputDisabled = computed<boolean>(() => doesGameHaveMaxPlayers.value);\n\nconst isAddButtonDisabled = computed<boolean>(() => doesPlayerNameExistInGame.value || isInputDisabled.value);\n\nconst playerNameInputHelpText = computed<string>(() => {\n  if (doesGameHaveMaxPlayers.value) {\n    return t(\"components.GameLobbyPlayerInput.maxPlayersReached\");\n  }\n  if (doesPlayerNameExistInGame.value) {\n    return t(\"components.GameLobbyPlayerInput.playerNameIsAlreadyTaken\");\n  }\n  if (hasPlayerNameReachedMaxLength.value) {\n    return t(\"components.GameLobbyPlayerInput.playerNameMaxLengthReached\");\n  }\n  return t(\"components.GameLobbyPlayerInput.pleaseEnterPlayerName\");\n});\n\ndefineExpose({ isAddButtonDisabled });\n</script>"
    },
    "components/pages/game-lobby/GameLobbyPlayersParty/GameLobbyPlayerCard/GameLobbyPlayerCard.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "118",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '' to be 'components.GameLobbyPlayerCard.roleNo…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "110"
          ],
          "coveredBy": [
            "107",
            "108",
            "109",
            "110",
            "111"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 45
            },
            "start": {
              "column": 51,
              "line": 40
            }
          }
        },
        {
          "id": "119",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `Game Lobby Player Card Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "107"
          ],
          "coveredBy": [
            "107",
            "108",
            "109",
            "110",
            "111"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "120",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '' to be 'components.GameLobbyPlayerCard.roleNo…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "110"
          ],
          "coveredBy": [
            "107",
            "108",
            "109",
            "110",
            "111"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "121",
          "mutatorName": "EqualityOperator",
          "replacement": "props.player.role.name !== undefined",
          "statusReason": "Snapshot `Game Lobby Player Card Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "107"
          ],
          "coveredBy": [
            "107",
            "108",
            "109",
            "110",
            "111"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "122",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '' to be 'components.GameLobbyPlayerCard.roleNo…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "110"
          ],
          "coveredBy": [
            "110"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 43
            },
            "start": {
              "column": 45,
              "line": 41
            }
          }
        },
        {
          "id": "123",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'components.GameLobbyPlayerCard.roleNo…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "110"
          ],
          "coveredBy": [
            "110"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 42
            },
            "start": {
              "column": 14,
              "line": 42
            }
          }
        },
        {
          "id": "124",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "109"
          ],
          "coveredBy": [
            "109"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 49
            },
            "start": {
              "column": 48,
              "line": 47
            }
          }
        }
      ],
      "source": "<template>\n  <div class=\"align-items-center d-flex flex-column game-lobby-player-card mb-4 p-1\">\n    <VuePrimeButton\n      v-p-tooltip=\"$t('components.GameLobbyPlayerCard.removePlayer', { 'playerName': player.name })\"\n      :aria-label=\"$t('components.GameLobbyPlayerCard.removePlayer', { 'playerName': player.name })\"\n      class=\"mb-1 player-card-delete-button\"\n      icon=\"fa-minus fa fa-2x\"\n      raised\n      severity=\"danger\"\n      size=\"small\"\n      type=\"button\"\n      @click.prevent=\"removePlayerFromCreateGameDto\"\n    />\n\n    <PlayerCard\n      :player-name=\"player.name\"\n      :player-role=\"player.role.name\"\n    />\n\n    <small class=\"player-card-role text-truncate\">\n      {{ playerCardRoleText }}\n    </small>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport type { GameLobbyPlayerCardProps } from \"~/components/pages/game-lobby/GameLobbyPlayersParty/GameLobbyPlayerCard/game-lobby-player-card.types\";\nimport PlayerCard from \"~/components/shared/game/player/PlayerCard/PlayerCard.vue\";\nimport { useRoleName } from \"~/composables/api/role/useRoleName\";\nimport { useCreateGameDtoStore } from \"~/stores/game/create-game-dto/useCreateGameDtoStore\";\n\nconst props = defineProps<GameLobbyPlayerCardProps>();\n\nconst { getRoleNameLabel } = useRoleName();\n\nconst { t } = useI18n();\n\nconst createGameDtoStore = useCreateGameDtoStore();\n\nconst playerCardRoleText = computed<string>(() => {\n  if (props.player.role.name === undefined) {\n    return t(\"components.GameLobbyPlayerCard.roleNotSelected\");\n  }\n  return getRoleNameLabel(props.player.role.name);\n});\n\nfunction removePlayerFromCreateGameDto(): void {\n  createGameDtoStore.removePlayerFromCreateGameDto(props.player.name);\n}\n</script>\n\n<style lang=\"scss\" scoped>\n  .game-lobby-player-card {\n    .player-card-delete-button {\n      max-height: 10px;\n      width: 10px;\n      font-size: .5rem;\n    }\n  }\n</style>"
    },
    "components/shared/external/BuyMeACoffeeButton/BuyMeACoffeeButton.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "125",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "190"
          ],
          "coveredBy": [
            "190",
            "191"
          ],
          "location": {
            "end": {
              "column": 58,
              "line": 18
            },
            "start": {
              "column": 17,
              "line": 18
            }
          }
        },
        {
          "id": "126",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "190"
          ],
          "coveredBy": [
            "190",
            "191"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 27
            },
            "start": {
              "column": 38,
              "line": 19
            }
          }
        },
        {
          "id": "127",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "190"
          ],
          "coveredBy": [
            "190",
            "191"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 20
            },
            "start": {
              "column": 9,
              "line": 20
            }
          }
        },
        {
          "id": "128",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "190"
          ],
          "coveredBy": [
            "190",
            "191"
          ],
          "location": {
            "end": {
              "column": 25,
              "line": 21
            },
            "start": {
              "column": 9,
              "line": 21
            }
          }
        },
        {
          "id": "129",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "190"
          ],
          "coveredBy": [
            "190",
            "191"
          ],
          "location": {
            "end": {
              "column": 25,
              "line": 22
            },
            "start": {
              "column": 17,
              "line": 22
            }
          }
        },
        {
          "id": "130",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "190"
          ],
          "coveredBy": [
            "190",
            "191"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 23
            },
            "start": {
              "column": 15,
              "line": 23
            }
          }
        },
        {
          "id": "131",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "190"
          ],
          "coveredBy": [
            "190",
            "191"
          ],
          "location": {
            "end": {
              "column": 21,
              "line": 24
            },
            "start": {
              "column": 15,
              "line": 24
            }
          }
        },
        {
          "id": "132",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "190"
          ],
          "coveredBy": [
            "190",
            "191"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 25
            },
            "start": {
              "column": 18,
              "line": 25
            }
          }
        },
        {
          "id": "133",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "190"
          ],
          "coveredBy": [
            "190",
            "191"
          ],
          "location": {
            "end": {
              "column": 25,
              "line": 26
            },
            "start": {
              "column": 17,
              "line": 26
            }
          }
        },
        {
          "id": "134",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Snapshot `Buy Me A Coffee Button Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "190"
          ],
          "coveredBy": [
            "190",
            "191"
          ],
          "location": {
            "end": {
              "column": 55,
              "line": 28
            },
            "start": {
              "column": 13,
              "line": 28
            }
          }
        }
      ],
      "source": "<template>\n  <a\n    href=\"https://www.buymeacoffee.com/antoinezanardi\"\n    rel=\"noopener noreferrer\"\n    target=\"_blank\"\n  >\n    <img\n      alt=\"Buy me a coffee\"\n      :src=\"src\"\n    >\n  </a>\n</template>\n\n<script setup lang=\"ts\">\nimport { stringify } from \"qs\";\nimport { objectToSnake } from \"ts-case-convert\";\n\nconst baseUri = \"https://img.buymeacoffee.com/button-api\";\nconst urlQueryParams = objectToSnake({\n  text: \"Buy me a coffee\",\n  slug: \"antoinezanardi\",\n  buttonColour: \"46a6ff\",\n  fontColour: \"FFFFFF\",\n  fontFamily: \"Lato\",\n  outlineColour: \"000000\",\n  coffeeColour: \"FFDD00\",\n});\nconst src = `${baseUri}/?${stringify(urlQueryParams)}`;\n</script>"
    },
    "components/shared/external/GitHubRepositoryButton/GitHubRepositoryButton.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "135",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `App Component > should render component without shallow and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "193"
          ],
          "coveredBy": [
            "179",
            "180",
            "181",
            "193"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 29
            },
            "start": {
              "column": 43,
              "line": 24
            }
          }
        },
        {
          "id": "136",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '' to be 'components.GitHubRepositoryButton.thi…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "181"
          ],
          "coveredBy": [
            "179",
            "180",
            "181",
            "193"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 25
            },
            "start": {
              "column": 7,
              "line": 25
            }
          }
        },
        {
          "id": "137",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `GitHub Repository Button > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "179"
          ],
          "coveredBy": [
            "179",
            "180",
            "181",
            "193"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 25
            },
            "start": {
              "column": 7,
              "line": 25
            }
          }
        },
        {
          "id": "138",
          "mutatorName": "EqualityOperator",
          "replacement": "props.textButton === undefined",
          "statusReason": "Snapshot `App Component > should render component without shallow and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "193"
          ],
          "coveredBy": [
            "179",
            "180",
            "181",
            "193"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 25
            },
            "start": {
              "column": 7,
              "line": 25
            }
          }
        },
        {
          "id": "139",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `GitHub Repository Button > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "179"
          ],
          "coveredBy": [
            "179",
            "180",
            "181"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 27
            },
            "start": {
              "column": 39,
              "line": 25
            }
          }
        },
        {
          "id": "140",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'components.GitHubRepositoryButton.thi…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "181"
          ],
          "coveredBy": [
            "181",
            "193"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 28
            },
            "start": {
              "column": 12,
              "line": 28
            }
          }
        }
      ],
      "source": "<template>\n  <a\n    id=\"github-repository-link\"\n    class=\"p-button primary\"\n    href=\"https://www.github.com/antoinezanardi/werewolves-assistant-web-next\"\n    rel=\"noopener noreferrer\"\n    target=\"_blank\"\n  >\n    <span class=\"fa-github fab me-2\"/>\n\n    <span>\n      {{ textButton }}\n    </span>\n  </a>\n</template>\n\n<script lang=\"ts\" setup>\nimport type { GitHubRepositoryButtonProps } from \"~/components/shared/external/GitHubRepositoryButton/git-hub-repository-button.types\";\n\nconst props = defineProps<GitHubRepositoryButtonProps>();\n\nconst { t } = useI18n();\n\nconst textButton = computed<string>(() => {\n  if (props.textButton !== undefined) {\n    return props.textButton;\n  }\n  return t(\"components.GitHubRepositoryButton.thisProjectIsOpenSource\");\n});\n</script>"
    },
    "components/shared/game/player/PlayerCard/PlayerCard.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "141",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "We can't mutate defineProps macro as it is stated here: https://github.com/stryker-mutator/stryker-js/issues/3305.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 94,
              "line": 27
            },
            "start": {
              "column": 60,
              "line": 27
            }
          }
        },
        {
          "id": "142",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "We can't mutate defineProps macro as it is stated here: https://github.com/stryker-mutator/stryker-js/issues/3305.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 92,
              "line": 27
            },
            "start": {
              "column": 87,
              "line": 27
            }
          }
        },
        {
          "id": "143",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected undefined to be 'Select Player' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "120"
          ],
          "coveredBy": [
            "117",
            "118",
            "119",
            "120",
            "121",
            "122"
          ],
          "location": {
            "end": {
              "column": 128,
              "line": 33
            },
            "start": {
              "column": 53,
              "line": 33
            }
          }
        },
        {
          "id": "144",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `Player Card Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "117"
          ],
          "coveredBy": [
            "117",
            "118",
            "119",
            "120",
            "121",
            "122"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 37
            },
            "start": {
              "column": 46,
              "line": 35
            }
          }
        },
        {
          "id": "145",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Player Card Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "117"
          ],
          "coveredBy": [
            "117",
            "118",
            "119",
            "120",
            "121",
            "122"
          ],
          "location": {
            "end": {
              "column": 58,
              "line": 36
            },
            "start": {
              "column": 12,
              "line": 36
            }
          }
        },
        {
          "id": "146",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Snapshot `Player Card Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "117"
          ],
          "coveredBy": [
            "117",
            "118",
            "119",
            "120",
            "121",
            "122"
          ],
          "location": {
            "end": {
              "column": 92,
              "line": 36
            },
            "start": {
              "column": 60,
              "line": 36
            }
          }
        },
        {
          "id": "147",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Target cannot be null or undefined.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "119"
          ],
          "coveredBy": [
            "119"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 41
            },
            "start": {
              "column": 51,
              "line": 39
            }
          }
        },
        {
          "id": "148",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Target cannot be null or undefined.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "119"
          ],
          "coveredBy": [
            "119"
          ],
          "location": {
            "end": {
              "column": 33,
              "line": 40
            },
            "start": {
              "column": 8,
              "line": 40
            }
          }
        }
      ],
      "source": "<template>\n  <div class=\"align-items-center d-flex flex-column player-card position-relative\">\n    <button\n      v-p-tooltip=\"tooltipContent\"\n      :aria-label=\"selectorAriaLabel\"\n      class=\"d-flex player-card-selector\"\n      type=\"button\"\n      @click.prevent=\"emitPlayerCardSelectorClickEvent\"\n    >\n      <RoleImage\n        :alt=\"getPlayerCardRoleImageAlt()\"\n        class=\"player-card-role-image\"\n        :role-name=\"playerRole\"\n      />\n    </button>\n\n    <span class=\"player-card-name text-truncate\">\n      {{ playerName }}\n    </span>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport type { PlayerCardEmits, PlayerCardProps } from \"~/components/shared/game/player/PlayerCard/player-card.types\";\nimport RoleImage from \"~/components/shared/role/RoleImage/RoleImage.vue\";\n\nconst props = withDefaults(defineProps<PlayerCardProps>(), { doesShowSelectorTooltip: false });\n\nconst emit = defineEmits<PlayerCardEmits>();\n\nconst { t } = useI18n();\n\nconst tooltipContent = computed<string | undefined>(() => (props.doesShowSelectorTooltip ? props.selectorAriaLabel : undefined));\n\nfunction getPlayerCardRoleImageAlt(): string {\n  return t(\"components.PlayerCard.playerCardRoleImageAlt\", { playerName: props.playerName });\n}\n\nfunction emitPlayerCardSelectorClickEvent(): void {\n  emit(\"playerCardSelectorClick\");\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.player-card-selector {\n  border: 3px solid #232323;\n  border-radius: 10%;\n  background-color: transparent;\n  cursor: pointer;\n  padding: 0;\n  transition: border-color 0.2s;\n\n  &:hover {\n    border-color: #747474;\n  }\n}\n\n.player-card-name {\n  max-width: 100%;\n}\n</style>"
    },
    "components/shared/role/RoleImage/RoleImage.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "149",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "We can't mutate defineProps macro as it is stated here: https://github.com/stryker-mutator/stryker-js/issues/3305.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 19
            },
            "start": {
              "column": 59,
              "line": 16
            }
          }
        },
        {
          "id": "150",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "We can't mutate defineProps macro as it is stated here: https://github.com/stryker-mutator/stryker-js/issues/3305.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 17
            },
            "start": {
              "column": 10,
              "line": 17
            }
          }
        },
        {
          "id": "151",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "We can't mutate defineProps macro as it is stated here: https://github.com/stryker-mutator/stryker-js/issues/3305.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 23,
              "line": 18
            },
            "start": {
              "column": 15,
              "line": 18
            }
          }
        },
        {
          "id": "152",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be '/img/role/back.jpeg' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 9,
          "static": false,
          "killedBy": [
            "137"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67",
            "135",
            "136",
            "137",
            "138",
            "139",
            "172"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 23
            },
            "start": {
              "column": 22,
              "line": 23
            }
          }
        },
        {
          "id": "153",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Hook timed out in 10000ms.\nIf this is a long-running hook, pass a timeout value as the last argument or configure it globally with \"hookTimeout\".",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "63"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67",
            "135",
            "136",
            "137",
            "138",
            "139",
            "172"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 34
            },
            "start": {
              "column": 45,
              "line": 25
            }
          }
        },
        {
          "id": "154",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `Role Image Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "135"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67",
            "135",
            "136",
            "137",
            "138",
            "139",
            "172"
          ],
          "location": {
            "end": {
              "column": 35,
              "line": 26
            },
            "start": {
              "column": 7,
              "line": 26
            }
          }
        },
        {
          "id": "155",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'http://127.0.0.1/public/assets/images…' to be '/img/role/back.jpeg' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "killedBy": [
            "137"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67",
            "135",
            "136",
            "137",
            "138",
            "139",
            "172"
          ],
          "location": {
            "end": {
              "column": 35,
              "line": 26
            },
            "start": {
              "column": 7,
              "line": 26
            }
          }
        },
        {
          "id": "156",
          "mutatorName": "EqualityOperator",
          "replacement": "props.roleName !== undefined",
          "statusReason": "Snapshot `Role Image Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "135"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67",
            "135",
            "136",
            "137",
            "138",
            "139",
            "172"
          ],
          "location": {
            "end": {
              "column": 35,
              "line": 26
            },
            "start": {
              "column": 7,
              "line": 26
            }
          }
        },
        {
          "id": "157",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'http://127.0.0.1/public/assets/images…' to be '/img/role/back.jpeg' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "137"
          ],
          "coveredBy": [
            "137"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 28
            },
            "start": {
              "column": 37,
              "line": 26
            }
          }
        },
        {
          "id": "158",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'http://127.0.0.1/public/assets/images…' to be 'http://127.0.0.1/public/assets/images…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": [
            "139"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67",
            "135",
            "136",
            "137",
            "138",
            "139",
            "172"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 31
            },
            "start": {
              "column": 23,
              "line": 31
            }
          }
        },
        {
          "id": "159",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `Role Image Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "135"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67",
            "135",
            "136",
            "137",
            "138",
            "139",
            "172"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 31
            },
            "start": {
              "column": 23,
              "line": 31
            }
          }
        },
        {
          "id": "160",
          "mutatorName": "EqualityOperator",
          "replacement": "props.definition !== \"normal\"",
          "statusReason": "Snapshot `Role Image Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "135"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67",
            "135",
            "136",
            "137",
            "138",
            "139",
            "172"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 31
            },
            "start": {
              "column": 23,
              "line": 31
            }
          }
        },
        {
          "id": "161",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Role Image Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "135"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67",
            "135",
            "136",
            "137",
            "138",
            "139",
            "172"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 31
            },
            "start": {
              "column": 44,
              "line": 31
            }
          }
        },
        {
          "id": "162",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Snapshot `Role Image Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "135"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67",
            "135",
            "136",
            "137",
            "138",
            "139"
          ],
          "location": {
            "end": {
              "column": 57,
              "line": 31
            },
            "start": {
              "column": 55,
              "line": 31
            }
          }
        },
        {
          "id": "163",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected 'http://127.0.0.1/public/assets/images…' to be 'http://127.0.0.1/public/assets/images…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "139"
          ],
          "coveredBy": [
            "139",
            "172"
          ],
          "location": {
            "end": {
              "column": 82,
              "line": 31
            },
            "start": {
              "column": 60,
              "line": 31
            }
          }
        },
        {
          "id": "164",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Snapshot `Role Image Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "135"
          ],
          "coveredBy": [
            "63",
            "64",
            "65",
            "66",
            "67",
            "135",
            "136",
            "137",
            "138",
            "139",
            "172"
          ],
          "location": {
            "end": {
              "column": 107,
              "line": 33
            },
            "start": {
              "column": 10,
              "line": 33
            }
          }
        }
      ],
      "source": "<template>\n  <NuxtImg\n    :alt=\"alt\"\n    class=\"role-image\"\n    :height=\"sizes\"\n    placeholder=\"svg/infinite-spinner.svg\"\n    :src=\"roleImageSrc\"\n    :width=\"sizes\"\n  />\n</template>\n\n<script setup lang=\"ts\">\nimport type { RoleImageProps } from \"~/components/shared/role/RoleImage/role-image.types\";\nimport { removeTrailingSlashes } from \"~/utils/url.utils\";\n\nconst props = withDefaults(defineProps<RoleImageProps>(), {\n  sizes: \"50\",\n  definition: \"normal\",\n});\n\nconst runtimeConfig = useRuntimeConfig();\n\nconst backImageSrc = \"/img/role/back.jpeg\";\n\nconst roleImageSrc = computed<string>(() => {\n  if (props.roleName === undefined) {\n    return backImageSrc;\n  }\n\n  const apiBaseUrl = removeTrailingSlashes(runtimeConfig.public.werewolvesAssistantApi.baseUrl);\n  const imageSuffix = props.definition === \"normal\" ? \"\" : `-${props.definition}`;\n\n  return `${apiBaseUrl}/public/assets/images/roles/${props.roleName}/${props.roleName}${imageSuffix}.jpeg`;\n});\n</script>\n\n<style lang=\"scss\" scoped>\n.role-image {\n  border-radius: 10%;\n  border: 3px solid #1c1c1c;\n}\n</style>"
    },
    "components/shared/role/RoleTypeBadge/RoleTypeBadge.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "165",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Hook timed out in 10000ms.\nIf this is a long-running hook, pass a timeout value as the last argument or configure it globally with \"hookTimeout\".",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "140"
          ],
          "coveredBy": [
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 29
            },
            "start": {
              "column": 60,
              "line": 20
            }
          }
        },
        {
          "id": "166",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Hook timed out in 10000ms.\nIf this is a long-running hook, pass a timeout value as the last argument or configure it globally with \"hookTimeout\".",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "140"
          ],
          "coveredBy": [
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 26
            },
            "start": {
              "column": 67,
              "line": 21
            }
          }
        },
        {
          "id": "167",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'success' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": [
            "144"
          ],
          "coveredBy": [
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 22
            },
            "start": {
              "column": 27,
              "line": 22
            }
          }
        },
        {
          "id": "168",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'success' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": [
            "144"
          ],
          "coveredBy": [
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 22
            },
            "start": {
              "column": 39,
              "line": 22
            }
          }
        },
        {
          "id": "169",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Snapshot `Role Type Badge Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "140"
          ],
          "coveredBy": [
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 23
            },
            "start": {
              "column": 27,
              "line": 23
            }
          }
        },
        {
          "id": "170",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `Role Type Badge Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "140"
          ],
          "coveredBy": [
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 23
            },
            "start": {
              "column": 39,
              "line": 23
            }
          }
        },
        {
          "id": "171",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'info' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "146"
          ],
          "coveredBy": [
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146"
          ],
          "location": {
            "end": {
              "column": 45,
              "line": 24
            },
            "start": {
              "column": 25,
              "line": 24
            }
          }
        },
        {
          "id": "172",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'info' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "146"
          ],
          "coveredBy": [
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 24
            },
            "start": {
              "column": 37,
              "line": 24
            }
          }
        },
        {
          "id": "173",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'warning' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "145"
          ],
          "coveredBy": [
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 25
            },
            "start": {
              "column": 28,
              "line": 25
            }
          }
        },
        {
          "id": "174",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'warning' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "145"
          ],
          "coveredBy": [
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 25
            },
            "start": {
              "column": 40,
              "line": 25
            }
          }
        }
      ],
      "source": "<template>\n  <VuePrimeBadge\n    v-p-tooltip=\"$t(`components.RoleTypeBadge.descriptions.${roleType}`)\"\n    :aria-label=\"$t(`components.RoleTypeBadge.roleType`)\"\n    class=\"role-type-badge\"\n    :severity=\"roleTypeBadgeAttributes.severity\"\n    size=\"large\"\n    :value=\"$t(`shared.role.type.${roleType}`)\"\n  />\n</template>\n\n<script setup lang=\"ts\">\nimport type { BadgeProps } from \"primevue/badge\";\n\nimport type { RoleTypeBadgeProps } from \"~/components/shared/role/RoleTypeBadge/role-type-badge-types\";\nimport { RoleTypes } from \"~/composables/api/role/enums/role.enums\";\n\nconst props = defineProps<RoleTypeBadgeProps>();\n\nconst roleTypeBadgeAttributes = computed<BadgeProps>(() => {\n  const roleTypesBadgeAttributes: Record<RoleTypes, BadgeProps> = {\n    [RoleTypes.VILLAGER]: { severity: \"success\" },\n    [RoleTypes.WEREWOLF]: { severity: \"danger\" },\n    [RoleTypes.LONELY]: { severity: \"info\" },\n    [RoleTypes.AMBIGUOUS]: { severity: \"warning\" },\n  };\n\n  return roleTypesBadgeAttributes[props.roleType];\n});\n</script>\n\n<style lang=\"scss\" scoped>\n  .role-type-badge {\n    cursor: help;\n  }\n</style>"
    },
    "composables/api/error/useWerewolvesAssistantApiError.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "175",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/error/useWerewolvesAssistantApiError.ts(10,44): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "166",
            "167",
            "192",
            "193",
            "194",
            "203"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 24
            },
            "start": {
              "column": 75,
              "line": 10
            }
          }
        },
        {
          "id": "176",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "166"
          ],
          "coveredBy": [
            "166",
            "167"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 22
            },
            "start": {
              "column": 124,
              "line": 14
            }
          }
        },
        {
          "id": "177",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  Object {\n    \"detail\": \"composables.useWerewolvesAssistantApiError.checkConsoleForMoreDetails\",\n    \"summary\": \"composables.useWerewolvesAssistantApiError.statusCode.404\",\n  },\n], but it was called with Object {}",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "167"
          ],
          "coveredBy": [
            "166",
            "167"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 21
            },
            "start": {
              "column": 19,
              "line": 18
            }
          }
        },
        {
          "id": "178",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  Object {\n    \"detail\": \"composables.useWerewolvesAssistantApiError.checkConsoleForMoreDetails\",\n    \"summary\": \"composables.useWerewolvesAssistantApiError.statusCode.404\",\n  },\n], but it was called with Object {\n  \"detail\": \"composables.useWerewolvesAssistantApiError.checkConsoleForMoreDetails\",\n  \"summary\": \"\",\n}",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "167"
          ],
          "coveredBy": [
            "166",
            "167"
          ],
          "location": {
            "end": {
              "column": 92,
              "line": 19
            },
            "start": {
              "column": 18,
              "line": 19
            }
          }
        },
        {
          "id": "179",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  Object {\n    \"detail\": \"composables.useWerewolvesAssistantApiError.checkConsoleForMoreDetails\",\n    \"summary\": \"composables.useWerewolvesAssistantApiError.statusCode.404\",\n  },\n], but it was called with Object {\n  \"detail\": \"\",\n  \"summary\": \"composables.useWerewolvesAssistantApiError.statusCode.404\",\n}",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "167"
          ],
          "coveredBy": [
            "166",
            "167"
          ],
          "location": {
            "end": {
              "column": 88,
              "line": 20
            },
            "start": {
              "column": 17,
              "line": 20
            }
          }
        },
        {
          "id": "180",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "composables/api/error/useWerewolvesAssistantApiError.ts(23,3): error TS2741: Property 'handleWerewolvesAssistantApiError' is missing in type '{}' but required in type 'UseWerewolvesAssistantApiError'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "166",
            "167",
            "192",
            "193",
            "194",
            "203"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 23
            },
            "start": {
              "column": 10,
              "line": 23
            }
          }
        }
      ],
      "source": "import type { FetchResponse } from \"ofetch\";\n\nimport type { WerewolvesAssistantApiError } from \"~/composables/api/error/types/api-error.types\";\nimport { useVuePrimeToasts } from \"~/composables/vue-prime/useVuePrimeToasts\";\n\ntype UseWerewolvesAssistantApiError = {\n  handleWerewolvesAssistantApiError: (error: { response: FetchResponse<WerewolvesAssistantApiError> }) => void;\n};\n\nfunction useWerewolvesAssistantApiError(): UseWerewolvesAssistantApiError {\n  const { addErrorToast } = useVuePrimeToasts();\n  const { t } = useI18n();\n\n  function handleWerewolvesAssistantApiError({ response }: { response: FetchResponse<WerewolvesAssistantApiError> }): void {\n    const { _data: errorData } = response;\n    // eslint-disable-next-line no-console\n    console.error(errorData);\n    addErrorToast({\n      summary: t(`composables.useWerewolvesAssistantApiError.statusCode.${response.status}`),\n      detail: t(`composables.useWerewolvesAssistantApiError.checkConsoleForMoreDetails`),\n    });\n  }\n  return { handleWerewolvesAssistantApiError };\n}\n\nexport { useWerewolvesAssistantApiError };"
    },
    "composables/api/game/dto/create-game/create-game-additional-card/create-game-additional-card.dto.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "181",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/dto/create-game/create-game-additional-card/create-game-additional-card.dto.ts(15,83): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "195"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 17
            },
            "start": {
              "column": 111,
              "line": 15
            }
          }
        }
      ],
      "source": "import { Expose, plainToInstance } from \"class-transformer\";\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport type { GameAdditionalCardRecipientRoleName } from \"~/composables/api/game/types/game-additional-card/types/game-additional-card.types\";\nimport { RoleNames } from \"~/composables/api/role/enums/role.enums\";\nimport { DEFAULT_PLAIN_TO_INSTANCE_OPTIONS } from \"~/utils/constants/class-transformer.constants\";\n\nclass CreateGameAdditionalCardDto {\n  @Expose()\n  public roleName: RoleNames;\n\n  @Expose()\n  public recipient: GameAdditionalCardRecipientRoleName;\n\n  public static create(createGameAdditionalCardDto: CreateGameAdditionalCardDto): CreateGameAdditionalCardDto {\n    return plainToInstance(CreateGameAdditionalCardDto, createGameAdditionalCardDto, DEFAULT_PLAIN_TO_INSTANCE_OPTIONS);\n  }\n}\n\nexport { CreateGameAdditionalCardDto };"
    },
    "composables/api/game/dto/create-game/create-game-player/create-game-player.dto.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "182",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/dto/create-game/create-game-player/create-game-player.dto.ts(22,67): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "76",
            "77",
            "90",
            "91",
            "183"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 24
            },
            "start": {
              "column": 87,
              "line": 22
            }
          }
        }
      ],
      "source": "import { Expose, plainToInstance, Type } from \"class-transformer\";\n\nimport { CreateGamePlayerRoleDto } from \"~/composables/api/game/dto/create-game/create-game-player/create-game-player-role.dto\";\nimport { CreateGamePlayerSideDto } from \"~/composables/api/game/dto/create-game/create-game-player/create-game-player-side.dto\";\nimport { DEFAULT_PLAIN_TO_INSTANCE_OPTIONS } from \"~/utils/constants/class-transformer.constants\";\n\nclass CreateGamePlayerDto {\n  @Expose()\n  public name: string;\n\n  @Type(() => CreateGamePlayerRoleDto)\n  @Expose()\n  public role: CreateGamePlayerRoleDto;\n\n  @Type(() => CreateGamePlayerSideDto)\n  @Expose()\n  public side: CreateGamePlayerSideDto;\n\n  @Expose()\n  public group?: string;\n\n  public static create(createGamePlayerDto: CreateGamePlayerDto): CreateGamePlayerDto {\n    return plainToInstance(CreateGamePlayerDto, createGamePlayerDto, DEFAULT_PLAIN_TO_INSTANCE_OPTIONS);\n  }\n}\n\nexport { CreateGamePlayerDto };"
    },
    "composables/api/game/types/game.class.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "185",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/types/game.class.ts(34,37): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "199"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 36
            },
            "start": {
              "column": 42,
              "line": 34
            }
          }
        }
      ],
      "source": "import { Expose, plainToInstance, Type } from \"class-transformer\";\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport type { GamePhase, GameStatus } from \"~/composables/api/game/types/game.types\";\nimport { Player } from \"~/composables/api/game/types/players/player.class\";\nimport { DEFAULT_PLAIN_TO_INSTANCE_OPTIONS } from \"~/utils/constants/class-transformer.constants\";\n\nclass Game {\n  @Expose()\n  public _id: string;\n\n  @Expose()\n  public turn: number;\n\n  @Expose()\n  public phase: GamePhase;\n\n  @Expose()\n  public tick: number;\n\n  @Expose()\n  public status: GameStatus;\n\n  @Type(() => Player)\n  @Expose()\n  public players: Player[];\n\n  @Expose()\n  public createdAt: Date;\n\n  @Expose()\n  public updatedAt: Date;\n\n  public static create(game: Game): Game {\n    return plainToInstance(Game, game, DEFAULT_PLAIN_TO_INSTANCE_OPTIONS);\n  }\n}\n\nexport { Game };"
    },
    "composables/api/game/types/players/player.class.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "186",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/types/players/player.class.ts(12,41): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "206"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 14
            },
            "start": {
              "column": 48,
              "line": 12
            }
          }
        }
      ],
      "source": "import { Expose, plainToInstance } from \"class-transformer\";\n\nimport { DEFAULT_PLAIN_TO_INSTANCE_OPTIONS } from \"~/utils/constants/class-transformer.constants\";\n\nclass Player {\n  @Expose()\n  public _id: string;\n\n  @Expose()\n  public name: string;\n\n  public static create(player: Player): Player {\n    return plainToInstance(Player, player, DEFAULT_PLAIN_TO_INSTANCE_OPTIONS);\n  }\n}\n\nexport { Player };"
    },
    "composables/api/game/useCreateGameDtoValidation.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "187",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/useCreateGameDtoValidation.ts(19,73): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 90
            },
            "start": {
              "column": 100,
              "line": 19
            }
          }
        },
        {
          "id": "188",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "composables/api/game/useCreateGameDtoValidation.ts(22,35): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(getter: ComputedGetter<boolean>, debugOptions?: DebuggerOptions | undefined): ComputedRef<boolean>', gave the following error.\n    Type 'undefined' is not assignable to type 'boolean'.\n  Overload 2 of 2, '(options: WritableComputedOptions<boolean>, debugOptions?: DebuggerOptions | undefined): WritableComputedRef<boolean>', gave the following error.\n    Argument of type '() => undefined' is not assignable to parameter of type 'WritableComputedOptions<boolean>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 116,
              "line": 22
            },
            "start": {
              "column": 53,
              "line": 22
            }
          }
        },
        {
          "id": "189",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 116,
              "line": 22
            },
            "start": {
              "column": 59,
              "line": 22
            }
          }
        },
        {
          "id": "190",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "0",
            "1",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 116,
              "line": 22
            },
            "start": {
              "column": 59,
              "line": 22
            }
          }
        },
        {
          "id": "191",
          "mutatorName": "EqualityOperator",
          "replacement": "createGameDto.value.players.length > MIN_PLAYERS_IN_GAME",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "0",
            "1",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 116,
              "line": 22
            },
            "start": {
              "column": 59,
              "line": 22
            }
          }
        },
        {
          "id": "192",
          "mutatorName": "EqualityOperator",
          "replacement": "createGameDto.value.players.length < MIN_PLAYERS_IN_GAME",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 116,
              "line": 22
            },
            "start": {
              "column": 59,
              "line": 22
            }
          }
        },
        {
          "id": "193",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "composables/api/game/useCreateGameDtoValidation.ts(24,26): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(getter: ComputedGetter<boolean>, debugOptions?: DebuggerOptions | undefined): ComputedRef<boolean>', gave the following error.\n    Type 'undefined' is not assignable to type 'boolean'.\n  Overload 2 of 2, '(options: WritableComputedOptions<boolean>, debugOptions?: DebuggerOptions | undefined): WritableComputedRef<boolean>', gave the following error.\n    Argument of type '() => undefined' is not assignable to parameter of type 'WritableComputedOptions<boolean>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 125,
              "line": 24
            },
            "start": {
              "column": 44,
              "line": 24
            }
          }
        },
        {
          "id": "194",
          "mutatorName": "MethodExpression",
          "replacement": "createGameDto.value.players.some(player => player.role.name !== undefined)",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "2",
            "3",
            "15",
            "16",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 125,
              "line": 24
            },
            "start": {
              "column": 50,
              "line": 24
            }
          }
        },
        {
          "id": "195",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "3",
            "15",
            "16",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 124,
              "line": 24
            },
            "start": {
              "column": 84,
              "line": 24
            }
          }
        },
        {
          "id": "196",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "2",
            "3",
            "15",
            "16",
            "20",
            "21",
            "22",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 124,
              "line": 24
            },
            "start": {
              "column": 94,
              "line": 24
            }
          }
        },
        {
          "id": "197",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "3",
            "15",
            "16",
            "20",
            "21",
            "22",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 124,
              "line": 24
            },
            "start": {
              "column": 94,
              "line": 24
            }
          }
        },
        {
          "id": "198",
          "mutatorName": "EqualityOperator",
          "replacement": "player.role.name === undefined",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "3",
            "15",
            "16",
            "20",
            "21",
            "22",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 124,
              "line": 24
            },
            "start": {
              "column": 94,
              "line": 24
            }
          }
        },
        {
          "id": "199",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "composables/api/game/useCreateGameDtoValidation.ts(26,43): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(getter: ComputedGetter<boolean>, debugOptions?: DebuggerOptions | undefined): ComputedRef<boolean>', gave the following error.\n    Type 'undefined' is not assignable to type 'boolean'.\n  Overload 2 of 2, '(options: WritableComputedOptions<boolean>, debugOptions?: DebuggerOptions | undefined): WritableComputedRef<boolean>', gave the following error.\n    Argument of type '() => undefined' is not assignable to parameter of type 'WritableComputedOptions<boolean>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 154,
              "line": 26
            },
            "start": {
              "column": 61,
              "line": 26
            }
          }
        },
        {
          "id": "200",
          "mutatorName": "MethodExpression",
          "replacement": "createGameDto.value.players.every(player => player.side.current === RoleSides.VILLAGERS)",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "4"
          ],
          "coveredBy": [
            "4",
            "5",
            "16",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 154,
              "line": 26
            },
            "start": {
              "column": 67,
              "line": 26
            }
          }
        },
        {
          "id": "201",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "4"
          ],
          "coveredBy": [
            "4",
            "5",
            "16",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 153,
              "line": 26
            },
            "start": {
              "column": 100,
              "line": 26
            }
          }
        },
        {
          "id": "202",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "5"
          ],
          "coveredBy": [
            "4",
            "5",
            "16",
            "20",
            "21",
            "22",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 153,
              "line": 26
            },
            "start": {
              "column": 110,
              "line": 26
            }
          }
        },
        {
          "id": "203",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "4"
          ],
          "coveredBy": [
            "4",
            "5",
            "16",
            "20",
            "21",
            "22",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 153,
              "line": 26
            },
            "start": {
              "column": 110,
              "line": 26
            }
          }
        },
        {
          "id": "204",
          "mutatorName": "EqualityOperator",
          "replacement": "player.side.current !== RoleSides.VILLAGERS",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "5"
          ],
          "coveredBy": [
            "4",
            "5",
            "16",
            "20",
            "21",
            "22",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 153,
              "line": 26
            },
            "start": {
              "column": 110,
              "line": 26
            }
          }
        },
        {
          "id": "205",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "composables/api/game/useCreateGameDtoValidation.ts(28,43): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(getter: ComputedGetter<boolean>, debugOptions?: DebuggerOptions | undefined): ComputedRef<boolean>', gave the following error.\n    Type 'undefined' is not assignable to type 'boolean'.\n  Overload 2 of 2, '(options: WritableComputedOptions<boolean>, debugOptions?: DebuggerOptions | undefined): WritableComputedRef<boolean>', gave the following error.\n    Argument of type '() => undefined' is not assignable to parameter of type 'WritableComputedOptions<boolean>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 155,
              "line": 28
            },
            "start": {
              "column": 61,
              "line": 28
            }
          }
        },
        {
          "id": "206",
          "mutatorName": "MethodExpression",
          "replacement": "createGameDto.value.players.every(player => player.side.current === RoleSides.WEREWOLVES)",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "6"
          ],
          "coveredBy": [
            "6",
            "7",
            "16",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 155,
              "line": 28
            },
            "start": {
              "column": 67,
              "line": 28
            }
          }
        },
        {
          "id": "207",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "6"
          ],
          "coveredBy": [
            "6",
            "7",
            "16",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 154,
              "line": 28
            },
            "start": {
              "column": 100,
              "line": 28
            }
          }
        },
        {
          "id": "208",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "7"
          ],
          "coveredBy": [
            "6",
            "7",
            "16",
            "20",
            "21",
            "22",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 154,
              "line": 28
            },
            "start": {
              "column": 110,
              "line": 28
            }
          }
        },
        {
          "id": "209",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "6"
          ],
          "coveredBy": [
            "6",
            "7",
            "16",
            "20",
            "21",
            "22",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 154,
              "line": 28
            },
            "start": {
              "column": 110,
              "line": 28
            }
          }
        },
        {
          "id": "210",
          "mutatorName": "EqualityOperator",
          "replacement": "player.side.current !== RoleSides.WEREWOLVES",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "7"
          ],
          "coveredBy": [
            "6",
            "7",
            "16",
            "20",
            "21",
            "22",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 154,
              "line": 28
            },
            "start": {
              "column": 110,
              "line": 28
            }
          }
        },
        {
          "id": "211",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/useCreateGameDtoValidation.ts(30,68): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(getter: ComputedGetter<boolean>, debugOptions?: DebuggerOptions | undefined): ComputedRef<boolean>', gave the following error.\n    Argument of type '() => void' is not assignable to parameter of type 'ComputedGetter<boolean>'.\n      Type 'void' is not assignable to type 'boolean'.\n  Overload 2 of 2, '(options: WritableComputedOptions<boolean>, debugOptions?: DebuggerOptions | undefined): WritableComputedRef<boolean>', gave the following error.\n    Argument of type '() => void' is not assignable to parameter of type 'WritableComputedOptions<boolean>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "8",
            "9",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 37
            },
            "start": {
              "column": 74,
              "line": 30
            }
          }
        },
        {
          "id": "212",
          "mutatorName": "MethodExpression",
          "replacement": "createGameDto.value.players.every(player => player.role.name === RoleNames.THIEF)",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "8",
            "9",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 108,
              "line": 31
            },
            "start": {
              "column": 28,
              "line": 31
            }
          }
        },
        {
          "id": "213",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "8",
            "9",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 107,
              "line": 31
            },
            "start": {
              "column": 61,
              "line": 31
            }
          }
        },
        {
          "id": "214",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "9",
            "20",
            "21",
            "22",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 107,
              "line": 31
            },
            "start": {
              "column": 71,
              "line": 31
            }
          }
        },
        {
          "id": "215",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "8",
            "9",
            "20",
            "21",
            "22",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 107,
              "line": 31
            },
            "start": {
              "column": 71,
              "line": 31
            }
          }
        },
        {
          "id": "216",
          "mutatorName": "EqualityOperator",
          "replacement": "player.role.name !== RoleNames.THIEF",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "9",
            "20",
            "21",
            "22",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 107,
              "line": 31
            },
            "start": {
              "column": 71,
              "line": 31
            }
          }
        },
        {
          "id": "217",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "8",
            "9",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 137,
              "line": 32
            },
            "start": {
              "column": 43,
              "line": 32
            }
          }
        },
        {
          "id": "218",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "9",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 137,
              "line": 32
            },
            "start": {
              "column": 43,
              "line": 32
            }
          }
        },
        {
          "id": "219",
          "mutatorName": "EqualityOperator",
          "replacement": "createGameDto.value.additionalCards?.some(card => card.recipient === RoleNames.THIEF) !== true",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "9",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 137,
              "line": 32
            },
            "start": {
              "column": 43,
              "line": 32
            }
          }
        },
        {
          "id": "220",
          "mutatorName": "MethodExpression",
          "replacement": "createGameDto.value.additionalCards?.every(card => card.recipient === RoleNames.THIEF)",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 10,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "9",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 128,
              "line": 32
            },
            "start": {
              "column": 43,
              "line": 32
            }
          }
        },
        {
          "id": "221",
          "mutatorName": "OptionalChaining",
          "replacement": "createGameDto.value.additionalCards.some",
          "statusReason": "composables/api/game/useCreateGameDtoValidation.ts(32,43): error TS18048: 'createGameDto.value.additionalCards' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "8",
            "9",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 84,
              "line": 32
            },
            "start": {
              "column": 43,
              "line": 32
            }
          }
        },
        {
          "id": "222",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "9"
          ],
          "location": {
            "end": {
              "column": 127,
              "line": 32
            },
            "start": {
              "column": 85,
              "line": 32
            }
          }
        },
        {
          "id": "223",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "8",
            "9"
          ],
          "location": {
            "end": {
              "column": 127,
              "line": 32
            },
            "start": {
              "column": 93,
              "line": 32
            }
          }
        },
        {
          "id": "224",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "9"
          ],
          "location": {
            "end": {
              "column": 127,
              "line": 32
            },
            "start": {
              "column": 93,
              "line": 32
            }
          }
        },
        {
          "id": "225",
          "mutatorName": "EqualityOperator",
          "replacement": "card.recipient !== RoleNames.THIEF",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "8",
            "9"
          ],
          "location": {
            "end": {
              "column": 127,
              "line": 32
            },
            "start": {
              "column": 93,
              "line": 32
            }
          }
        },
        {
          "id": "226",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "9",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 137,
              "line": 32
            },
            "start": {
              "column": 133,
              "line": 32
            }
          }
        },
        {
          "id": "227",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "9",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 33
            },
            "start": {
              "column": 9,
              "line": 33
            }
          }
        },
        {
          "id": "228",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "8",
            "9",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 33
            },
            "start": {
              "column": 9,
              "line": 33
            }
          }
        },
        {
          "id": "229",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "8",
            "9",
            "21"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 35
            },
            "start": {
              "column": 25,
              "line": 33
            }
          }
        },
        {
          "id": "230",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 16,
              "line": 36
            },
            "start": {
              "column": 12,
              "line": 36
            }
          }
        },
        {
          "id": "231",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/useCreateGameDtoValidation.ts(39,68): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(getter: ComputedGetter<boolean>, debugOptions?: DebuggerOptions | undefined): ComputedRef<boolean>', gave the following error.\n    Argument of type '() => void' is not assignable to parameter of type 'ComputedGetter<boolean>'.\n      Type 'void' is not assignable to type 'boolean'.\n  Overload 2 of 2, '(options: WritableComputedOptions<boolean>, debugOptions?: DebuggerOptions | undefined): WritableComputedRef<boolean>', gave the following error.\n    Argument of type '() => void' is not assignable to parameter of type 'WritableComputedOptions<boolean>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "10",
            "11",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 46
            },
            "start": {
              "column": 74,
              "line": 39
            }
          }
        },
        {
          "id": "232",
          "mutatorName": "MethodExpression",
          "replacement": "createGameDto.value.players.every(player => player.role.name === RoleNames.ACTOR)",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "11"
          ],
          "coveredBy": [
            "10",
            "11",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 108,
              "line": 40
            },
            "start": {
              "column": 28,
              "line": 40
            }
          }
        },
        {
          "id": "233",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "11"
          ],
          "coveredBy": [
            "10",
            "11",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 107,
              "line": 40
            },
            "start": {
              "column": 61,
              "line": 40
            }
          }
        },
        {
          "id": "234",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "11",
            "20",
            "21",
            "22",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 107,
              "line": 40
            },
            "start": {
              "column": 71,
              "line": 40
            }
          }
        },
        {
          "id": "235",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "11"
          ],
          "coveredBy": [
            "10",
            "11",
            "20",
            "21",
            "22",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 107,
              "line": 40
            },
            "start": {
              "column": 71,
              "line": 40
            }
          }
        },
        {
          "id": "236",
          "mutatorName": "EqualityOperator",
          "replacement": "player.role.name !== RoleNames.ACTOR",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "11",
            "20",
            "21",
            "22",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 107,
              "line": 40
            },
            "start": {
              "column": 71,
              "line": 40
            }
          }
        },
        {
          "id": "237",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "11"
          ],
          "coveredBy": [
            "10",
            "11",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 137,
              "line": 41
            },
            "start": {
              "column": 43,
              "line": 41
            }
          }
        },
        {
          "id": "238",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "11",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 137,
              "line": 41
            },
            "start": {
              "column": 43,
              "line": 41
            }
          }
        },
        {
          "id": "239",
          "mutatorName": "EqualityOperator",
          "replacement": "createGameDto.value.additionalCards?.some(card => card.recipient === RoleNames.ACTOR) !== true",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "11",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 137,
              "line": 41
            },
            "start": {
              "column": 43,
              "line": 41
            }
          }
        },
        {
          "id": "240",
          "mutatorName": "MethodExpression",
          "replacement": "createGameDto.value.additionalCards?.every(card => card.recipient === RoleNames.ACTOR)",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "11",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 128,
              "line": 41
            },
            "start": {
              "column": 43,
              "line": 41
            }
          }
        },
        {
          "id": "241",
          "mutatorName": "OptionalChaining",
          "replacement": "createGameDto.value.additionalCards.some",
          "statusReason": "composables/api/game/useCreateGameDtoValidation.ts(41,43): error TS18048: 'createGameDto.value.additionalCards' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "10",
            "11",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 84,
              "line": 41
            },
            "start": {
              "column": 43,
              "line": 41
            }
          }
        },
        {
          "id": "242",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "11"
          ],
          "location": {
            "end": {
              "column": 127,
              "line": 41
            },
            "start": {
              "column": 85,
              "line": 41
            }
          }
        },
        {
          "id": "243",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "11"
          ],
          "coveredBy": [
            "10",
            "11"
          ],
          "location": {
            "end": {
              "column": 127,
              "line": 41
            },
            "start": {
              "column": 93,
              "line": 41
            }
          }
        },
        {
          "id": "244",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "11"
          ],
          "location": {
            "end": {
              "column": 127,
              "line": 41
            },
            "start": {
              "column": 93,
              "line": 41
            }
          }
        },
        {
          "id": "245",
          "mutatorName": "EqualityOperator",
          "replacement": "card.recipient !== RoleNames.ACTOR",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "11"
          ],
          "coveredBy": [
            "10",
            "11"
          ],
          "location": {
            "end": {
              "column": 127,
              "line": 41
            },
            "start": {
              "column": 93,
              "line": 41
            }
          }
        },
        {
          "id": "246",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "11",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 137,
              "line": 41
            },
            "start": {
              "column": 133,
              "line": 41
            }
          }
        },
        {
          "id": "247",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "11",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 42
            },
            "start": {
              "column": 9,
              "line": 42
            }
          }
        },
        {
          "id": "248",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "11"
          ],
          "coveredBy": [
            "10",
            "11",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 42
            },
            "start": {
              "column": 9,
              "line": 42
            }
          }
        },
        {
          "id": "249",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "11"
          ],
          "coveredBy": [
            "10",
            "11",
            "21"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 44
            },
            "start": {
              "column": 25,
              "line": 42
            }
          }
        },
        {
          "id": "250",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 16,
              "line": 45
            },
            "start": {
              "column": 12,
              "line": 45
            }
          }
        },
        {
          "id": "251",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/useCreateGameDtoValidation.ts(48,81): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(getter: ComputedGetter<boolean>, debugOptions?: DebuggerOptions | undefined): ComputedRef<boolean>', gave the following error.\n    Argument of type '() => void' is not assignable to parameter of type 'ComputedGetter<boolean>'.\n      Type 'void' is not assignable to type 'boolean'.\n  Overload 2 of 2, '(options: WritableComputedOptions<boolean>, debugOptions?: DebuggerOptions | undefined): WritableComputedRef<boolean>', gave the following error.\n    Argument of type '() => void' is not assignable to parameter of type 'WritableComputedOptions<boolean>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "12",
            "13",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 55
            },
            "start": {
              "column": 87,
              "line": 48
            }
          }
        },
        {
          "id": "252",
          "mutatorName": "MethodExpression",
          "replacement": "createGameDto.value.players.every(player => player.role.name === RoleNames.PREJUDICED_MANIPULATOR)",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 11,
          "static": false,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "12",
            "13",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 141,
              "line": 49
            },
            "start": {
              "column": 44,
              "line": 49
            }
          }
        },
        {
          "id": "253",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "12",
            "13",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 140,
              "line": 49
            },
            "start": {
              "column": 77,
              "line": 49
            }
          }
        },
        {
          "id": "254",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "20"
          ],
          "coveredBy": [
            "12",
            "13",
            "20",
            "21",
            "22",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 140,
              "line": 49
            },
            "start": {
              "column": 87,
              "line": 49
            }
          }
        },
        {
          "id": "255",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "12",
            "13",
            "20",
            "21",
            "22",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 140,
              "line": 49
            },
            "start": {
              "column": 87,
              "line": 49
            }
          }
        },
        {
          "id": "256",
          "mutatorName": "EqualityOperator",
          "replacement": "player.role.name !== RoleNames.PREJUDICED_MANIPULATOR",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "20"
          ],
          "coveredBy": [
            "12",
            "13",
            "20",
            "21",
            "22",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 140,
              "line": 49
            },
            "start": {
              "column": 87,
              "line": 49
            }
          }
        },
        {
          "id": "257",
          "mutatorName": "MethodExpression",
          "replacement": "createGameDto.value.players.some(player => player.group)",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "12",
            "13",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 89,
              "line": 50
            },
            "start": {
              "column": 32,
              "line": 50
            }
          }
        },
        {
          "id": "258",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "12"
          ],
          "coveredBy": [
            "12",
            "13",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 88,
              "line": 50
            },
            "start": {
              "column": 66,
              "line": 50
            }
          }
        },
        {
          "id": "259",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "20"
          ],
          "coveredBy": [
            "12",
            "13",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 39,
              "line": 51
            },
            "start": {
              "column": 9,
              "line": 51
            }
          }
        },
        {
          "id": "260",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "12",
            "13",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 39,
              "line": 51
            },
            "start": {
              "column": 9,
              "line": 51
            }
          }
        },
        {
          "id": "261",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "12",
            "13",
            "21"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 53
            },
            "start": {
              "column": 41,
              "line": 51
            }
          }
        },
        {
          "id": "262",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "12"
          ],
          "coveredBy": [
            "12",
            "20",
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 16,
              "line": 54
            },
            "start": {
              "column": 12,
              "line": 54
            }
          }
        },
        {
          "id": "263",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "composables/api/game/useCreateGameDtoValidation.ts(57,25): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(getter: ComputedGetter<boolean>, debugOptions?: DebuggerOptions | undefined): ComputedRef<boolean>', gave the following error.\n    Type 'undefined' is not assignable to type 'boolean'.\n  Overload 2 of 2, '(options: WritableComputedOptions<boolean>, debugOptions?: DebuggerOptions | undefined): WritableComputedRef<boolean>', gave the following error.\n    Argument of type '() => undefined' is not assignable to parameter of type 'WritableComputedOptions<boolean>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 63
            },
            "start": {
              "column": 43,
              "line": 57
            }
          }
        },
        {
          "id": "264",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 63
            },
            "start": {
              "column": 49,
              "line": 57
            }
          }
        },
        {
          "id": "265",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "killedBy": [
            "20"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 63
            },
            "start": {
              "column": 49,
              "line": 57
            }
          }
        },
        {
          "id": "266",
          "mutatorName": "LogicalOperator",
          "replacement": "isMinimumPlayersReached.value && areAllRolesSet.value && doesContainOneVillagerSidedRole.value && doesContainOneWerewolfSidedRole.value && areAdditionalCardsSetForThiefIfPresent.value && areAdditionalCardsSetForActorIfPresent.value || arePlayerGroupsSetForPrejudicedManipulatorIfPresent.value",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 63
            },
            "start": {
              "column": 49,
              "line": 57
            }
          }
        },
        {
          "id": "267",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 62
            },
            "start": {
              "column": 49,
              "line": 57
            }
          }
        },
        {
          "id": "268",
          "mutatorName": "LogicalOperator",
          "replacement": "isMinimumPlayersReached.value && areAllRolesSet.value && doesContainOneVillagerSidedRole.value && doesContainOneWerewolfSidedRole.value && areAdditionalCardsSetForThiefIfPresent.value || areAdditionalCardsSetForActorIfPresent.value",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 62
            },
            "start": {
              "column": 49,
              "line": 57
            }
          }
        },
        {
          "id": "269",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 61
            },
            "start": {
              "column": 49,
              "line": 57
            }
          }
        },
        {
          "id": "270",
          "mutatorName": "LogicalOperator",
          "replacement": "isMinimumPlayersReached.value && areAllRolesSet.value && doesContainOneVillagerSidedRole.value && doesContainOneWerewolfSidedRole.value || areAdditionalCardsSetForThiefIfPresent.value",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 61
            },
            "start": {
              "column": 49,
              "line": 57
            }
          }
        },
        {
          "id": "271",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 60
            },
            "start": {
              "column": 49,
              "line": 57
            }
          }
        },
        {
          "id": "272",
          "mutatorName": "LogicalOperator",
          "replacement": "isMinimumPlayersReached.value && areAllRolesSet.value && doesContainOneVillagerSidedRole.value || doesContainOneWerewolfSidedRole.value",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 60
            },
            "start": {
              "column": 49,
              "line": 57
            }
          }
        },
        {
          "id": "273",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 59
            },
            "start": {
              "column": 49,
              "line": 57
            }
          }
        },
        {
          "id": "274",
          "mutatorName": "LogicalOperator",
          "replacement": "isMinimumPlayersReached.value && areAllRolesSet.value || doesContainOneVillagerSidedRole.value",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 59
            },
            "start": {
              "column": 49,
              "line": 57
            }
          }
        },
        {
          "id": "275",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 25,
              "line": 58
            },
            "start": {
              "column": 49,
              "line": 57
            }
          }
        },
        {
          "id": "276",
          "mutatorName": "LogicalOperator",
          "replacement": "isMinimumPlayersReached.value || areAllRolesSet.value",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 25,
              "line": 58
            },
            "start": {
              "column": 49,
              "line": 57
            }
          }
        },
        {
          "id": "277",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/useCreateGameDtoValidation.ts(65,59): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(getter: ComputedGetter<string[]>, debugOptions?: DebuggerOptions | undefined): ComputedRef<string[]>', gave the following error.\n    Argument of type '() => void' is not assignable to parameter of type 'ComputedGetter<string[]>'.\n      Type 'void' is not assignable to type 'string[]'.\n  Overload 2 of 2, '(options: WritableComputedOptions<string[]>, debugOptions?: DebuggerOptions | undefined): WritableComputedRef<string[]>', gave the following error.\n    Argument of type '() => void' is not assignable to parameter of type 'WritableComputedOptions<string[]>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 77
            },
            "start": {
              "column": 65,
              "line": 65
            }
          }
        },
        {
          "id": "278",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected [] to include 'composables.useCreateGameDtoValidatio…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 74
            },
            "start": {
              "column": 45,
              "line": 66
            }
          }
        },
        {
          "id": "279",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected [ '' ] to include 'composables.useCreateGameDtoValidatio…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 77,
              "line": 67
            },
            "start": {
              "column": 10,
              "line": 67
            }
          }
        },
        {
          "id": "280",
          "mutatorName": "BooleanLiteral",
          "replacement": "isMinimumPlayersReached.value",
          "statusReason": "expected [] to include 'composables.useCreateGameDtoValidatio…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 111,
              "line": 67
            },
            "start": {
              "column": 81,
              "line": 67
            }
          }
        },
        {
          "id": "281",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected [ '', …(2) ] to include 'composables.useCreateGameDtoValidatio…'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 68,
              "line": 68
            },
            "start": {
              "column": 10,
              "line": 68
            }
          }
        },
        {
          "id": "282",
          "mutatorName": "BooleanLiteral",
          "replacement": "areAllRolesSet.value",
          "statusReason": "expected [ …(2) ] to include 'composables.useCreateGameDtoValidatio…'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 93,
              "line": 68
            },
            "start": {
              "column": 72,
              "line": 68
            }
          }
        },
        {
          "id": "283",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected [ '' ] to include 'composables.useCreateGameDtoValidatio…'",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 70,
              "line": 69
            },
            "start": {
              "column": 10,
              "line": 69
            }
          }
        },
        {
          "id": "284",
          "mutatorName": "BooleanLiteral",
          "replacement": "doesContainOneVillagerSidedRole.value",
          "statusReason": "expected [] to include 'composables.useCreateGameDtoValidatio…'",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 112,
              "line": 69
            },
            "start": {
              "column": 74,
              "line": 69
            }
          }
        },
        {
          "id": "285",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected [ '' ] to include 'composables.useCreateGameDtoValidatio…'",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 70,
              "line": 70
            },
            "start": {
              "column": 10,
              "line": 70
            }
          }
        },
        {
          "id": "286",
          "mutatorName": "BooleanLiteral",
          "replacement": "doesContainOneWerewolfSidedRole.value",
          "statusReason": "expected [] to include 'composables.useCreateGameDtoValidatio…'",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 112,
              "line": 70
            },
            "start": {
              "column": 74,
              "line": 70
            }
          }
        },
        {
          "id": "287",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected [ …(3) ] to include 'composables.useCreateGameDtoValidatio…'",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 77,
              "line": 71
            },
            "start": {
              "column": 10,
              "line": 71
            }
          }
        },
        {
          "id": "288",
          "mutatorName": "BooleanLiteral",
          "replacement": "areAdditionalCardsSetForThiefIfPresent.value",
          "statusReason": "expected [ …(2) ] to include 'composables.useCreateGameDtoValidatio…'",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 126,
              "line": 71
            },
            "start": {
              "column": 81,
              "line": 71
            }
          }
        },
        {
          "id": "289",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected [ …(3) ] to include 'composables.useCreateGameDtoValidatio…'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 77,
              "line": 72
            },
            "start": {
              "column": 10,
              "line": 72
            }
          }
        },
        {
          "id": "290",
          "mutatorName": "BooleanLiteral",
          "replacement": "areAdditionalCardsSetForActorIfPresent.value",
          "statusReason": "expected [ …(2) ] to include 'composables.useCreateGameDtoValidatio…'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 126,
              "line": 72
            },
            "start": {
              "column": 81,
              "line": 72
            }
          }
        },
        {
          "id": "291",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected [ …(3) ] to include 'composables.useCreateGameDtoValidatio…'",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 84,
              "line": 73
            },
            "start": {
              "column": 10,
              "line": 73
            }
          }
        },
        {
          "id": "292",
          "mutatorName": "BooleanLiteral",
          "replacement": "arePlayerGroupsSetForPrejudicedManipulatorIfPresent.value",
          "statusReason": "expected [ …(2) ] to include 'composables.useCreateGameDtoValidatio…'",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 146,
              "line": 73
            },
            "start": {
              "column": 88,
              "line": 73
            }
          }
        },
        {
          "id": "293",
          "mutatorName": "MethodExpression",
          "replacement": "Object.keys(errors)",
          "statusReason": "expected [ …(7) ] to strictly equal []",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 81,
              "line": 76
            },
            "start": {
              "column": 12,
              "line": 76
            }
          }
        },
        {
          "id": "294",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected [] to include 'composables.useCreateGameDtoValidatio…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "22",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 80,
              "line": 76
            },
            "start": {
              "column": 39,
              "line": 76
            }
          }
        },
        {
          "id": "295",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "composables/api/game/useCreateGameDtoValidation.ts(79,3): error TS2740: Type '{}' is missing the following properties from type 'UseCreateGameDtoValidation': isMinimumPlayersReached, areAllRolesSet, doesContainOneVillagerSidedRole, doesContainOneWerewolfSidedRole, and 5 more.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 89
            },
            "start": {
              "column": 10,
              "line": 79
            }
          }
        }
      ],
      "source": "import type { ComputedRef, Ref } from \"vue\";\n\nimport { MIN_PLAYERS_IN_GAME } from \"~/composables/api/game/constants/game.constants\";\nimport type { CreateGameDto } from \"~/composables/api/game/dto/create-game/create-game.dto\";\nimport { RoleNames, RoleSides } from \"~/composables/api/role/enums/role.enums\";\n\ntype UseCreateGameDtoValidation = {\n  isMinimumPlayersReached: ComputedRef<boolean>;\n  areAllRolesSet: ComputedRef<boolean>;\n  doesContainOneVillagerSidedRole: ComputedRef<boolean>;\n  doesContainOneWerewolfSidedRole: ComputedRef<boolean>;\n  areAdditionalCardsSetForThiefIfPresent: ComputedRef<boolean>;\n  areAdditionalCardsSetForActorIfPresent: ComputedRef<boolean>;\n  arePlayerGroupsSetForPrejudicedManipulatorIfPresent: ComputedRef<boolean>;\n  canCreateGame: ComputedRef<boolean>;\n  gameCreationValidationErrors: ComputedRef<string[]>;\n};\n\nfunction useCreateGameDtoValidation(createGameDto: Ref<CreateGameDto>): UseCreateGameDtoValidation {\n  const { t } = useI18n();\n\n  const isMinimumPlayersReached = computed<boolean>(() => createGameDto.value.players.length >= MIN_PLAYERS_IN_GAME);\n\n  const areAllRolesSet = computed<boolean>(() => createGameDto.value.players.every(player => player.role.name !== undefined));\n\n  const doesContainOneVillagerSidedRole = computed<boolean>(() => createGameDto.value.players.some(player => player.side.current === RoleSides.VILLAGERS));\n\n  const doesContainOneWerewolfSidedRole = computed<boolean>(() => createGameDto.value.players.some(player => player.side.current === RoleSides.WEREWOLVES));\n\n  const areAdditionalCardsSetForThiefIfPresent = computed<boolean>(() => {\n    const isThiefPresent = createGameDto.value.players.some(player => player.role.name === RoleNames.THIEF);\n    const areAdditionalCardsSetForThief = createGameDto.value.additionalCards?.some(card => card.recipient === RoleNames.THIEF) === true;\n    if (isThiefPresent) {\n      return areAdditionalCardsSetForThief;\n    }\n    return true;\n  });\n\n  const areAdditionalCardsSetForActorIfPresent = computed<boolean>(() => {\n    const isActorPresent = createGameDto.value.players.some(player => player.role.name === RoleNames.ACTOR);\n    const areAdditionalCardsSetForActor = createGameDto.value.additionalCards?.some(card => card.recipient === RoleNames.ACTOR) === true;\n    if (isActorPresent) {\n      return areAdditionalCardsSetForActor;\n    }\n    return true;\n  });\n\n  const arePlayerGroupsSetForPrejudicedManipulatorIfPresent = computed<boolean>(() => {\n    const isPrejudicedManipulatorPresent = createGameDto.value.players.some(player => player.role.name === RoleNames.PREJUDICED_MANIPULATOR);\n    const arePlayerGroupsSet = createGameDto.value.players.every(player => player.group);\n    if (isPrejudicedManipulatorPresent) {\n      return arePlayerGroupsSet;\n    }\n    return true;\n  });\n\n  const canCreateGame = computed<boolean>(() => isMinimumPlayersReached.value &&\n    areAllRolesSet.value &&\n    doesContainOneVillagerSidedRole.value &&\n    doesContainOneWerewolfSidedRole.value &&\n    areAdditionalCardsSetForThiefIfPresent.value &&\n    areAdditionalCardsSetForActorIfPresent.value &&\n    arePlayerGroupsSetForPrejudicedManipulatorIfPresent.value);\n\n  const gameCreationValidationErrors = computed<string[]>(() => {\n    const errors: Record<string, boolean> = {\n      [t(\"composables.useCreateGameDtoValidation.minimumOfPlayersNotReached\")]: !isMinimumPlayersReached.value,\n      [t(\"composables.useCreateGameDtoValidation.notAllRolesAreSet\")]: !areAllRolesSet.value,\n      [t(\"composables.useCreateGameDtoValidation.noVillagerSidedRole\")]: !doesContainOneVillagerSidedRole.value,\n      [t(\"composables.useCreateGameDtoValidation.noWerewolfSidedRole\")]: !doesContainOneWerewolfSidedRole.value,\n      [t(\"composables.useCreateGameDtoValidation.thiefAdditionalCardsNotSet\")]: !areAdditionalCardsSetForThiefIfPresent.value,\n      [t(\"composables.useCreateGameDtoValidation.actorAdditionalCardsNotSet\")]: !areAdditionalCardsSetForActorIfPresent.value,\n      [t(\"composables.useCreateGameDtoValidation.prejudicedManipulatorGroupsNotSet\")]: !arePlayerGroupsSetForPrejudicedManipulatorIfPresent.value,\n    };\n\n    return Object.keys(errors).filter((key: keyof typeof errors) => errors[key]);\n  });\n\n  return {\n    isMinimumPlayersReached,\n    areAllRolesSet,\n    doesContainOneVillagerSidedRole,\n    doesContainOneWerewolfSidedRole,\n    areAdditionalCardsSetForThiefIfPresent,\n    areAdditionalCardsSetForActorIfPresent,\n    arePlayerGroupsSetForPrejudicedManipulatorIfPresent,\n    canCreateGame,\n    gameCreationValidationErrors,\n  };\n}\n\nexport { useCreateGameDtoValidation };"
    },
    "composables/api/game/useFetchGames.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "296",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/useFetchGames.ts(10,27): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "158",
            "159",
            "160",
            "161"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 35
            },
            "start": {
              "column": 41,
              "line": 10
            }
          }
        },
        {
          "id": "297",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/useFetchGames.ts(13,60): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "158",
            "159"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 22
            },
            "start": {
              "column": 108,
              "line": 13
            }
          }
        },
        {
          "id": "298",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/useFetchGames.ts(13,60): error TS2366: Function lacks ending return statement and return type does not include 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "158",
            "159"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 19
            },
            "start": {
              "column": 9,
              "line": 14
            }
          }
        },
        {
          "id": "299",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  \"/games\",\n  Object {\n    \"body\": \"{\"players\":[]}\",\n    \"method\": \"POST\",\n  },\n], but it was called with \"\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "158"
          ],
          "coveredBy": [
            "158",
            "159"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 15
            },
            "start": {
              "column": 54,
              "line": 15
            }
          }
        },
        {
          "id": "300",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  \"/games\",\n  Object {\n    \"body\": \"{\"players\":[]}\",\n    \"method\": \"POST\",\n  },\n], but it was called with \"/games\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "158"
          ],
          "coveredBy": [
            "158",
            "159"
          ],
          "location": {
            "end": {
              "column": 8,
              "line": 18
            },
            "start": {
              "column": 64,
              "line": 15
            }
          }
        },
        {
          "id": "301",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "composables/api/game/useFetchGames.ts(16,9): error TS2322: Type '\"\"' is not assignable to type '\"GET\" | \"HEAD\" | \"PATCH\" | \"POST\" | \"PUT\" | \"DELETE\" | \"CONNECT\" | \"OPTIONS\" | \"TRACE\" | \"get\" | \"head\" | \"patch\" | \"post\" | \"put\" | \"delete\" | \"connect\" | \"options\" | \"trace\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "158",
            "159"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 16
            },
            "start": {
              "column": 17,
              "line": 16
            }
          }
        },
        {
          "id": "302",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/useFetchGames.ts(13,60): error TS2366: Function lacks ending return statement and return type does not include 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "159"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 21
            },
            "start": {
              "column": 21,
              "line": 19
            }
          }
        },
        {
          "id": "303",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/useFetchGames.ts(24,43): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "160",
            "161"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 30
            },
            "start": {
              "column": 91,
              "line": 24
            }
          }
        },
        {
          "id": "304",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/useFetchGames.ts(24,43): error TS2366: Function lacks ending return statement and return type does not include 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "160",
            "161"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 27
            },
            "start": {
              "column": 9,
              "line": 25
            }
          }
        },
        {
          "id": "305",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  \"/games/game-id\",\n  Object {\n    \"method\": \"GET\",\n  },\n], but it was called with \"\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "160"
          ],
          "coveredBy": [
            "160",
            "161"
          ],
          "location": {
            "end": {
              "column": 72,
              "line": 26
            },
            "start": {
              "column": 54,
              "line": 26
            }
          }
        },
        {
          "id": "306",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  \"/games/game-id\",\n  Object {\n    \"method\": \"GET\",\n  },\n], but it was called with \"/games/game-id\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "160"
          ],
          "coveredBy": [
            "160",
            "161"
          ],
          "location": {
            "end": {
              "column": 91,
              "line": 26
            },
            "start": {
              "column": 74,
              "line": 26
            }
          }
        },
        {
          "id": "307",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "composables/api/game/useFetchGames.ts(26,76): error TS2322: Type '\"\"' is not assignable to type '\"GET\" | \"HEAD\" | \"PATCH\" | \"POST\" | \"PUT\" | \"DELETE\" | \"CONNECT\" | \"OPTIONS\" | \"TRACE\" | \"get\" | \"head\" | \"patch\" | \"post\" | \"put\" | \"delete\" | \"connect\" | \"options\" | \"trace\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "160",
            "161"
          ],
          "location": {
            "end": {
              "column": 89,
              "line": 26
            },
            "start": {
              "column": 84,
              "line": 26
            }
          }
        },
        {
          "id": "308",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/useFetchGames.ts(24,43): error TS2366: Function lacks ending return statement and return type does not include 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "161"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 29
            },
            "start": {
              "column": 21,
              "line": 27
            }
          }
        },
        {
          "id": "309",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "composables/api/game/useFetchGames.ts(31,3): error TS2739: Type '{}' is missing the following properties from type 'UseFetchGames': createGame, getGame\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "158",
            "159",
            "160",
            "161"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 34
            },
            "start": {
              "column": 10,
              "line": 31
            }
          }
        }
      ],
      "source": "import type { CreateGameDto } from \"~/composables/api/game/dto/create-game/create-game.dto\";\nimport type { Game } from \"~/composables/api/game/types/game.class\";\nimport { useWerewolvesAssistantApi } from \"~/composables/api/useWerewolvesAssistantApi\";\n\ntype UseFetchGames = {\n  createGame: (createGameDto: CreateGameDto) => Promise<ReturnType<typeof $fetch<Game>> | null>;\n  getGame: (gameId: string) => Promise<ReturnType<typeof $fetch<Game>> | null>;\n};\n\nfunction useFetchGames(): UseFetchGames {\n  const { fetchWerewolvesAssistantApi } = useWerewolvesAssistantApi();\n\n  async function createGame(createGameDto: CreateGameDto): Promise<ReturnType<typeof $fetch<Game>> | null> {\n    try {\n      return await fetchWerewolvesAssistantApi<Game>(`/games`, {\n        method: \"POST\",\n        body: JSON.stringify(createGameDto),\n      });\n    } catch (error) {\n      return null;\n    }\n  }\n\n  async function getGame(gameId: string): Promise<ReturnType<typeof $fetch<Game>> | null> {\n    try {\n      return await fetchWerewolvesAssistantApi<Game>(`/games/${gameId}`, { method: \"GET\" });\n    } catch (error) {\n      return null;\n    }\n  }\n  return {\n    createGame,\n    getGame,\n  };\n}\n\nexport { useFetchGames };"
    },
    "composables/api/game/useFetchRandomGameComposition.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "310",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/useFetchRandomGameComposition.ts(16,43): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "182"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 25
            },
            "start": {
              "column": 73,
              "line": 16
            }
          }
        },
        {
          "id": "311",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/useFetchRandomGameComposition.ts(19,84): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "182"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 23
            },
            "start": {
              "column": 149,
              "line": 19
            }
          }
        },
        {
          "id": "312",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  \"/games/random-composition?stringifiedQuery\",\n  Object {\n    \"method\": \"GET\",\n  },\n], but it was called with \"\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "182"
          ],
          "coveredBy": [
            "182"
          ],
          "location": {
            "end": {
              "column": 117,
              "line": 22
            },
            "start": {
              "column": 70,
              "line": 22
            }
          }
        },
        {
          "id": "313",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  \"/games/random-composition?stringifiedQuery\",\n  Object {\n    \"method\": \"GET\",\n  },\n], but it was called with \"/games/random-composition?stringifiedQuery\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "182"
          ],
          "coveredBy": [
            "182"
          ],
          "location": {
            "end": {
              "column": 136,
              "line": 22
            },
            "start": {
              "column": 119,
              "line": 22
            }
          }
        },
        {
          "id": "314",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "composables/api/game/useFetchRandomGameComposition.ts(22,121): error TS2322: Type '\"\"' is not assignable to type '\"GET\" | \"HEAD\" | \"PATCH\" | \"POST\" | \"PUT\" | \"DELETE\" | \"CONNECT\" | \"OPTIONS\" | \"TRACE\" | \"get\" | \"head\" | \"patch\" | \"post\" | \"put\" | \"delete\" | \"connect\" | \"options\" | \"trace\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "182"
          ],
          "location": {
            "end": {
              "column": 134,
              "line": 22
            },
            "start": {
              "column": 129,
              "line": 22
            }
          }
        },
        {
          "id": "315",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "composables/api/game/useFetchRandomGameComposition.ts(24,3): error TS2741: Property 'fetchRandomGameComposition' is missing in type '{}' but required in type 'UseFetchRandomGameComposition'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "182"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 24
            },
            "start": {
              "column": 10,
              "line": 24
            }
          }
        }
      ],
      "source": "import { stringify } from \"qs\";\n\nimport type { CreateGamePlayerDto } from \"~/composables/api/game/dto/create-game/create-game-player/create-game-player.dto\";\nimport { useWerewolvesAssistantApi } from \"~/composables/api/useWerewolvesAssistantApi\";\n\ntype GetRandomGameCompositionQuery = {\n  players: { name: string }[];\n};\n\ntype UseFetchRandomGameComposition = {\n  fetchRandomGameComposition: (\n    query: GetRandomGameCompositionQuery,\n  ) => Promise<ReturnType<typeof $fetch<CreateGamePlayerDto[] | null>>>;\n};\n\nfunction useFetchRandomGameComposition(): UseFetchRandomGameComposition {\n  const { fetchWerewolvesAssistantApi } = useWerewolvesAssistantApi();\n\n  async function fetchRandomGameComposition(query: GetRandomGameCompositionQuery): Promise<ReturnType<typeof $fetch<CreateGamePlayerDto[] | null>>> {\n    const stringifiedQuery = stringify(query);\n\n    return fetchWerewolvesAssistantApi<CreateGamePlayerDto[] | null>(`/games/random-composition?${stringifiedQuery}`, { method: \"GET\" });\n  }\n  return { fetchRandomGameComposition };\n}\n\nexport { useFetchRandomGameComposition };"
    },
    "composables/api/role/useFetchRoles.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "316",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/role/useFetchRoles.ts(8,27): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "184",
            "185",
            "192",
            "193",
            "194"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 19
            },
            "start": {
              "column": 41,
              "line": 8
            }
          }
        },
        {
          "id": "317",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/role/useFetchRoles.ts(11,32): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "184",
            "185"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 17
            },
            "start": {
              "column": 82,
              "line": 11
            }
          }
        },
        {
          "id": "318",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/role/useFetchRoles.ts(11,32): error TS2366: Function lacks ending return statement and return type does not include 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "184",
            "185"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 14
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "319",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  \"/roles\",\n  Object {\n    \"method\": \"GET\",\n  },\n], but it was called with \"\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "184"
          ],
          "coveredBy": [
            "184",
            "185"
          ],
          "location": {
            "end": {
              "column": 64,
              "line": 13
            },
            "start": {
              "column": 56,
              "line": 13
            }
          }
        },
        {
          "id": "320",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  \"/roles\",\n  Object {\n    \"method\": \"GET\",\n  },\n], but it was called with \"/roles\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "184"
          ],
          "coveredBy": [
            "184",
            "185"
          ],
          "location": {
            "end": {
              "column": 83,
              "line": 13
            },
            "start": {
              "column": 66,
              "line": 13
            }
          }
        },
        {
          "id": "321",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "composables/api/role/useFetchRoles.ts(13,68): error TS2322: Type '\"\"' is not assignable to type '\"GET\" | \"HEAD\" | \"PATCH\" | \"POST\" | \"PUT\" | \"DELETE\" | \"CONNECT\" | \"OPTIONS\" | \"TRACE\" | \"get\" | \"head\" | \"patch\" | \"post\" | \"put\" | \"delete\" | \"connect\" | \"options\" | \"trace\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "184",
            "185"
          ],
          "location": {
            "end": {
              "column": 81,
              "line": 13
            },
            "start": {
              "column": 76,
              "line": 13
            }
          }
        },
        {
          "id": "322",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/role/useFetchRoles.ts(11,32): error TS2366: Function lacks ending return statement and return type does not include 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "185"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 16
            },
            "start": {
              "column": 21,
              "line": 14
            }
          }
        },
        {
          "id": "323",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "composables/api/role/useFetchRoles.ts(18,3): error TS2741: Property 'fetchRoles' is missing in type '{}' but required in type 'UseFetchRoles'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "184",
            "185",
            "192",
            "193",
            "194"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 18
            },
            "start": {
              "column": 10,
              "line": 18
            }
          }
        }
      ],
      "source": "import type { Role } from \"~/composables/api/role/types/role.class\";\nimport { useWerewolvesAssistantApi } from \"~/composables/api/useWerewolvesAssistantApi\";\n\ntype UseFetchRoles = {\n  fetchRoles: () => Promise<ReturnType<typeof $fetch<Role[]>> | null>;\n};\n\nfunction useFetchRoles(): UseFetchRoles {\n  const { fetchWerewolvesAssistantApi } = useWerewolvesAssistantApi();\n\n  async function fetchRoles(): Promise<ReturnType<typeof $fetch<Role[]>> | null> {\n    try {\n      return await fetchWerewolvesAssistantApi<Role[]>(`/roles`, { method: \"GET\" });\n    } catch (error) {\n      return null;\n    }\n  }\n  return { fetchRoles };\n}\n\nexport { useFetchRoles };"
    },
    "composables/api/role/useRoleName.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "324",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/role/useRoleName.ts(7,25): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "202"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 14
            },
            "start": {
              "column": 37,
              "line": 7
            }
          }
        },
        {
          "id": "325",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/role/useRoleName.ts(10,51): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "202"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 12
            },
            "start": {
              "column": 58,
              "line": 10
            }
          }
        },
        {
          "id": "326",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Snapshot `About Available Role Description Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "94"
          ],
          "coveredBy": [
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "202"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 11
            },
            "start": {
              "column": 14,
              "line": 11
            }
          }
        },
        {
          "id": "327",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "composables/api/role/useRoleName.ts(13,3): error TS2741: Property 'getRoleNameLabel' is missing in type '{}' but required in type 'UseRoleName'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "202"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 13
            },
            "start": {
              "column": 10,
              "line": 13
            }
          }
        }
      ],
      "source": "import type { RoleNames } from \"~/composables/api/role/enums/role.enums\";\n\ntype UseRoleName = {\n  getRoleNameLabel: (roleName: RoleNames) => string;\n};\n\nfunction useRoleName(): UseRoleName {\n  const { t } = useI18n();\n\n  function getRoleNameLabel(roleName: RoleNames): string {\n    return t(`shared.role.name.${roleName}`);\n  }\n  return { getRoleNameLabel };\n}\n\nexport { useRoleName };"
    },
    "composables/api/useWerewolvesAssistantApi.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "328",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/useWerewolvesAssistantApi.ts(10,39): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "192",
            "193",
            "194",
            "203"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 65,
              "line": 10
            }
          }
        },
        {
          "id": "329",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  Object {\n    \"baseURL\": \"http://127.0.0.1\",\n    \"headers\": Object {\n      \"Content-Type\": \"application/json\",\n    },\n    \"onResponseError\": Any<Function>,\n  },\n], but it was called with Object {}",
          "status": "Killed",
          "testsCompleted": 14,
          "static": false,
          "killedBy": [
            "203"
          ],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "192",
            "193",
            "194",
            "203"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 19
            },
            "start": {
              "column": 60,
              "line": 15
            }
          }
        },
        {
          "id": "330",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  Object {\n    \"baseURL\": \"http://127.0.0.1\",\n    \"headers\": Object {\n      \"Content-Type\": \"application/json\",\n    },\n    \"onResponseError\": Any<Function>,\n  },\n], but it was called with Object {\n  \"baseURL\": \"http://127.0.0.1\",\n  \"headers\": Object {},\n  \"onResponseError\": [Function handleWerewolvesAssistantApiError],\n}",
          "status": "Killed",
          "testsCompleted": 14,
          "static": false,
          "killedBy": [
            "203"
          ],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "192",
            "193",
            "194",
            "203"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 17
            },
            "start": {
              "column": 14,
              "line": 17
            }
          }
        },
        {
          "id": "331",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  Object {\n    \"baseURL\": \"http://127.0.0.1\",\n    \"headers\": Object {\n      \"Content-Type\": \"application/json\",\n    },\n    \"onResponseError\": Any<Function>,\n  },\n], but it was called with Object {\n  \"baseURL\": \"http://127.0.0.1\",\n  \"headers\": Object {\n    \"Content-Type\": \"\",\n  },\n  \"onResponseError\": [Function handleWerewolvesAssistantApiError],\n}",
          "status": "Killed",
          "testsCompleted": 14,
          "static": false,
          "killedBy": [
            "203"
          ],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "192",
            "193",
            "194",
            "203"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 17
            },
            "start": {
              "column": 32,
              "line": 17
            }
          }
        },
        {
          "id": "332",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "composables/api/useWerewolvesAssistantApi.ts(21,3): error TS2741: Property 'fetchWerewolvesAssistantApi' is missing in type '{}' but required in type 'UseWerewolvesAssistantApi'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "192",
            "193",
            "194",
            "203"
          ],
          "location": {
            "end": {
              "column": 41,
              "line": 21
            },
            "start": {
              "column": 10,
              "line": 21
            }
          }
        }
      ],
      "source": "import { createFetch } from \"ofetch\";\n\nimport { useWerewolvesAssistantApiError } from \"~/composables/api/error/useWerewolvesAssistantApiError\";\nimport { removeTrailingSlashes } from \"~/utils/url.utils\";\n\ntype UseWerewolvesAssistantApi = {\n  fetchWerewolvesAssistantApi: typeof $fetch;\n};\n\nfunction useWerewolvesAssistantApi(): UseWerewolvesAssistantApi {\n  const config = useRuntimeConfig();\n  const { baseUrl } = config.public.werewolvesAssistantApi;\n  const { handleWerewolvesAssistantApiError } = useWerewolvesAssistantApiError();\n\n  const fetchWerewolvesAssistantApi = createFetch().create({\n    baseURL: removeTrailingSlashes(baseUrl),\n    headers: { \"Content-Type\": \"application/json\" },\n    onResponseError: handleWerewolvesAssistantApiError,\n  });\n\n  return { fetchWerewolvesAssistantApi };\n}\n\nexport { useWerewolvesAssistantApi };"
    },
    "composables/vue-prime/constants/vue-prime.constants.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "333",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 6
            },
            "start": {
              "column": 62,
              "line": 3
            }
          }
        },
        {
          "id": "334",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 17,
              "line": 5
            },
            "start": {
              "column": 13,
              "line": 5
            }
          }
        }
      ],
      "source": "import type { ToastMessageOptions } from \"primevue/toast\";\n\nconst DEFAULT_VUE_PRIME_TOAST_OPTIONS: ToastMessageOptions = {\n  life: 4000,\n  closable: true,\n};\n\nexport { DEFAULT_VUE_PRIME_TOAST_OPTIONS };"
    },
    "composables/vue-prime/useVuePrimeToasts.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "335",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/vue-prime/useVuePrimeToasts.ts(14,31): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "112",
            "113",
            "114",
            "115",
            "116",
            "192",
            "193",
            "194",
            "203"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 46
            },
            "start": {
              "column": 49,
              "line": 14
            }
          }
        },
        {
          "id": "336",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "112"
          ],
          "coveredBy": [
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 22
            },
            "start": {
              "column": 57,
              "line": 17
            }
          }
        },
        {
          "id": "337",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  Object {\n    \"closable\": true,\n    \"detail\": \"detail\",\n    \"life\": 4000,\n    \"summary\": \"summary\",\n  },\n], but it was called with Object {}",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "112"
          ],
          "coveredBy": [
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 21
            },
            "start": {
              "column": 15,
              "line": 18
            }
          }
        },
        {
          "id": "338",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "113"
          ],
          "coveredBy": [
            "113"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 26
            },
            "start": {
              "column": 64,
              "line": 24
            }
          }
        },
        {
          "id": "339",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  Object {\n    \"closable\": true,\n    \"detail\": \"detail\",\n    \"life\": 4000,\n    \"severity\": \"success\",\n    \"summary\": \"summary\",\n  },\n], but it was called with Object {\n  \"closable\": true,\n  \"life\": 4000,\n}",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "113"
          ],
          "coveredBy": [
            "113"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 25
            },
            "start": {
              "column": 14,
              "line": 25
            }
          }
        },
        {
          "id": "340",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "composables/vue-prime/useVuePrimeToasts.ts(25,16): error TS2322: Type '\"\"' is not assignable to type '\"success\" | \"info\" | \"warn\" | \"error\" | \"secondary\" | \"contrast\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "113"
          ],
          "location": {
            "end": {
              "column": 35,
              "line": 25
            },
            "start": {
              "column": 26,
              "line": 25
            }
          }
        },
        {
          "id": "341",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "114"
          ],
          "coveredBy": [
            "114"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 30
            },
            "start": {
              "column": 61,
              "line": 28
            }
          }
        },
        {
          "id": "342",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  Object {\n    \"closable\": true,\n    \"detail\": \"detail\",\n    \"life\": 4000,\n    \"severity\": \"info\",\n    \"summary\": \"summary\",\n  },\n], but it was called with Object {\n  \"closable\": true,\n  \"life\": 4000,\n}",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "114"
          ],
          "coveredBy": [
            "114"
          ],
          "location": {
            "end": {
              "column": 46,
              "line": 29
            },
            "start": {
              "column": 14,
              "line": 29
            }
          }
        },
        {
          "id": "343",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "composables/vue-prime/useVuePrimeToasts.ts(29,16): error TS2322: Type '\"\"' is not assignable to type '\"success\" | \"info\" | \"warn\" | \"error\" | \"secondary\" | \"contrast\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "114"
          ],
          "location": {
            "end": {
              "column": 32,
              "line": 29
            },
            "start": {
              "column": 26,
              "line": 29
            }
          }
        },
        {
          "id": "344",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "115"
          ],
          "coveredBy": [
            "115"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 34
            },
            "start": {
              "column": 61,
              "line": 32
            }
          }
        },
        {
          "id": "345",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  Object {\n    \"closable\": true,\n    \"detail\": \"detail\",\n    \"life\": 4000,\n    \"severity\": \"warn\",\n    \"summary\": \"summary\",\n  },\n], but it was called with Object {\n  \"closable\": true,\n  \"life\": 4000,\n}",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "115"
          ],
          "coveredBy": [
            "115"
          ],
          "location": {
            "end": {
              "column": 46,
              "line": 33
            },
            "start": {
              "column": 14,
              "line": 33
            }
          }
        },
        {
          "id": "346",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "composables/vue-prime/useVuePrimeToasts.ts(33,16): error TS2322: Type '\"\"' is not assignable to type '\"success\" | \"info\" | \"warn\" | \"error\" | \"secondary\" | \"contrast\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "115"
          ],
          "location": {
            "end": {
              "column": 32,
              "line": 33
            },
            "start": {
              "column": 26,
              "line": 33
            }
          }
        },
        {
          "id": "347",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "116"
          ],
          "coveredBy": [
            "116"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 38
            },
            "start": {
              "column": 62,
              "line": 36
            }
          }
        },
        {
          "id": "348",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once with Array [\n  Object {\n    \"closable\": true,\n    \"detail\": \"detail\",\n    \"life\": 4000,\n    \"severity\": \"error\",\n    \"summary\": \"summary\",\n  },\n], but it was called with Object {\n  \"closable\": true,\n  \"life\": 4000,\n}",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "116"
          ],
          "coveredBy": [
            "116"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 37
            },
            "start": {
              "column": 14,
              "line": 37
            }
          }
        },
        {
          "id": "349",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "composables/vue-prime/useVuePrimeToasts.ts(37,16): error TS2322: Type '\"\"' is not assignable to type '\"success\" | \"info\" | \"warn\" | \"error\" | \"secondary\" | \"contrast\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "116"
          ],
          "location": {
            "end": {
              "column": 33,
              "line": 37
            },
            "start": {
              "column": 26,
              "line": 37
            }
          }
        },
        {
          "id": "350",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "composables/vue-prime/useVuePrimeToasts.ts(39,3): error TS2739: Type '{}' is missing the following properties from type 'UseVuePrimeToasts': addToast, addSuccessToast, addInfoToast, addWarnToast, addErrorToast\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "112",
            "113",
            "114",
            "115",
            "116",
            "192",
            "193",
            "194",
            "203"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 45
            },
            "start": {
              "column": 10,
              "line": 39
            }
          }
        }
      ],
      "source": "import type { ToastMessageOptions } from \"primevue/toast\";\nimport { useToast } from \"primevue/usetoast\";\n\nimport { DEFAULT_VUE_PRIME_TOAST_OPTIONS } from \"~/composables/vue-prime/constants/vue-prime.constants\";\n\ntype UseVuePrimeToasts = {\n  addToast: (options: ToastMessageOptions) => void;\n  addSuccessToast: (options: ToastMessageOptions) => void;\n  addInfoToast: (options: ToastMessageOptions) => void;\n  addWarnToast: (options: ToastMessageOptions) => void;\n  addErrorToast: (options: ToastMessageOptions) => void;\n};\n\nfunction useVuePrimeToasts(): UseVuePrimeToasts {\n  const toast = useToast();\n\n  function addToast(options: ToastMessageOptions): void {\n    toast.add({\n      ...DEFAULT_VUE_PRIME_TOAST_OPTIONS,\n      ...options,\n    });\n  }\n\n  function addSuccessToast(options: ToastMessageOptions): void {\n    addToast({ severity: \"success\", ...options });\n  }\n\n  function addInfoToast(options: ToastMessageOptions): void {\n    addToast({ severity: \"info\", ...options });\n  }\n\n  function addWarnToast(options: ToastMessageOptions): void {\n    addToast({ severity: \"warn\", ...options });\n  }\n\n  function addErrorToast(options: ToastMessageOptions): void {\n    addToast({ severity: \"error\", ...options });\n  }\n  return {\n    addToast,\n    addSuccessToast,\n    addInfoToast,\n    addWarnToast,\n    addErrorToast,\n  };\n}\n\nexport { useVuePrimeToasts };"
    },
    "pages/index.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "351",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "The macro definePageMeta from Nuxt is breaking Stryker, so we ignore it.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 33,
              "line": 60
            },
            "start": {
              "column": 16,
              "line": 60
            }
          }
        },
        {
          "id": "352",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "The macro definePageMeta from Nuxt is breaking Stryker, so we ignore it.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 31,
              "line": 60
            },
            "start": {
              "column": 26,
              "line": 60
            }
          }
        }
      ],
      "source": "<template>\n  <div class=\"container-fluid d-flex flex-column\">\n    <div class=\"align-items-center container-fluid d-flex flex-column flex-grow-1 justify-content-center\">\n      <div class=\"col-12 text-center\">\n        <NuxtImg\n          :alt=\"$t('pages.index.werewolvesAssistantLogo')\"\n          sizes=\"lg:200px\"\n          src=\"/img/logo/square/werewolves-logo.png\"\n        />\n      </div>\n\n      <div class=\"col-12 text-center\">\n        <h1\n          id=\"title\"\n          :aria-label=\"$t('shared.werewolvesAssistant')\"\n          class=\"mt-0\"\n        >\n          {{ $t('shared.werewolvesAssistant') }}\n        </h1>\n      </div>\n\n      <div class=\"col-12 col-lg-3\">\n        <NuxtLink\n          :aria-label=\"$t('pages.index.play')\"\n          class=\"p-button p-button-primary p-button-raised w-100\"\n          to=\"/game-lobby\"\n        >\n          <span class=\"fa fa-2x fa-play-circle me-2\"/>\n\n          <span class=\"fs-3 fw-bold text-uppercase\">\n            {{ $t('pages.index.play') }}\n          </span>\n        </NuxtLink>\n      </div>\n\n      <div class=\"col-12 col-lg-3 mt-4\">\n        <NuxtLink\n          :aria-label=\"$t('pages.index.about')\"\n          class=\"p-button p-button-secondary w-100\"\n          to=\"/about\"\n        >\n          <span class=\"fa fa-question me-2\"/>\n\n          <span>\n            {{ $t('pages.index.about') }}\n          </span>\n        </NuxtLink>\n      </div>\n    </div>\n\n    <hr class=\"w-100\">\n\n    <IndexFooter/>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport IndexFooter from \"~/components/pages/index/IndexFooter.vue\";\n\ndefinePageMeta({ layout: false });\n</script>\n\n<style>\n#title {\n  font-size: 4rem;\n}\n</style>"
    },
    "stores/game/create-game-dto/useCreateGameDtoStore.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "356",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected _CreateGameDto{ players: [], …(1) } to strictly equal _CreateGameDto{ …(2) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "88"
          ],
          "coveredBy": [
            "88"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 13
            },
            "start": {
              "column": 70,
              "line": 11
            }
          }
        },
        {
          "id": "357",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected _CreateGameDto{ …(2) } to strictly equal _CreateGameDto{ players: [], …(1) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "89"
          ],
          "coveredBy": [
            "89"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 17
            },
            "start": {
              "column": 39,
              "line": 15
            }
          }
        },
        {
          "id": "358",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "stores/game/create-game-dto/useCreateGameDtoStore.ts(16,48): error TS2345: Argument of type '{}' is not assignable to parameter of type 'CreateGameDto'.\n  Property 'players' is missing in type '{}' but required in type 'CreateGameDto'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "89"
          ],
          "location": {
            "end": {
              "column": 63,
              "line": 16
            },
            "start": {
              "column": 48,
              "line": 16
            }
          }
        },
        {
          "id": "359",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "stores/game/create-game-dto/useCreateGameDtoStore.ts(16,60): error TS2322: Type 'string' is not assignable to type 'CreateGamePlayerDto'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "89"
          ],
          "location": {
            "end": {
              "column": 61,
              "line": 16
            },
            "start": {
              "column": 59,
              "line": 16
            }
          }
        },
        {
          "id": "360",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected _CreateGameDto{ players: [], …(1) } to strictly equal _CreateGameDto{ …(2) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "90"
          ],
          "coveredBy": [
            "90"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 21
            },
            "start": {
              "column": 72,
              "line": 19
            }
          }
        },
        {
          "id": "361",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected [] to strictly equal [ _CreateGamePlayerDto{ …(4) }, …(2) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "91"
          ],
          "coveredBy": [
            "91"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 25
            },
            "start": {
              "column": 76,
              "line": 23
            }
          }
        },
        {
          "id": "362",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "stores/game/create-game-dto/useCreateGameDtoStore.ts(24,5): error TS2322: Type 'undefined[]' is not assignable to type '{ name: string; role: { name?: RoleNames | undefined; }; side: { original?: RoleSides | undefined; current?: RoleSides | undefined; }; group?: string | undefined; }[]'.\n  Type 'undefined' is not assignable to type '{ name: string; role: { name?: RoleNames | undefined; }; side: { original?: RoleSides | undefined; current?: RoleSides | undefined; }; group?: string | undefined; }'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "91"
          ],
          "location": {
            "end": {
              "column": 91,
              "line": 24
            },
            "start": {
              "column": 47,
              "line": 24
            }
          }
        },
        {
          "id": "363",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected _CreateGameDto{ …(2) } to strictly equal _CreateGameDto{ …(2) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "92"
          ],
          "coveredBy": [
            "92",
            "93"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 32
            },
            "start": {
              "column": 68,
              "line": 27
            }
          }
        },
        {
          "id": "364",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected _CreateGameDto{ …(2) } to strictly equal _CreateGameDto{ …(2) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "92"
          ],
          "coveredBy": [
            "92",
            "93"
          ],
          "location": {
            "end": {
              "column": 99,
              "line": 28
            },
            "start": {
              "column": 63,
              "line": 28
            }
          }
        },
        {
          "id": "365",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected _CreateGameDto{ …(2) } to strictly equal _CreateGameDto{ …(2) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "92"
          ],
          "coveredBy": [
            "92",
            "93"
          ],
          "location": {
            "end": {
              "column": 99,
              "line": 28
            },
            "start": {
              "column": 73,
              "line": 28
            }
          }
        },
        {
          "id": "366",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected _CreateGameDto{ …(2) } to strictly equal _CreateGameDto{ …(2) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "92"
          ],
          "coveredBy": [
            "92",
            "93"
          ],
          "location": {
            "end": {
              "column": 99,
              "line": 28
            },
            "start": {
              "column": 73,
              "line": 28
            }
          }
        },
        {
          "id": "367",
          "mutatorName": "EqualityOperator",
          "replacement": "player.name !== playerName",
          "statusReason": "expected _CreateGameDto{ …(2) } to strictly equal _CreateGameDto{ …(2) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "92"
          ],
          "coveredBy": [
            "92",
            "93"
          ],
          "location": {
            "end": {
              "column": 99,
              "line": 28
            },
            "start": {
              "column": 73,
              "line": 28
            }
          }
        },
        {
          "id": "368",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected _CreateGameDto{ …(2) } to strictly equal _CreateGameDto{ …(2) }",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "93"
          ],
          "coveredBy": [
            "92",
            "93"
          ],
          "location": {
            "end": {
              "column": 27,
              "line": 29
            },
            "start": {
              "column": 9,
              "line": 29
            }
          }
        },
        {
          "id": "369",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected _CreateGameDto{ …(2) } to strictly equal _CreateGameDto{ …(2) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "92"
          ],
          "coveredBy": [
            "92",
            "93"
          ],
          "location": {
            "end": {
              "column": 27,
              "line": 29
            },
            "start": {
              "column": 9,
              "line": 29
            }
          }
        },
        {
          "id": "370",
          "mutatorName": "EqualityOperator",
          "replacement": "playerIndex === -1",
          "statusReason": "expected _CreateGameDto{ …(2) } to strictly equal _CreateGameDto{ …(2) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "92"
          ],
          "coveredBy": [
            "92",
            "93"
          ],
          "location": {
            "end": {
              "column": 27,
              "line": 29
            },
            "start": {
              "column": 9,
              "line": 29
            }
          }
        },
        {
          "id": "371",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "expected _CreateGameDto{ …(2) } to strictly equal _CreateGameDto{ …(2) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "92"
          ],
          "coveredBy": [
            "92",
            "93"
          ],
          "location": {
            "end": {
              "column": 27,
              "line": 29
            },
            "start": {
              "column": 25,
              "line": 29
            }
          }
        },
        {
          "id": "372",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected _CreateGameDto{ …(2) } to strictly equal _CreateGameDto{ …(2) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "92"
          ],
          "coveredBy": [
            "92"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 31
            },
            "start": {
              "column": 29,
              "line": 29
            }
          }
        },
        {
          "id": "354",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "stores/game/create-game-dto/useCreateGameDtoStore.ts(9,65): error TS2345: Argument of type '{}' is not assignable to parameter of type 'CreateGameDto'.\n  Property 'players' is missing in type '{}' but required in type 'CreateGameDto'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "107",
            "108",
            "109",
            "110",
            "111",
            "162",
            "163",
            "164",
            "165",
            "197",
            "198"
          ],
          "location": {
            "end": {
              "column": 80,
              "line": 9
            },
            "start": {
              "column": 65,
              "line": 9
            }
          }
        },
        {
          "id": "353",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "tests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts(41,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts(52,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts(68,28): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts(77,28): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts(94,30): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts(110,145): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts(127,37): error TS2339: Property 'setPlayersToCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts(132,30): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts(146,37): error TS2339: Property 'setPlayersToCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyStartGameButton/GameLobbyStartGameButton.nuxt.spec.ts(92,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyStartGameButton/GameLobbyStartGameButton.nuxt.spec.ts(103,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyStartGameButton/GameLobbyStartGameButton.nuxt.spec.ts(113,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyStartGameButton/GameLobbyStartGameButton.nuxt.spec.ts(122,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyStartGameButton/GameLobbyStartGameButton.nuxt.spec.ts(132,28): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyStartGameButton/GameLobbyStartGameButton.nuxt.spec.ts(147,111): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyHeader.nuxt.spec.ts(89,35): error TS2339: Property 'addPlayerToCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyHeader.nuxt.spec.ts(103,35): error TS2339: Property 'addPlayerToCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts(41,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts(50,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts(63,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts(80,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts(89,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts(103,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts(117,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts(144,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts(153,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyPlayersParty/GameLobbyPlayersParty.nuxt.spec.ts(36,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyPlayersParty/GameLobbyPlayerCard/GameLobbyPlayerCard.nuxt.spec.ts(55,33): error TS2339: Property 'removePlayerFromCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/pages/game-lobby/game-lobby.nuxt.spec.ts(23,33): error TS2339: Property 'resetCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(18,31): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(32,26): error TS2339: Property 'setCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(34,33): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(41,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(49,26): error TS2339: Property 'resetCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(51,33): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(61,26): error TS2339: Property 'addPlayerToCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(63,33): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(75,26): error TS2339: Property 'setPlayersToCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(77,33): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(89,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(96,26): error TS2339: Property 'removePlayerFromCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(98,33): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(108,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(111,26): error TS2339: Property 'removePlayerFromCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(113,33): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, {}, {}, {}>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "107",
            "108",
            "109",
            "110",
            "111",
            "162",
            "163",
            "164",
            "165",
            "197",
            "198"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 41
            },
            "start": {
              "column": 75,
              "line": 8
            }
          }
        },
        {
          "id": "355",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "stores/game/create-game-dto/useCreateGameDtoStore.ts(9,77): error TS2322: Type 'string' is not assignable to type 'CreateGamePlayerDto'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "107",
            "108",
            "109",
            "110",
            "111",
            "162",
            "163",
            "164",
            "165",
            "197",
            "198"
          ],
          "location": {
            "end": {
              "column": 78,
              "line": 9
            },
            "start": {
              "column": 76,
              "line": 9
            }
          }
        },
        {
          "id": "373",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "tests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts(41,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts(52,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts(68,28): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts(77,28): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts(94,30): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts(110,145): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts(127,37): error TS2339: Property 'setPlayersToCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts(132,30): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts(146,37): error TS2339: Property 'setPlayersToCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyStartGameButton/GameLobbyStartGameButton.nuxt.spec.ts(92,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyStartGameButton/GameLobbyStartGameButton.nuxt.spec.ts(103,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyStartGameButton/GameLobbyStartGameButton.nuxt.spec.ts(113,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyStartGameButton/GameLobbyStartGameButton.nuxt.spec.ts(122,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyStartGameButton/GameLobbyStartGameButton.nuxt.spec.ts(132,28): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyStartGameButton/GameLobbyStartGameButton.nuxt.spec.ts(147,111): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyHeader.nuxt.spec.ts(89,35): error TS2339: Property 'addPlayerToCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyHeader.nuxt.spec.ts(103,35): error TS2339: Property 'addPlayerToCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts(41,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts(50,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts(63,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts(80,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts(89,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts(103,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts(117,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts(144,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts(153,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyPlayersParty/GameLobbyPlayersParty.nuxt.spec.ts(36,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/game-lobby/GameLobbyPlayersParty/GameLobbyPlayerCard/GameLobbyPlayerCard.nuxt.spec.ts(55,33): error TS2339: Property 'removePlayerFromCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/pages/game-lobby/game-lobby.nuxt.spec.ts(23,33): error TS2339: Property 'resetCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(18,31): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(32,26): error TS2339: Property 'setCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(34,33): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(41,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(49,26): error TS2339: Property 'resetCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(51,33): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(61,26): error TS2339: Property 'addPlayerToCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(63,33): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(75,26): error TS2339: Property 'setPlayersToCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(77,33): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(89,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(96,26): error TS2339: Property 'removePlayerFromCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(98,33): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(108,26): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(111,26): error TS2339: Property 'removePlayerFromCreateGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts(113,33): error TS2339: Property 'createGameDto' does not exist on type 'Store<StoreIds.CREATE_GAME_DTO, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "107",
            "108",
            "109",
            "110",
            "111",
            "162",
            "163",
            "164",
            "165",
            "197",
            "198"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 40
            },
            "start": {
              "column": 10,
              "line": 33
            }
          }
        }
      ],
      "source": "import { defineStore } from \"pinia\";\nimport { ref } from \"vue\";\n\nimport { CreateGamePlayerDto } from \"~/composables/api/game/dto/create-game/create-game-player/create-game-player.dto\";\nimport { CreateGameDto } from \"~/composables/api/game/dto/create-game/create-game.dto\";\nimport { StoreIds } from \"~/stores/enums/store.enum\";\n\nconst useCreateGameDtoStore = defineStore(StoreIds.CREATE_GAME_DTO, () => {\n  const createGameDto = ref<CreateGameDto>(CreateGameDto.create({ players: [] }));\n\n  function setCreateGameDto(createGameDtoValue: CreateGameDto): void {\n    createGameDto.value = CreateGameDto.create(createGameDtoValue);\n  }\n\n  function resetCreateGameDto(): void {\n    createGameDto.value = CreateGameDto.create({ players: [] });\n  }\n\n  function addPlayerToCreateGameDto(player: CreateGamePlayerDto): void {\n    createGameDto.value.players.push(CreateGamePlayerDto.create(player));\n  }\n\n  function setPlayersToCreateGameDto(players: CreateGamePlayerDto[]): void {\n    createGameDto.value.players = players.map(player => CreateGamePlayerDto.create(player));\n  }\n\n  function removePlayerFromCreateGameDto(playerName: string): void {\n    const playerIndex = createGameDto.value.players.findIndex(player => player.name === playerName);\n    if (playerIndex !== -1) {\n      createGameDto.value.players = createGameDto.value.players.toSpliced(playerIndex, 1);\n    }\n  }\n  return {\n    createGameDto,\n    setCreateGameDto,\n    resetCreateGameDto,\n    addPlayerToCreateGameDto,\n    setPlayersToCreateGameDto,\n    removePlayerFromCreateGameDto,\n  };\n});\n\nexport { useCreateGameDtoStore };"
    },
    "stores/role/useRolesStore.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "374",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "tests/unit/specs/app.nuxt.spec.ts(28,23): error TS2339: Property 'fetchAndSetRoles' does not exist on type 'Store<StoreIds.ROLES, {}, {}, {}>'.\ntests/unit/specs/components/pages/about/AboutAvailableRoles/AboutAvailableRoles.nuxt.spec.ts(48,20): error TS2339: Property 'roles' does not exist on type 'Store<StoreIds.ROLES, {}, {}, {}>'.\ntests/unit/specs/components/pages/about/AboutAvailableRoles/AboutAvailableRoles.nuxt.spec.ts(78,20): error TS2339: Property 'roles' does not exist on type 'Store<StoreIds.ROLES, {}, {}, {}>'.\ntests/unit/specs/stores/role/useRolesStore.spec.ts(28,23): error TS2339: Property 'roles' does not exist on type 'Store<StoreIds.ROLES, {}, {}, {}>'.\ntests/unit/specs/stores/role/useRolesStore.spec.ts(29,23): error TS2339: Property 'fetchingRoleStatus' does not exist on type 'Store<StoreIds.ROLES, {}, {}, {}>'.\ntests/unit/specs/stores/role/useRolesStore.spec.ts(35,24): error TS2339: Property 'fetchAndSetRoles' does not exist on type 'Store<StoreIds.ROLES, {}, {}, {}>'.\ntests/unit/specs/stores/role/useRolesStore.spec.ts(48,24): error TS2339: Property 'fetchAndSetRoles' does not exist on type 'Store<StoreIds.ROLES, {}, {}, {}>'.\ntests/unit/specs/stores/role/useRolesStore.spec.ts(50,25): error TS2339: Property 'roles' does not exist on type 'Store<StoreIds.ROLES, {}, {}, {}>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "176",
            "177",
            "178",
            "192",
            "193",
            "194"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 25
            },
            "start": {
              "column": 57,
              "line": 9
            }
          }
        },
        {
          "id": "375",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "stores/role/useRolesStore.ts(12,58): error TS2345: Argument of type '\"\"' is not assignable to parameter of type 'AsyncDataRequestStatus'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "176",
            "177",
            "178",
            "192",
            "193",
            "194"
          ],
          "location": {
            "end": {
              "column": 64,
              "line": 12
            },
            "start": {
              "column": 58,
              "line": 12
            }
          }
        },
        {
          "id": "376",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expect(received).toHaveBeenCalledExactlyOnceWith(expected)\n\nExpected mock function to have been called exactly once, but it was called 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "177"
          ],
          "coveredBy": [
            "177",
            "178"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 19
            },
            "start": {
              "column": 52,
              "line": 15
            }
          }
        },
        {
          "id": "377",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "stores/role/useRolesStore.ts(16,5): error TS2322: Type '\"\"' is not assignable to type 'AsyncDataRequestStatus'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "177",
            "178"
          ],
          "location": {
            "end": {
              "column": 41,
              "line": 16
            },
            "start": {
              "column": 32,
              "line": 16
            }
          }
        },
        {
          "id": "378",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "stores/role/useRolesStore.ts(18,5): error TS2322: Type '\"\"' is not assignable to type 'AsyncDataRequestStatus'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "177",
            "178"
          ],
          "location": {
            "end": {
              "column": 41,
              "line": 18
            },
            "start": {
              "column": 32,
              "line": 18
            }
          }
        },
        {
          "id": "379",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "tests/unit/specs/app.nuxt.spec.ts(28,23): error TS2339: Property 'fetchAndSetRoles' does not exist on type 'Store<StoreIds.ROLES, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/about/AboutAvailableRoles/AboutAvailableRoles.nuxt.spec.ts(48,20): error TS2339: Property 'roles' does not exist on type 'Store<StoreIds.ROLES, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/components/pages/about/AboutAvailableRoles/AboutAvailableRoles.nuxt.spec.ts(78,20): error TS2339: Property 'roles' does not exist on type 'Store<StoreIds.ROLES, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/role/useRolesStore.spec.ts(28,23): error TS2339: Property 'roles' does not exist on type 'Store<StoreIds.ROLES, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/role/useRolesStore.spec.ts(29,23): error TS2339: Property 'fetchingRoleStatus' does not exist on type 'Store<StoreIds.ROLES, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/role/useRolesStore.spec.ts(35,24): error TS2339: Property 'fetchAndSetRoles' does not exist on type 'Store<StoreIds.ROLES, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/role/useRolesStore.spec.ts(48,24): error TS2339: Property 'fetchAndSetRoles' does not exist on type 'Store<StoreIds.ROLES, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\ntests/unit/specs/stores/role/useRolesStore.spec.ts(50,25): error TS2339: Property 'roles' does not exist on type 'Store<StoreIds.ROLES, _UnwrapAll<Pick<{}, never>>, Pick<{}, never>, Pick<{}, never>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "176",
            "177",
            "178",
            "192",
            "193",
            "194"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 24
            },
            "start": {
              "column": 10,
              "line": 20
            }
          }
        }
      ],
      "source": "import type { AsyncDataRequestStatus } from \"#app/composables/asyncData\";\nimport { defineStore } from \"pinia\";\nimport { ref } from \"vue\";\n\nimport type { Role } from \"~/composables/api/role/types/role.class\";\nimport { useFetchRoles } from \"~/composables/api/role/useFetchRoles\";\nimport { StoreIds } from \"~/stores/enums/store.enum\";\n\nconst useRolesStore = defineStore(StoreIds.ROLES, () => {\n  const { fetchRoles } = useFetchRoles();\n\n  const fetchingRoleStatus = ref<AsyncDataRequestStatus>(\"idle\");\n  const roles = ref<Role[] | null>(null);\n\n  async function fetchAndSetRoles(): Promise<void> {\n    fetchingRoleStatus.value = \"pending\";\n    roles.value = await fetchRoles();\n    fetchingRoleStatus.value = \"success\";\n  }\n  return {\n    roles,\n    fetchingRoleStatus,\n    fetchAndSetRoles,\n  };\n});\n\nexport { useRolesStore };"
    },
    "utils/constants/class-transformer.constants.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "380",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 6
            },
            "start": {
              "column": 76,
              "line": 3
            }
          }
        },
        {
          "id": "381",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 4
            },
            "start": {
              "column": 28,
              "line": 4
            }
          }
        },
        {
          "id": "382",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 5
            },
            "start": {
              "column": 24,
              "line": 5
            }
          }
        }
      ],
      "source": "import type { ClassTransformOptions } from \"class-transformer\";\n\nconst DEFAULT_PLAIN_TO_INSTANCE_OPTIONS: Readonly<ClassTransformOptions> = {\n  excludeExtraneousValues: true,\n  exposeDefaultValues: true,\n};\n\nexport { DEFAULT_PLAIN_TO_INSTANCE_OPTIONS };"
    },
    "utils/url.utils.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "383",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "utils/url.utils.ts(1,46): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "135",
            "136",
            "137",
            "138",
            "139",
            "172",
            "192",
            "193",
            "194",
            "203",
            "208"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 3
            },
            "start": {
              "column": 53,
              "line": 1
            }
          }
        },
        {
          "id": "384",
          "mutatorName": "Regex",
          "replacement": "/\\/+/u",
          "statusReason": "Snapshot `Role Image Component > should render component and match snapshot when mounted. 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "135"
          ],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "135",
            "136",
            "137",
            "138",
            "139",
            "172",
            "192",
            "193",
            "194",
            "203",
            "208"
          ],
          "location": {
            "end": {
              "column": 29,
              "line": 2
            },
            "start": {
              "column": 22,
              "line": 2
            }
          }
        },
        {
          "id": "385",
          "mutatorName": "Regex",
          "replacement": "/\\/$/u",
          "statusReason": "expected 'https://example.com//' to be 'https://example.com' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 21,
          "static": false,
          "killedBy": [
            "208"
          ],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "135",
            "136",
            "137",
            "138",
            "139",
            "172",
            "192",
            "193",
            "194",
            "203",
            "208"
          ],
          "location": {
            "end": {
              "column": 29,
              "line": 2
            },
            "start": {
              "column": 22,
              "line": 2
            }
          }
        },
        {
          "id": "386",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "expected 'https://example.comStryker was here!' to be 'https://example.com' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 21,
          "static": false,
          "killedBy": [
            "208"
          ],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "135",
            "136",
            "137",
            "138",
            "139",
            "172",
            "192",
            "193",
            "194",
            "203",
            "208"
          ],
          "location": {
            "end": {
              "column": 33,
              "line": 2
            },
            "start": {
              "column": 31,
              "line": 2
            }
          }
        }
      ],
      "source": "function removeTrailingSlashes(url: string): string {\n  return url.replace(/\\/+$/u, \"\");\n}\n\nexport { removeTrailingSlashes };"
    },
    "composables/api/game/dto/create-game/create-game.dto.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "184",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "composables/api/game/dto/create-game/create-game.dto.ts(16,55): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "107",
            "108",
            "109",
            "110",
            "111",
            "162",
            "163",
            "164",
            "165",
            "196",
            "197",
            "198"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 18
            },
            "start": {
              "column": 69,
              "line": 16
            }
          }
        },
        {
          "id": "183",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "composables/api/game/dto/create-game/create-game.dto.ts(10,44): error TS2322: Type 'string' is not assignable to type 'CreateGamePlayerDto'.\n",
          "status": "CompileError",
          "static": true,
          "coveredBy": [
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "107",
            "108",
            "109",
            "110",
            "111",
            "158",
            "159",
            "162",
            "163",
            "164",
            "165",
            "196",
            "197",
            "198"
          ],
          "location": {
            "end": {
              "column": 45,
              "line": 10
            },
            "start": {
              "column": 43,
              "line": 10
            }
          }
        }
      ],
      "source": "import { Expose, plainToInstance, Type } from \"class-transformer\";\n\nimport { CreateGameAdditionalCardDto } from \"~/composables/api/game/dto/create-game/create-game-additional-card/create-game-additional-card.dto\";\nimport { CreateGamePlayerDto } from \"~/composables/api/game/dto/create-game/create-game-player/create-game-player.dto\";\nimport { DEFAULT_PLAIN_TO_INSTANCE_OPTIONS } from \"~/utils/constants/class-transformer.constants\";\n\nclass CreateGameDto {\n  @Type(() => CreateGamePlayerDto)\n  @Expose()\n  public players: CreateGamePlayerDto[] = [];\n\n  @Type(() => CreateGameAdditionalCardDto)\n  @Expose()\n  public additionalCards?: CreateGameAdditionalCardDto[];\n\n  public static create(createGameDto: CreateGameDto): CreateGameDto {\n    return plainToInstance(CreateGameDto, createGameDto, DEFAULT_PLAIN_TO_INSTANCE_OPTIONS);\n  }\n}\n\nexport { CreateGameDto };"
    }
  },
  "schemaVersion": "1.0",
  "thresholds": {
    "high": 100,
    "low": 100,
    "break": 100
  },
  "testFiles": {
    "tests/unit/specs/composables/api/game/useCreateGameDtoValidation.spec.ts": {
      "tests": [
        {
          "id": "0",
          "name": "Use Create Game Dto Validation Composable isMinimumPlayersReached 'should return false when the number o…'"
        },
        {
          "id": "1",
          "name": "Use Create Game Dto Validation Composable isMinimumPlayersReached 'should return true when the number of…'"
        },
        {
          "id": "2",
          "name": "Use Create Game Dto Validation Composable areAllRolesSet 'should return true when all roles amo…'"
        },
        {
          "id": "3",
          "name": "Use Create Game Dto Validation Composable areAllRolesSet 'should return false when not all role…'"
        },
        {
          "id": "4",
          "name": "Use Create Game Dto Validation Composable doesContainOneVillagerSidedRole 'should return true when at least one …'"
        },
        {
          "id": "5",
          "name": "Use Create Game Dto Validation Composable doesContainOneVillagerSidedRole 'should return false when no player ha…'"
        },
        {
          "id": "6",
          "name": "Use Create Game Dto Validation Composable doesContainOneWerewolfSidedRole 'should return true when at least one …'"
        },
        {
          "id": "7",
          "name": "Use Create Game Dto Validation Composable doesContainOneWerewolfSidedRole 'should return false when no player ha…'"
        },
        {
          "id": "8",
          "name": "Use Create Game Dto Validation Composable areAdditionalCardsSetForThiefIfPresent 'should return true when the thief is …'"
        },
        {
          "id": "9",
          "name": "Use Create Game Dto Validation Composable areAdditionalCardsSetForThiefIfPresent 'should return false when the thief is…'"
        },
        {
          "id": "10",
          "name": "Use Create Game Dto Validation Composable areAdditionalCardsSetForActorIfPresent 'should return true when the actor is …'"
        },
        {
          "id": "11",
          "name": "Use Create Game Dto Validation Composable areAdditionalCardsSetForActorIfPresent 'should return false when the actor is…'"
        },
        {
          "id": "12",
          "name": "Use Create Game Dto Validation Composable arePlayerGroupsSetForPrejudicedManipulatorIfPresent 'should return true when the prejudice…'"
        },
        {
          "id": "13",
          "name": "Use Create Game Dto Validation Composable arePlayerGroupsSetForPrejudicedManipulatorIfPresent 'should return false when the prejudic…'"
        },
        {
          "id": "14",
          "name": "Use Create Game Dto Validation Composable canCreateGame 'should return false when the minimum …'"
        },
        {
          "id": "15",
          "name": "Use Create Game Dto Validation Composable canCreateGame 'should return false when not all role…'"
        },
        {
          "id": "16",
          "name": "Use Create Game Dto Validation Composable canCreateGame 'should return false when no player ha…'"
        },
        {
          "id": "17",
          "name": "Use Create Game Dto Validation Composable canCreateGame 'should return false when the thief is…'"
        },
        {
          "id": "18",
          "name": "Use Create Game Dto Validation Composable canCreateGame 'should return false when the actor is…'"
        },
        {
          "id": "19",
          "name": "Use Create Game Dto Validation Composable canCreateGame 'should return false when the prejudic…'"
        },
        {
          "id": "20",
          "name": "Use Create Game Dto Validation Composable canCreateGame 'should return true when game can be c…'"
        },
        {
          "id": "21",
          "name": "Use Create Game Dto Validation Composable gameCreationValidationErrors 'should contain specific error message…'"
        },
        {
          "id": "22",
          "name": "Use Create Game Dto Validation Composable gameCreationValidationErrors should return empty array when game can be created."
        }
      ],
      "source": "import type { Ref } from \"vue\";\n\nimport type { CreateGameDto } from \"~/composables/api/game/dto/create-game/create-game.dto\";\nimport { useCreateGameDtoValidation } from \"~/composables/api/game/useCreateGameDtoValidation\";\nimport { RoleNames, RoleSides } from \"~/composables/api/role/enums/role.enums\";\nimport { createFakeCreateGameAdditionalCardDto } from \"~/tests/unit/utils/factories/composables/api/game/dto/create-game/create-game-additional-card/create-game-additional-card.dto.factory\";\nimport { createFakeCreateGamePlayerDto } from \"~/tests/unit/utils/factories/composables/api/game/dto/create-game/create-game-player/create-game-player.dto.factory\";\nimport { createFakeCreateGameDto } from \"~/tests/unit/utils/factories/composables/api/game/dto/create-game/create-game.dto.factory\";\n\ndescribe(\"Use Create Game Dto Validation Composable\", () => {\n  const validCreateGameDto = createFakeCreateGameDto({\n    players: [\n      createFakeCreateGamePlayerDto({\n        name: \"Player 1\",\n        role: { name: RoleNames.WEREWOLF },\n        side: { current: RoleSides.WEREWOLVES },\n      }),\n      createFakeCreateGamePlayerDto({\n        name: \"Player 2\",\n        role: { name: RoleNames.WEREWOLF },\n        side: { current: RoleSides.WEREWOLVES },\n      }),\n      createFakeCreateGamePlayerDto({\n        name: \"Player 3\",\n        role: { name: RoleNames.WEREWOLF },\n        side: { current: RoleSides.WEREWOLVES },\n      }),\n      createFakeCreateGamePlayerDto({\n        name: \"Player 4\",\n        role: { name: RoleNames.VILLAGER },\n        side: { current: RoleSides.VILLAGERS },\n      }),\n    ],\n  });\n\n  describe(\"isMinimumPlayersReached\", () => {\n    it.each<{\n      test: string;\n      createGameDto: Ref<CreateGameDto>;\n      expected: boolean;\n    }>([\n      {\n        test: \"should return false when the number of players is less than the minimum number of players in a game.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto(),\n            createFakeCreateGamePlayerDto(),\n          ],\n        })),\n        expected: false,\n      },\n      {\n        test: \"should return true when the number of players is greater than or equal to the minimum number of players in a game.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto(),\n            createFakeCreateGamePlayerDto(),\n            createFakeCreateGamePlayerDto(),\n            createFakeCreateGamePlayerDto(),\n          ],\n        })),\n        expected: true,\n      },\n    ])(\"$test\", ({ createGameDto, expected }) => {\n      const { isMinimumPlayersReached } = useCreateGameDtoValidation(createGameDto);\n\n      expect(isMinimumPlayersReached.value).toBe(expected);\n    });\n  });\n\n  describe(\"areAllRolesSet\", () => {\n    it.each<{\n      test: string;\n      createGameDto: Ref<CreateGameDto>;\n      expected: boolean;\n    }>([\n      {\n        test: \"should return true when all roles among players are set.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n          ],\n        })),\n        expected: true,\n      },\n      {\n        test: \"should return false when not all roles among players are set.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n            createFakeCreateGamePlayerDto(),\n          ],\n        })),\n        expected: false,\n      },\n    ])(\"$test\", ({ createGameDto, expected }) => {\n      const { areAllRolesSet } = useCreateGameDtoValidation(createGameDto);\n\n      expect(areAllRolesSet.value).toBe(expected);\n    });\n  });\n\n  describe(\"doesContainOneVillagerSidedRole\", () => {\n    it.each<{\n      test: string;\n      createGameDto: Ref<CreateGameDto>;\n      expected: boolean;\n    }>([\n      {\n        test: \"should return true when at least one player has a villager sided role.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.VILLAGER }, side: { current: RoleSides.VILLAGERS } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF }, side: { current: RoleSides.WEREWOLVES } }),\n          ],\n        })),\n        expected: true,\n      },\n      {\n        test: \"should return false when no player has a villager sided role.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF }, side: { current: RoleSides.WEREWOLVES } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF }, side: { current: RoleSides.WEREWOLVES } }),\n          ],\n        })),\n        expected: false,\n      },\n    ])(\"$test\", ({ createGameDto, expected }) => {\n      const { doesContainOneVillagerSidedRole } = useCreateGameDtoValidation(createGameDto);\n\n      expect(doesContainOneVillagerSidedRole.value).toBe(expected);\n    });\n  });\n\n  describe(\"doesContainOneWerewolfSidedRole\", () => {\n    it.each<{\n      test: string;\n      createGameDto: Ref<CreateGameDto>;\n      expected: boolean;\n    }>([\n      {\n        test: \"should return true when at least one player has a werewolf sided role.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.VILLAGER }, side: { current: RoleSides.VILLAGERS } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF }, side: { current: RoleSides.WEREWOLVES } }),\n          ],\n        })),\n        expected: true,\n      },\n      {\n        test: \"should return false when no player has a werewolf sided role.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.VILLAGER }, side: { current: RoleSides.VILLAGERS } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.VILLAGER }, side: { current: RoleSides.VILLAGERS } }),\n          ],\n        })),\n        expected: false,\n      },\n    ])(\"$test\", ({ createGameDto, expected }) => {\n      const { doesContainOneWerewolfSidedRole } = useCreateGameDtoValidation(createGameDto);\n\n      expect(doesContainOneWerewolfSidedRole.value).toBe(expected);\n    });\n  });\n\n  describe(\"areAdditionalCardsSetForThiefIfPresent\", () => {\n    it.each<{\n      test: string;\n      createGameDto: Ref<CreateGameDto>;\n      expected: boolean;\n    }>([\n      {\n        test: \"should return true when the thief is not present.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.VILLAGER } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n          ],\n        })),\n        expected: true,\n      },\n      {\n        test: \"should return true when the thief is present and additional cards are set.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.THIEF } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n          ],\n          additionalCards: [\n            createFakeCreateGameAdditionalCardDto({ recipient: RoleNames.THIEF }),\n            createFakeCreateGameAdditionalCardDto({ recipient: RoleNames.ACTOR }),\n          ],\n        })),\n        expected: true,\n      },\n      {\n        test: \"should return false when the thief is present and additional cards are not set.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.THIEF } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n          ],\n        })),\n        expected: false,\n      },\n      {\n        test: \"should return false when the thief is present but additional cards are for the actor.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.THIEF } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n          ],\n          additionalCards: [\n            createFakeCreateGameAdditionalCardDto({ recipient: RoleNames.ACTOR }),\n            createFakeCreateGameAdditionalCardDto({ recipient: RoleNames.ACTOR }),\n          ],\n        })),\n        expected: false,\n      },\n    ])(\"$test\", ({ createGameDto, expected }) => {\n      const { areAdditionalCardsSetForThiefIfPresent } = useCreateGameDtoValidation(createGameDto);\n\n      expect(areAdditionalCardsSetForThiefIfPresent.value).toBe(expected);\n    });\n  });\n\n  describe(\"areAdditionalCardsSetForActorIfPresent\", () => {\n    it.each<{\n      test: string;\n      createGameDto: Ref<CreateGameDto>;\n      expected: boolean;\n    }>([\n      {\n        test: \"should return true when the actor is not present.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.VILLAGER } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n          ],\n        })),\n        expected: true,\n      },\n      {\n        test: \"should return true when the actor is present and additional cards are set.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.ACTOR } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n          ],\n          additionalCards: [\n            createFakeCreateGameAdditionalCardDto({ recipient: RoleNames.THIEF }),\n            createFakeCreateGameAdditionalCardDto({ recipient: RoleNames.ACTOR }),\n          ],\n        })),\n        expected: true,\n      },\n      {\n        test: \"should return false when the actor is present and additional cards are not set.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.ACTOR } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n          ],\n        })),\n        expected: false,\n      },\n      {\n        test: \"should return false when the actor is present but additional cards are for the thief.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.ACTOR } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n          ],\n          additionalCards: [\n            createFakeCreateGameAdditionalCardDto({ recipient: RoleNames.THIEF }),\n            createFakeCreateGameAdditionalCardDto({ recipient: RoleNames.THIEF }),\n          ],\n        })),\n        expected: false,\n      },\n    ])(\"$test\", ({ createGameDto, expected }) => {\n      const { areAdditionalCardsSetForActorIfPresent } = useCreateGameDtoValidation(createGameDto);\n\n      expect(areAdditionalCardsSetForActorIfPresent.value).toBe(expected);\n    });\n  });\n\n  describe(\"arePlayerGroupsSetForPrejudicedManipulatorIfPresent\", () => {\n    it.each<{\n      test: string;\n      createGameDto: Ref<CreateGameDto>;\n      expected: boolean;\n    }>([\n      {\n        test: \"should return true when the prejudiced manipulator is not present.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({\n              role: { name: RoleNames.VILLAGER },\n              group: \"group 1\",\n            }),\n            createFakeCreateGamePlayerDto({\n              role: { name: RoleNames.WEREWOLF },\n              group: \"group 2\",\n            }),\n          ],\n        })),\n        expected: true,\n      },\n      {\n        test: \"should return true when the prejudiced manipulator is present and player groups are set.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({\n              role: { name: RoleNames.PREJUDICED_MANIPULATOR },\n              group: \"group 1\",\n            }),\n            createFakeCreateGamePlayerDto({\n              role: { name: RoleNames.WEREWOLF },\n              group: \"group 2\",\n            }),\n          ],\n        })),\n        expected: true,\n      },\n      {\n        test: \"should return false when the prejudiced manipulator is present and player groups are not set.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.PREJUDICED_MANIPULATOR } }),\n            createFakeCreateGamePlayerDto({\n              role: { name: RoleNames.WEREWOLF },\n              group: \"group 2\",\n            }),\n          ],\n        })),\n        expected: false,\n      },\n    ])(\"$test\", ({ createGameDto, expected }) => {\n      const { arePlayerGroupsSetForPrejudicedManipulatorIfPresent } = useCreateGameDtoValidation(createGameDto);\n\n      expect(arePlayerGroupsSetForPrejudicedManipulatorIfPresent.value).toBe(expected);\n    });\n  });\n\n  describe(\"canCreateGame\", () => {\n    it.each<{\n      test: string;\n      createGameDto: Ref<CreateGameDto>;\n      expected: boolean;\n    }>([\n      {\n        test: \"should return false when the minimum of players are not set in game.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF }, side: { current: RoleSides.WEREWOLVES } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF }, side: { current: RoleSides.WEREWOLVES } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.VILLAGER }, side: { current: RoleSides.VILLAGERS } }),\n          ],\n        })),\n        expected: false,\n      },\n      {\n        test: \"should return false when not all roles among players are set.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF }, side: { current: RoleSides.WEREWOLVES } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF }, side: { current: RoleSides.WEREWOLVES } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.VILLAGER }, side: { current: RoleSides.VILLAGERS } }),\n            createFakeCreateGamePlayerDto(),\n          ],\n        })),\n        expected: false,\n      },\n      {\n        test: \"should return false when no player has a villager sided role.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF }, side: { current: RoleSides.WEREWOLVES } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF }, side: { current: RoleSides.WEREWOLVES } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF }, side: { current: RoleSides.WEREWOLVES } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF }, side: { current: RoleSides.WEREWOLVES } }),\n          ],\n        })),\n        expected: false,\n      },\n      {\n        test: \"should return false when no player has a werewolf sided role.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({\n              role: { name: RoleNames.VILLAGER },\n              side: { current: RoleSides.VILLAGERS },\n            }),\n            createFakeCreateGamePlayerDto({\n              role: { name: RoleNames.VILLAGER },\n              side: { current: RoleSides.VILLAGERS },\n            }),\n            createFakeCreateGamePlayerDto({\n              role: { name: RoleNames.VILLAGER },\n              side: { current: RoleSides.VILLAGERS },\n            }),\n            createFakeCreateGamePlayerDto({\n              role: { name: RoleNames.VILLAGER },\n              side: { current: RoleSides.VILLAGERS },\n            }),\n          ],\n        })),\n        expected: false,\n      },\n      {\n        test: \"should return false when the thief is present but additional cards are not set.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.THIEF } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n          ],\n        })),\n        expected: false,\n      },\n      {\n        test: \"should return false when the actor is present but additional cards are not set.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.ACTOR } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n          ],\n        })),\n        expected: false,\n      },\n      {\n        test: \"should return false when the prejudiced manipulator is present and player groups are not set.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.PREJUDICED_MANIPULATOR } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n          ],\n        })),\n        expected: false,\n      },\n      {\n        test: \"should return true when game can be created.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto(validCreateGameDto)),\n        expected: true,\n      },\n    ])(\"$test\", ({ createGameDto, expected }) => {\n      const { canCreateGame } = useCreateGameDtoValidation(createGameDto);\n\n      expect(canCreateGame.value).toBe(expected);\n    });\n  });\n\n  describe(\"gameCreationValidationErrors\", () => {\n    it.each<{\n      test: string;\n      createGameDto: Ref<CreateGameDto>;\n      expectedItem: string;\n    }>([\n      {\n        test: \"should contain specific error message when the minimum of players are not set in game.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF }, side: { current: RoleSides.WEREWOLVES } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.VILLAGER }, side: { current: RoleSides.VILLAGERS } }),\n          ],\n        })),\n        expectedItem: \"composables.useCreateGameDtoValidation.minimumOfPlayersNotReached\",\n      },\n      {\n        test: \"should contain specific error message when not all roles among players are set.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n            createFakeCreateGamePlayerDto(),\n          ],\n        })),\n        expectedItem: \"composables.useCreateGameDtoValidation.notAllRolesAreSet\",\n      },\n      {\n        test: \"should contain specific error message when no player has a villager sided role.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF }, side: { current: RoleSides.WEREWOLVES } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF }, side: { current: RoleSides.WEREWOLVES } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF }, side: { current: RoleSides.WEREWOLVES } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF }, side: { current: RoleSides.WEREWOLVES } }),\n          ],\n        })),\n        expectedItem: \"composables.useCreateGameDtoValidation.noVillagerSidedRole\",\n      },\n      {\n        test: \"should contain specific error message when no player has a werewolf sided role.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({\n              role: { name: RoleNames.VILLAGER },\n              side: { current: RoleSides.VILLAGERS },\n            }),\n            createFakeCreateGamePlayerDto({\n              role: { name: RoleNames.VILLAGER },\n              side: { current: RoleSides.VILLAGERS },\n            }),\n            createFakeCreateGamePlayerDto({\n              role: { name: RoleNames.VILLAGER },\n              side: { current: RoleSides.VILLAGERS },\n            }),\n            createFakeCreateGamePlayerDto({\n              role: { name: RoleNames.VILLAGER },\n              side: { current: RoleSides.VILLAGERS },\n            }),\n          ],\n        })),\n        expectedItem: \"composables.useCreateGameDtoValidation.noWerewolfSidedRole\",\n      },\n      {\n        test: \"should contain specific error message when the thief is present but additional cards are not set.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.THIEF } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n          ],\n        })),\n        expectedItem: \"composables.useCreateGameDtoValidation.thiefAdditionalCardsNotSet\",\n      },\n      {\n        test: \"should contain specific error message when the actor is present but additional cards are not set.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.ACTOR } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n          ],\n        })),\n        expectedItem: \"composables.useCreateGameDtoValidation.actorAdditionalCardsNotSet\",\n      },\n      {\n        test: \"should contain specific error message when the prejudiced manipulator is present and player groups are not set.\",\n        createGameDto: ref<CreateGameDto>(createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.PREJUDICED_MANIPULATOR } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n            createFakeCreateGamePlayerDto({ role: { name: RoleNames.WEREWOLF } }),\n          ],\n        })),\n        expectedItem: \"composables.useCreateGameDtoValidation.prejudicedManipulatorGroupsNotSet\",\n      },\n    ])(\"$test\", ({ createGameDto, expectedItem }) => {\n      const { gameCreationValidationErrors } = useCreateGameDtoValidation(createGameDto);\n\n      expect(gameCreationValidationErrors.value).toContain(expectedItem);\n    });\n\n    it(\"should return empty array when game can be created.\", () => {\n      const createGameDto = ref<CreateGameDto>(createFakeCreateGameDto(validCreateGameDto));\n      const { gameCreationValidationErrors } = useCreateGameDtoValidation(createGameDto);\n\n      expect(gameCreationValidationErrors.value).toStrictEqual([]);\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.nuxt.spec.ts": {
      "tests": [
        {
          "id": "23",
          "name": "Game Lobby Player Input Component should render component and match snapshot when mounted."
        },
        {
          "id": "24",
          "name": "Game Lobby Player Input Component Text input should be prefilled when v-model value is not empty."
        },
        {
          "id": "25",
          "name": "Game Lobby Player Input Component Text input should be disabled when create game dto has reached max players."
        },
        {
          "id": "26",
          "name": "Game Lobby Player Input Component Text input should have invalid class when player name exists in game."
        },
        {
          "id": "27",
          "name": "Game Lobby Player Input Component Text input should not be disabled when create game dto has not reached max players."
        },
        {
          "id": "28",
          "name": "Game Lobby Player Input Component Text input should translate input label when rendered."
        },
        {
          "id": "29",
          "name": "Game Lobby Player Input Component Add button should be disabled when create game dto has reached max players."
        },
        {
          "id": "30",
          "name": "Game Lobby Player Input Component Add button should be disabled when one player name is same as input value."
        },
        {
          "id": "31",
          "name": "Game Lobby Player Input Component Add button should be disabled when one player name is same as input value even with some spaces around it."
        },
        {
          "id": "32",
          "name": "Game Lobby Player Input Component Add button should be enabled when input value is not empty and create game dto has not reached max players."
        },
        {
          "id": "33",
          "name": "Game Lobby Player Input Component Add button should translate button label when rendered."
        },
        {
          "id": "34",
          "name": "Game Lobby Player Input Component Help Text should translate max players reached help message when max players are reached in game."
        },
        {
          "id": "35",
          "name": "Game Lobby Player Input Component Help Text should translate player name exists help message when player name exists in game."
        },
        {
          "id": "36",
          "name": "Game Lobby Player Input Component Help Text should translate player name max length help message when player name is too long."
        },
        {
          "id": "37",
          "name": "Game Lobby Player Input Component Help Text should translate basic help message when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport type { ComponentMountingOptions } from \"@vue/test-utils/dist/mount\";\nimport type InputText from \"primevue/inputtext\";\n\nimport type { GameLobbyPlayerInputProps } from \"~/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/game-lobby-player-input.types\";\nimport GameLobbyPlayerInput from \"~/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.vue\";\nimport { useCreateGameDtoStore } from \"~/stores/game/create-game-dto/useCreateGameDtoStore\";\nimport { createFakeCreateGamePlayerDto } from \"~/tests/unit/utils/factories/composables/api/game/dto/create-game/create-game-player/create-game-player.dto.factory\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"Game Lobby Player Input Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof GameLobbyPlayerInput>>;\n  const defaultProps: GameLobbyPlayerInputProps = { modelValue: \"\" };\n  const defaultMountingOptions: ComponentMountingOptions<typeof GameLobbyPlayerInput> = {\n    props: defaultProps,\n    global: { stubs: { InputGroup: false } },\n  };\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(GameLobbyPlayerInput, defaultMountingOptions);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Text input\", () => {\n    it(\"should be prefilled when v-model value is not empty.\", async() => {\n      wrapper = await mountSuspendedComponent(GameLobbyPlayerInput, {\n        ...defaultMountingOptions,\n        props: { modelValue: \"Player 1\" },\n      });\n      const input = wrapper.findComponent<typeof InputText>(\"#player-name-input\");\n\n      expect(input.attributes(\"modelvalue\")).toBe(\"Player 1\");\n    });\n\n    it(\"should be disabled when create game dto has reached max players.\", async() => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      createGameDtoStore.createGameDto.players = Array.from({ length: 40 }, createFakeCreateGamePlayerDto);\n      const input = wrapper.findComponent<typeof InputText>(\"#player-name-input\");\n      await nextTick();\n\n      expect(input.attributes(\"disabled\")).toBe(\"true\");\n    });\n\n    it(\"should have invalid class when player name exists in game.\", async() => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      createGameDtoStore.createGameDto.players = [\n        createFakeCreateGamePlayerDto({ name: \"Player 1\" }),\n        createFakeCreateGamePlayerDto({ name: \"Player 2\" }),\n        createFakeCreateGamePlayerDto({ name: \"Player 3\" }),\n      ];\n      const input = wrapper.findComponent<typeof InputText>(\"#player-name-input\");\n      await input.setValue(\" Player 2 \");\n\n      expect(input.classes(\"p-invalid\")).toBeTrue();\n    });\n\n    it(\"should not be disabled when create game dto has not reached max players.\", async() => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      createGameDtoStore.createGameDto.players = Array.from({ length: 39 }, createFakeCreateGamePlayerDto);\n      const input = wrapper.findComponent<typeof InputText>(\"#player-name-input\");\n      await nextTick();\n\n      expect(input.attributes(\"disabled\")).toBe(\"false\");\n    });\n\n    it(\"should translate input label when rendered.\", () => {\n      const label = wrapper.find<HTMLLabelElement>(\"[for='player-name-input']\");\n\n      expect(label.text()).toBe(\"Player name\");\n    });\n  });\n\n  describe(\"Add button\", () => {\n    it(\"should be disabled when create game dto has reached max players.\", async() => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      createGameDtoStore.createGameDto.players = Array.from({ length: 40 }, createFakeCreateGamePlayerDto);\n      const button = wrapper.find<HTMLButtonElement>(\"#add-player-button\");\n      await nextTick();\n\n      expect(button.attributes(\"disabled\")).toBe(\"true\");\n    });\n\n    it(\"should be disabled when one player name is same as input value.\", async() => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      createGameDtoStore.createGameDto.players = [\n        createFakeCreateGamePlayerDto({ name: \"Player 1\" }),\n        createFakeCreateGamePlayerDto({ name: \"Player 2\" }),\n        createFakeCreateGamePlayerDto({ name: \"Player 3\" }),\n      ];\n      const input = wrapper.findComponent<typeof InputText>(\"#player-name-input\");\n      const button = wrapper.find<HTMLButtonElement>(\"#add-player-button\");\n      await input.setValue(\"Player 1\");\n\n      expect(button.attributes(\"disabled\")).toBe(\"true\");\n    });\n\n    it(\"should be disabled when one player name is same as input value even with some spaces around it.\", async() => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      createGameDtoStore.createGameDto.players = [\n        createFakeCreateGamePlayerDto({ name: \"Player 1\" }),\n        createFakeCreateGamePlayerDto({ name: \"Player 2\" }),\n        createFakeCreateGamePlayerDto({ name: \"Player 3\" }),\n      ];\n      const input = wrapper.findComponent<typeof InputText>(\"#player-name-input\");\n      const button = wrapper.find<HTMLButtonElement>(\"#add-player-button\");\n      await input.setValue(\"   Player 1   \");\n\n      expect(button.attributes(\"disabled\")).toBe(\"true\");\n    });\n\n    it(\"should be enabled when input value is not empty and create game dto has not reached max players.\", async() => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      createGameDtoStore.createGameDto.players = Array.from({ length: 39 }, createFakeCreateGamePlayerDto);\n      const input = wrapper.findComponent<typeof InputText>(\"#player-name-input\");\n      const button = wrapper.find<HTMLButtonElement>(\"#add-player-button\");\n      await input.setValue(\"Player 2\");\n\n      expect(button.attributes(\"disabled\")).toBe(\"false\");\n    });\n\n    it(\"should translate button label when rendered.\", async() => {\n      wrapper = await mountSuspendedComponent(GameLobbyPlayerInput, {\n        ...defaultMountingOptions,\n        global: {\n          stubs: {\n            InputGroup: false,\n            Button: false,\n          },\n        },\n      });\n      const button = wrapper.find<HTMLButtonElement>(\"#add-player-button\");\n\n      expect(button.text()).toBe(\"Add\");\n    });\n  });\n\n  describe(\"Help Text\", () => {\n    it(\"should translate max players reached help message when max players are reached in game.\", async() => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      createGameDtoStore.createGameDto.players = Array.from({ length: 40 }, createFakeCreateGamePlayerDto);\n      await nextTick();\n      const helpText = wrapper.find<HTMLLabelElement>(\"#player-name-input-help\");\n\n      expect(helpText.text()).toBe(\"components.GameLobbyPlayerInput.maxPlayersReached\");\n    });\n\n    it(\"should translate player name exists help message when player name exists in game.\", async() => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      createGameDtoStore.createGameDto.players = [\n        createFakeCreateGamePlayerDto({ name: \"Player 1\" }),\n        createFakeCreateGamePlayerDto({ name: \"Player 2\" }),\n        createFakeCreateGamePlayerDto({ name: \"Player 3\" }),\n      ];\n      const input = wrapper.findComponent<typeof InputText>(\"#player-name-input\");\n      await input.setValue(\"Player 2\");\n      const helpText = wrapper.find<HTMLLabelElement>(\"#player-name-input-help\");\n\n      expect(helpText.text()).toBe(\"components.GameLobbyPlayerInput.playerNameIsAlreadyTaken\");\n    });\n\n    it(\"should translate player name max length help message when player name is too long.\", async() => {\n      const input = wrapper.findComponent<typeof InputText>(\"#player-name-input\");\n      await input.setValue(\"  FrontLine incremental password  \");\n      const helpText = wrapper.find<HTMLLabelElement>(\"#player-name-input-help\");\n\n      expect(helpText.text()).toBe(\"components.GameLobbyPlayerInput.playerNameMaxLengthReached\");\n    });\n\n    it(\"should translate basic help message when rendered.\", async() => {\n      const input = wrapper.findComponent<typeof InputText>(\"#player-name-input\");\n      await input.setValue(\"  Antoine                       \");\n      const helpText = wrapper.find<HTMLLabelElement>(\"#player-name-input-help\");\n\n      expect(helpText.text()).toBe(\"components.GameLobbyPlayerInput.pleaseEnterPlayerName\");\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.nuxt.spec.ts": {
      "tests": [
        {
          "id": "38",
          "name": "Game Lobby Random Composition Button Component should render component and match snapshot when mounted."
        },
        {
          "id": "39",
          "name": "Game Lobby Random Composition Button Component Button container should assign tooltip when button is disabled."
        },
        {
          "id": "40",
          "name": "Game Lobby Random Composition Button Component Button container should not assign tooltip when button is enabled."
        },
        {
          "id": "41",
          "name": "Game Lobby Random Composition Button Component Button container Button should be disabled when min of players is not reached."
        },
        {
          "id": "42",
          "name": "Game Lobby Random Composition Button Component Button container Button should be enabled when min of players is reached."
        },
        {
          "id": "43",
          "name": "Game Lobby Random Composition Button Component Button container Button Click on button should fetch random game composition when clicked."
        },
        {
          "id": "44",
          "name": "Game Lobby Random Composition Button Component Button container Button Click on button should set fetched random game composition to create game dto when fetched."
        },
        {
          "id": "45",
          "name": "Game Lobby Random Composition Button Component Button container Button Click on button should not set fetched random game composition to create game dto when fetch returned null."
        },
        {
          "id": "46",
          "name": "Game Lobby Random Composition Button Component Button container Button Click on button should be loading when fetch is in progress."
        },
        {
          "id": "47",
          "name": "Game Lobby Random Composition Button Component Button container Button Click on button should not be loading when fetch returned."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport type Button from \"primevue/button\";\nimport type { Mock } from \"vitest\";\nimport type { Ref } from \"vue\";\n\nimport GameLobbyRandomCompositionButton from \"~/components/pages/game-lobby/GameLobbyFooter/GameLobbyRandomCompositionButton/GameLobbyRandomCompositionButton.vue\";\nimport * as UseFetchRandomGameComposition from \"~/composables/api/game/useFetchRandomGameComposition\";\nimport { useCreateGameDtoStore } from \"~/stores/game/create-game-dto/useCreateGameDtoStore\";\nimport { createFakeCreateGamePlayerDto } from \"~/tests/unit/utils/factories/composables/api/game/dto/create-game/create-game-player/create-game-player.dto.factory\";\nimport { createFakeCreateGameDto } from \"~/tests/unit/utils/factories/composables/api/game/dto/create-game/create-game.dto.factory\";\nimport { pTooltipDirectiveBinder } from \"~/tests/unit/utils/helpers/directive.helpers\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"Game Lobby Random Composition Button Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof GameLobbyRandomCompositionButton>>;\n  let mocks: {\n    composables: {\n      useFetchRandomGameComposition: {\n        fetchRandomGameComposition: Mock;\n      }\n    }\n  };\n\n  beforeEach(async() => {\n    mocks = { composables: { useFetchRandomGameComposition: { fetchRandomGameComposition: vi.fn() } } };\n    vi.spyOn(UseFetchRandomGameComposition, \"useFetchRandomGameComposition\").mockImplementation(() => mocks.composables.useFetchRandomGameComposition);\n    wrapper = await mountSuspendedComponent(GameLobbyRandomCompositionButton);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Button container\", () => {\n    it(\"should assign tooltip when button is disabled.\", async() => {\n      const tooltip = { value: undefined };\n      const directives = { ...pTooltipDirectiveBinder(tooltip, \"#game-lobby-random-composition-button-container\") };\n      wrapper = await mountSuspendedComponent(GameLobbyRandomCompositionButton, { global: { directives } });\n      const createGameDtoStore = useCreateGameDtoStore();\n      createGameDtoStore.createGameDto = createFakeCreateGameDto({ players: [] });\n      await nextTick();\n\n      expect(tooltip.value).toBe(\"components.GameLobbyRandomCompositionButton.minPlayersNotReached\");\n    });\n\n    it(\"should not assign tooltip when button is enabled.\", async() => {\n      const tooltip = { value: undefined };\n      const directives = { ...pTooltipDirectiveBinder(tooltip, \"#game-lobby-random-composition-button-container\") };\n      wrapper = await mountSuspendedComponent(GameLobbyRandomCompositionButton, { global: { directives } });\n      const createGameDtoStore = useCreateGameDtoStore();\n      createGameDtoStore.createGameDto = createFakeCreateGameDto({\n        players: [\n          createFakeCreateGamePlayerDto({ name: \"Player 1\" }),\n          createFakeCreateGamePlayerDto({ name: \"Player 2\" }),\n          createFakeCreateGamePlayerDto({ name: \"Player 3\" }),\n          createFakeCreateGamePlayerDto({ name: \"Player 4\" }),\n        ],\n      });\n      await nextTick();\n\n      expect(tooltip.value).toBeUndefined();\n    });\n\n    describe(\"Button\", () => {\n      it(\"should be disabled when min of players is not reached.\", async() => {\n        const createGameDtoStore = useCreateGameDtoStore();\n        createGameDtoStore.createGameDto = createFakeCreateGameDto({ players: [] });\n        await nextTick();\n        const button = wrapper.findComponent<Button>(\".random-composition-button\");\n\n        expect(button.attributes(\"disabled\")).toBe(\"true\");\n      });\n\n      it(\"should be enabled when min of players is reached.\", async() => {\n        const createGameDtoStore = useCreateGameDtoStore();\n        createGameDtoStore.createGameDto = createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ name: \"Player 1\" }),\n            createFakeCreateGamePlayerDto({ name: \"Player 2\" }),\n            createFakeCreateGamePlayerDto({ name: \"Player 3\" }),\n            createFakeCreateGamePlayerDto({ name: \"Player 4\" }),\n          ],\n        });\n        await nextTick();\n        const button = wrapper.findComponent<Button>(\".random-composition-button\");\n\n        expect(button.attributes(\"disabled\")).toBe(\"false\");\n      });\n\n      describe(\"Click on button\", () => {\n        beforeEach(() => {\n          const createGameDtoStore = useCreateGameDtoStore();\n          createGameDtoStore.createGameDto = createFakeCreateGameDto({\n            players: [\n              createFakeCreateGamePlayerDto({ name: \"Player 1\" }),\n              createFakeCreateGamePlayerDto({ name: \"Player 2\" }),\n              createFakeCreateGamePlayerDto({ name: \"Player 3\" }),\n              createFakeCreateGamePlayerDto({ name: \"Player 4\" }),\n            ],\n          });\n        });\n\n        it(\"should fetch random game composition when clicked.\", async() => {\n          const createGameDtoStore = useCreateGameDtoStore();\n          const button = wrapper.findComponent<Button>(\".random-composition-button\");\n          await button.trigger(\"click\");\n          await nextTick();\n\n          expect(mocks.composables.useFetchRandomGameComposition.fetchRandomGameComposition).toHaveBeenCalledWith({ players: createGameDtoStore.createGameDto.players });\n        });\n\n        it(\"should set fetched random game composition to create game dto when fetched.\", async() => {\n          const createGameDtoStore = useCreateGameDtoStore();\n          const randomComposition = [\n            createFakeCreateGamePlayerDto({ name: \"Player 1\" }),\n            createFakeCreateGamePlayerDto({ name: \"Player 2\" }),\n            createFakeCreateGamePlayerDto({ name: \"Player 3\" }),\n            createFakeCreateGamePlayerDto({ name: \"Player 4\" }),\n          ];\n          mocks.composables.useFetchRandomGameComposition.fetchRandomGameComposition.mockResolvedValue(randomComposition);\n          const button = wrapper.findComponent<Button>(\".random-composition-button\");\n          await button.trigger(\"click\");\n          await nextTick();\n          mocks.composables.useFetchRandomGameComposition.fetchRandomGameComposition.mockResolvedValue(randomComposition);\n\n          expect(createGameDtoStore.setPlayersToCreateGameDto).toHaveBeenCalledExactlyOnceWith(randomComposition);\n        });\n\n        it(\"should not set fetched random game composition to create game dto when fetch returned null.\", async() => {\n          const createGameDtoStore = useCreateGameDtoStore();\n          createGameDtoStore.createGameDto = createFakeCreateGameDto({\n            players: [\n              createFakeCreateGamePlayerDto({ name: \"Player 1\" }),\n              createFakeCreateGamePlayerDto({ name: \"Player 2\" }),\n              createFakeCreateGamePlayerDto({ name: \"Player 3\" }),\n              createFakeCreateGamePlayerDto({ name: \"Player 4\" }),\n            ],\n          });\n          await nextTick();\n          mocks.composables.useFetchRandomGameComposition.fetchRandomGameComposition.mockResolvedValue(null);\n          const button = wrapper.findComponent<Button>(\".random-composition-button\");\n          await button.trigger(\"click\");\n          await nextTick();\n\n          expect(createGameDtoStore.setPlayersToCreateGameDto).not.toHaveBeenCalled();\n        });\n\n        it(\"should be loading when fetch is in progress.\", () => {\n          const button = wrapper.findComponent<Button>(\".random-composition-button\");\n          void button.trigger(\"click\");\n\n          expect((wrapper.vm as unknown as { isLoadingGetRandomGameComposition: Ref<boolean> }).isLoadingGetRandomGameComposition.value).toBeTrue();\n        });\n\n        it(\"should not be loading when fetch returned.\", async() => {\n          const button = wrapper.findComponent<Button>(\".random-composition-button\");\n          await button.trigger(\"click\");\n\n          expect(button.attributes(\"loading\")).toBe(\"false\");\n        });\n      });\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyStartGameButton/GameLobbyStartGameButton.nuxt.spec.ts": {
      "tests": [
        {
          "id": "48",
          "name": "Game Lobby Start Game Button Component should render component and match snapshot when mounted."
        },
        {
          "id": "49",
          "name": "Game Lobby Start Game Button Component Button container should assign tooltip when button is disabled."
        },
        {
          "id": "50",
          "name": "Game Lobby Start Game Button Component Button container should not assign tooltip when button is enabled."
        },
        {
          "id": "51",
          "name": "Game Lobby Start Game Button Component Button should be disabled when minimum players are not reached."
        },
        {
          "id": "52",
          "name": "Game Lobby Start Game Button Component Button should be enabled when game can be created."
        },
        {
          "id": "53",
          "name": "Game Lobby Start Game Button Component Button Click on button should create game when clicked."
        },
        {
          "id": "54",
          "name": "Game Lobby Start Game Button Component Button Click on button should add success toast when game is created."
        },
        {
          "id": "55",
          "name": "Game Lobby Start Game Button Component Button Click on button should not add success toast when game is not created."
        },
        {
          "id": "56",
          "name": "Game Lobby Start Game Button Component Button Click on button should be loading when fetch is in progress."
        },
        {
          "id": "57",
          "name": "Game Lobby Start Game Button Component Button Click on button should not be loading when fetch returned."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport type Button from \"primevue/button\";\nimport type { Mock } from \"vitest\";\nimport type { Ref } from \"vue\";\n\nimport GameLobbyStartGameButton from \"~/components/pages/game-lobby/GameLobbyFooter/GameLobbyStartGameButton/GameLobbyStartGameButton.vue\";\nimport * as UseFetchGames from \"~/composables/api/game/useFetchGames\";\nimport * as UseVuePrimeToasts from \"~/composables/vue-prime/useVuePrimeToasts\";\nimport { RoleNames, RoleSides } from \"~/composables/api/role/enums/role.enums\";\nimport { useCreateGameDtoStore } from \"~/stores/game/create-game-dto/useCreateGameDtoStore\";\nimport { createFakeCreateGamePlayerDto } from \"~/tests/unit/utils/factories/composables/api/game/dto/create-game/create-game-player/create-game-player.dto.factory\";\nimport { createFakeCreateGameDto } from \"~/tests/unit/utils/factories/composables/api/game/dto/create-game/create-game.dto.factory\";\nimport { createFakeGame } from \"~/tests/unit/utils/factories/composables/api/game/game.factory\";\nimport { pTooltipDirectiveBinder } from \"~/tests/unit/utils/helpers/directive.helpers\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"Game Lobby Start Game Button Component\", () => {\n  const validCreateGameDto = createFakeCreateGameDto({\n    players: [\n      createFakeCreateGamePlayerDto({\n        name: \"Player 1\",\n        role: { name: RoleNames.VILLAGER },\n        side: { current: RoleSides.VILLAGERS },\n      }),\n      createFakeCreateGamePlayerDto({\n        name: \"Player 2\",\n        role: { name: RoleNames.WEREWOLF },\n        side: { current: RoleSides.WEREWOLVES },\n      }),\n      createFakeCreateGamePlayerDto({\n        name: \"Player 3\",\n        role: { name: RoleNames.WEREWOLF },\n        side: { current: RoleSides.WEREWOLVES },\n      }),\n      createFakeCreateGamePlayerDto({\n        name: \"Player 4\",\n        role: { name: RoleNames.WEREWOLF },\n        side: { current: RoleSides.WEREWOLVES },\n      }),\n    ],\n  });\n\n  let wrapper: ReturnType<typeof mount<typeof GameLobbyStartGameButton>>;\n  let mocks: {\n    composables: {\n      useFetchGames: {\n        createGame: Mock;\n        getGame: Mock;\n      };\n      useVuePrimeToasts: {\n        addToast: Mock;\n        addSuccessToast: Mock;\n        addInfoToast: Mock;\n        addWarnToast: Mock;\n        addErrorToast: Mock;\n      };\n    }\n  };\n\n  beforeEach(async() => {\n    mocks = {\n      composables: {\n        useFetchGames: {\n          createGame: vi.fn(),\n          getGame: vi.fn(),\n        },\n        useVuePrimeToasts: {\n          addToast: vi.fn(),\n          addSuccessToast: vi.fn(),\n          addInfoToast: vi.fn(),\n          addWarnToast: vi.fn(),\n          addErrorToast: vi.fn(),\n        },\n      },\n    };\n    vi.spyOn(UseFetchGames, \"useFetchGames\").mockReturnValue(mocks.composables.useFetchGames);\n    vi.spyOn(UseVuePrimeToasts, \"useVuePrimeToasts\").mockReturnValue(mocks.composables.useVuePrimeToasts);\n    wrapper = await mountSuspendedComponent(GameLobbyStartGameButton);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Button container\", () => {\n    it(\"should assign tooltip when button is disabled.\", async() => {\n      const tooltip = { value: undefined };\n      const directives = { ...pTooltipDirectiveBinder(tooltip, \"#game-lobby-start-game-button-container\") };\n      wrapper = await mountSuspendedComponent(GameLobbyStartGameButton, { global: { directives } });\n      const createGameDtoStore = useCreateGameDtoStore();\n      createGameDtoStore.createGameDto = createFakeCreateGameDto({ players: [] });\n      await nextTick();\n\n      expect(tooltip.value).toBe(\"composables.useCreateGameDtoValidation.minimumOfPlayersNotReached\");\n    });\n\n    it(\"should not assign tooltip when button is enabled.\", async() => {\n      const tooltip = { value: undefined };\n      const directives = { ...pTooltipDirectiveBinder(tooltip, \"#game-lobby-start-game-button-container\") };\n      wrapper = await mountSuspendedComponent(GameLobbyStartGameButton, { global: { directives } });\n      const createGameDtoStore = useCreateGameDtoStore();\n      createGameDtoStore.createGameDto = validCreateGameDto;\n      await nextTick();\n\n      expect(tooltip.value).toBeUndefined();\n    });\n  });\n\n  describe(\"Button\", () => {\n    it(\"should be disabled when minimum players are not reached.\", async() => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      createGameDtoStore.createGameDto = createFakeCreateGameDto({ players: [] });\n      await nextTick();\n\n      const button = wrapper.find(\".start-game-button\");\n      expect(button.attributes(\"disabled\")).toBe(\"true\");\n    });\n\n    it(\"should be enabled when game can be created.\", async() => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      createGameDtoStore.createGameDto = validCreateGameDto;\n      await nextTick();\n\n      const button = wrapper.find(\".start-game-button\");\n      expect(button.attributes(\"disabled\")).toBe(\"false\");\n    });\n\n    describe(\"Click on button\", () => {\n      beforeEach(() => {\n        const createGameDtoStore = useCreateGameDtoStore();\n        createGameDtoStore.createGameDto = createFakeCreateGameDto({\n          players: [\n            createFakeCreateGamePlayerDto({ name: \"Player 1\" }),\n            createFakeCreateGamePlayerDto({ name: \"Player 2\" }),\n            createFakeCreateGamePlayerDto({ name: \"Player 3\" }),\n            createFakeCreateGamePlayerDto({ name: \"Player 4\" }),\n          ],\n        });\n      });\n\n      it(\"should create game when clicked.\", async() => {\n        const createGameDtoStore = useCreateGameDtoStore();\n        const button = wrapper.find(\".start-game-button\");\n        await button.trigger(\"click\");\n\n        expect(mocks.composables.useFetchGames.createGame).toHaveBeenCalledExactlyOnceWith(createGameDtoStore.createGameDto);\n      });\n\n      it(\"should add success toast when game is created.\", async() => {\n        mocks.composables.useFetchGames.createGame.mockResolvedValue(createFakeGame());\n        const button = wrapper.find(\".start-game-button\");\n        await button.trigger(\"click\");\n\n        expect(mocks.composables.useVuePrimeToasts.addSuccessToast).toHaveBeenCalledExactlyOnceWith({ summary: \"components.GameLobbyStartGameButton.gameCreated\" });\n      });\n\n      it(\"should not add success toast when game is not created.\", async() => {\n        mocks.composables.useFetchGames.createGame.mockResolvedValue(null);\n        const button = wrapper.find(\".start-game-button\");\n        await button.trigger(\"click\");\n\n        expect(mocks.composables.useVuePrimeToasts.addSuccessToast).not.toHaveBeenCalled();\n      });\n\n      it(\"should be loading when fetch is in progress.\", () => {\n        const button = wrapper.findComponent<Button>(\".start-game-button\");\n        void button.trigger(\"click\");\n\n        expect((wrapper.vm as unknown as { isLoadingCreateGame: Ref<boolean> }).isLoadingCreateGame.value).toBeTrue();\n      });\n\n      it(\"should not be loading when fetch returned.\", async() => {\n        const button = wrapper.findComponent<Button>(\".start-game-button\");\n        await button.trigger(\"click\");\n\n        expect(button.attributes(\"loading\")).toBe(\"false\");\n      });\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/about/AboutAvailableRoles/AboutAvailableRoles.nuxt.spec.ts": {
      "tests": [
        {
          "id": "58",
          "name": "About Available Roles Component should render component and match snapshot when mounted."
        },
        {
          "id": "59",
          "name": "About Available Roles Component Title should display role image with angel when rendered."
        },
        {
          "id": "60",
          "name": "About Available Roles Component Title should translate title when rendered."
        },
        {
          "id": "61",
          "name": "About Available Roles Component Available Roles Accordion Roles are not set yet should display loading roles container when roles are not set yet."
        },
        {
          "id": "62",
          "name": "About Available Roles Component Available Roles Accordion Roles are not set yet should translate loading roles text when roles are not set yet."
        },
        {
          "id": "63",
          "name": "About Available Roles Component Available Roles Accordion Roles are set should translate first section when roles are set."
        },
        {
          "id": "64",
          "name": "About Available Roles Component Available Roles Accordion Roles are set should display 3 available roles accordion tabs when 3 roles are set."
        },
        {
          "id": "65",
          "name": "About Available Roles Component Available Roles Accordion Roles are set should render roles accordion tabs with header aria labels when roles are set."
        },
        {
          "id": "66",
          "name": "About Available Roles Component Available Roles Accordion Roles are set should render roles accordion tabs with header images when roles are set."
        },
        {
          "id": "67",
          "name": "About Available Roles Component Available Roles Accordion Roles are set should display werewolf role description for first accordion tab when first accordion tab is for werewolf role."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport Accordion from \"primevue/accordion\";\nimport type { AccordionTabPassThroughOptions } from \"primevue/accordiontab\";\nimport AccordionTab from \"primevue/accordiontab\";\nimport { nextTick } from \"vue\";\n\nimport AboutAvailableRoleDescription from \"~/components/pages/about/AboutAvailableRoles/AboutAvailableRoleDescription/AboutAvailableRoleDescription.vue\";\nimport AboutAvailableRoles from \"~/components/pages/about/AboutAvailableRoles/AboutAvailableRoles.vue\";\nimport RoleImage from \"~/components/shared/role/RoleImage/RoleImage.vue\";\nimport { RoleNames } from \"~/composables/api/role/enums/role.enums\";\nimport type { Role } from \"~/composables/api/role/types/role.class\";\nimport * as UseRoleName from \"~/composables/api/role/useRoleName\";\nimport { useRolesStore } from \"~/stores/role/useRolesStore\";\nimport { createFakeRole } from \"~/tests/unit/utils/factories/composables/api/role/role.factory\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"About Available Roles Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof AboutAvailableRoles>>;\n\n  beforeEach(async() => {\n    vi.spyOn(UseRoleName, \"useRoleName\").mockReturnValue({ getRoleNameLabel: vi.fn((roleName: RoleNames) => roleName) });\n    wrapper = await mountSuspendedComponent(AboutAvailableRoles);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Title\", () => {\n    it(\"should display role image with angel when rendered.\", () => {\n      const roleImage = wrapper.findComponent<typeof RoleImage>(\"#about-available-roles-title-role-image\");\n\n      expect(roleImage.props(\"roleName\")).toBe(RoleNames.ANGEL);\n    });\n\n    it(\"should translate title when rendered.\", () => {\n      const title = wrapper.find<HTMLHeadElement>(\"#about-available-roles-title\");\n\n      expect(title.text()).toBe(\"Available roles\");\n    });\n  });\n\n  describe(\"Available Roles Accordion\", () => {\n    describe(\"Roles are not set yet\", () => {\n      beforeEach(async() => {\n        const rolesStore = useRolesStore();\n        rolesStore.roles = null;\n        await nextTick();\n      });\n\n      it(\"should display loading roles container when roles are not set yet.\", () => {\n        const loadingRolesContainer = wrapper.find<HTMLDivElement>(\"#loading-roles-container\");\n\n        expect(loadingRolesContainer.exists()).toBeTruthy();\n      });\n\n      it(\"should translate loading roles text when roles are not set yet.\", () => {\n        const loadingRolesText = wrapper.find<HTMLDivElement>(\"#loading-roles-container\");\n\n        expect(loadingRolesText.text()).toBe(\"Loading roles…\");\n      });\n    });\n\n    describe(\"Roles are set\", () => {\n      const roles = [\n        createFakeRole({ name: RoleNames.WEREWOLF }),\n        createFakeRole({ name: RoleNames.ANGEL }),\n        createFakeRole({ name: RoleNames.ACCURSED_WOLF_FATHER }),\n      ];\n\n      beforeEach(async() => {\n        wrapper = await mountSuspendedComponent(AboutAvailableRoles, {\n          shallow: false,\n          global: { stubs: { AboutAvailableRoleDescription: true } },\n        });\n        const rolesStore = useRolesStore();\n        rolesStore.roles = roles;\n        await nextTick();\n      });\n\n      it(\"should translate first section when roles are set.\", () => {\n        const firstSection = wrapper.find<HTMLDivElement>(\"#about-available-roles-first-section\");\n\n        expect(firstSection.text()).toBe(\"components.AboutAvailableRoles.assistantHasManyRoles, 3\");\n      });\n\n      it(\"should display 3 available roles accordion tabs when 3 roles are set.\", () => {\n        const availableRolesAccordionTabs = wrapper.findAllComponents<typeof AccordionTab>(AccordionTab);\n\n        expect(availableRolesAccordionTabs).toHaveLength(3);\n      });\n\n      it(\"should render roles accordion tabs with header aria labels when roles are set.\", () => {\n        const availableRolesAccordionTabs = wrapper.findAllComponents<typeof AccordionTab>(AccordionTab);\n        const expectedWerewolfAriaLabel = \"components.AboutAvailableRoles.clickToExpandRoleDescription, {\\\"role\\\":\\\"werewolf\\\"}\";\n        const expectedAngelAriaLabel = \"components.AboutAvailableRoles.clickToExpandRoleDescription, {\\\"role\\\":\\\"angel\\\"}\";\n        const expectedAccursedWolfFatherAriaLabel = \"components.AboutAvailableRoles.clickToExpandRoleDescription, {\\\"role\\\":\\\"accursed-wolf-father\\\"}\";\n        const expectedWerewolfPassThroughOptions: AccordionTabPassThroughOptions = { headerAction: { \"aria-label\": expectedWerewolfAriaLabel } };\n        const expectedAngelPassThroughOptions: AccordionTabPassThroughOptions = { headerAction: { \"aria-label\": expectedAngelAriaLabel } };\n        const expectedAccursedWolfFatherPassThroughOptions: AccordionTabPassThroughOptions = { headerAction: { \"aria-label\": expectedAccursedWolfFatherAriaLabel } };\n\n        expect(availableRolesAccordionTabs[0].props(\"pt\")).toStrictEqual<AccordionTabPassThroughOptions>(expectedWerewolfPassThroughOptions);\n        expect(availableRolesAccordionTabs[1].props(\"pt\")).toStrictEqual<AccordionTabPassThroughOptions>(expectedAngelPassThroughOptions);\n        expect(availableRolesAccordionTabs[2].props(\"pt\")).toStrictEqual<AccordionTabPassThroughOptions>(expectedAccursedWolfFatherPassThroughOptions);\n      });\n\n      it(\"should render roles accordion tabs with header images when roles are set.\", () => {\n        const availableRolesAccordion = wrapper.findComponent<typeof Accordion>(Accordion);\n        const roleImages = availableRolesAccordion.findAllComponents<typeof RoleImage>(RoleImage);\n\n        expect(roleImages).toHaveLength(3);\n        expect(roleImages[0].props(\"alt\")).toBe(\"components.AboutAvailableRoles.availableRoleImage, {\\\"role\\\":\\\"werewolf\\\"}\");\n        expect(roleImages[0].props(\"roleName\")).toBe(RoleNames.WEREWOLF);\n        expect(roleImages[1].props(\"alt\")).toBe(\"components.AboutAvailableRoles.availableRoleImage, {\\\"role\\\":\\\"angel\\\"}\");\n        expect(roleImages[1].props(\"roleName\")).toBe(RoleNames.ANGEL);\n        expect(roleImages[2].props(\"alt\")).toBe(\"components.AboutAvailableRoles.availableRoleImage, {\\\"role\\\":\\\"accursed-wolf-father\\\"}\");\n        expect(roleImages[2].props(\"roleName\")).toBe(RoleNames.ACCURSED_WOLF_FATHER);\n      });\n\n      it(\"should display werewolf role description for first accordion tab when first accordion tab is for werewolf role.\", () => {\n        const availableRolesAccordionTabs = wrapper.findAllComponents<typeof AccordionTab>(AccordionTab);\n        const firstAccordionTab = availableRolesAccordionTabs[0];\n        const aboutAvailableRoleDescription = firstAccordionTab.findComponent<typeof AboutAvailableRoleDescription>(AboutAvailableRoleDescription);\n\n        expect(aboutAvailableRoleDescription.props(\"role\")).toStrictEqual<Role>(roles[0]);\n      });\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/game-lobby/GameLobbyHeader/GameLobbyHeader.nuxt.spec.ts": {
      "tests": [
        {
          "id": "68",
          "name": "Game Lobby Header Component should render component and match snapshot when mounted."
        },
        {
          "id": "69",
          "name": "Game Lobby Header Component Title should translate game lobby title when rendered."
        },
        {
          "id": "70",
          "name": "Game Lobby Header Component Game Lobby Player Input Form Game Lobby Player Input should pass empty input value when rendered."
        },
        {
          "id": "71",
          "name": "Game Lobby Header Component Game Lobby Player Input Form Game Lobby Player Input should update ref when input emits update event."
        },
        {
          "id": "72",
          "name": "Game Lobby Header Component Game Lobby Player Input Form Add Player Form should not empty input when game lobby player input ref is not set."
        },
        {
          "id": "73",
          "name": "Game Lobby Header Component Game Lobby Player Input Form Add Player Form should not empty input when add button is disabled."
        },
        {
          "id": "74",
          "name": "Game Lobby Header Component Game Lobby Player Input Form Add Player Form should not trim player input value when add button is disabled and form is submitted."
        },
        {
          "id": "75",
          "name": "Game Lobby Header Component Game Lobby Player Input Form Add Player Form should not add player when trimmed input is empty."
        },
        {
          "id": "76",
          "name": "Game Lobby Header Component Game Lobby Player Input Form Add Player Form should add player when form is valid and submitted."
        },
        {
          "id": "77",
          "name": "Game Lobby Header Component Game Lobby Player Input Form Add Player Form should empty player input when form is valid and submitted."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport { expect } from \"vitest\";\nimport type { Ref } from \"vue\";\n\nimport GameLobbyHeader from \"~/components/pages/game-lobby/GameLobbyHeader/GameLobbyHeader.vue\";\nimport type GameLobbyPlayerInput from \"~/components/pages/game-lobby/GameLobbyHeader/GameLobbyPlayerInput/GameLobbyPlayerInput.vue\";\nimport { useCreateGameDtoStore } from \"~/stores/game/create-game-dto/useCreateGameDtoStore\";\nimport { createFakeCreateGamePlayerDto } from \"~/tests/unit/utils/factories/composables/api/game/dto/create-game/create-game-player/create-game-player.dto.factory\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\nimport type { VueVm } from \"~/tests/unit/utils/types/vue-test-utils.types\";\n\ndescribe(\"Game Lobby Header Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof GameLobbyHeader>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(GameLobbyHeader);\n    const gameLobbyPlayerInput = wrapper.findComponent<typeof GameLobbyPlayerInput>(\"#game-lobby-player-input\");\n    (gameLobbyPlayerInput.vm as unknown as typeof GameLobbyPlayerInput).isAddButtonDisabled = false;\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Title\", () => {\n    it(\"should translate game lobby title when rendered.\", () => {\n      const title = wrapper.find<HTMLHeadElement>(\"#game-lobby-header-title\");\n\n      expect(title.text()).toBe(\"Game Lobby\");\n    });\n  });\n\n  describe(\"Game Lobby Player Input Form\", () => {\n    describe(\"Game Lobby Player Input\", () => {\n      it(\"should pass empty input value when rendered.\", () => {\n        const gameLobbyPlayerInput = wrapper.findComponent<typeof GameLobbyPlayerInput>(\"#game-lobby-player-input\");\n\n        expect(gameLobbyPlayerInput.props(\"modelValue\")).toBe(\"\");\n      });\n\n      it(\"should update ref when input emits update event.\", async() => {\n        const gameLobbyPlayerInput = wrapper.findComponent<typeof GameLobbyPlayerInput>(\"#game-lobby-player-input\");\n        (gameLobbyPlayerInput.vm as VueVm).$emit(\"update:modelValue\", \"Player 1\");\n        await nextTick();\n\n        expect(gameLobbyPlayerInput.props(\"modelValue\")).toBe(\"Player 1\");\n      });\n    });\n\n    describe(\"Add Player Form\", () => {\n      it(\"should not empty input when game lobby player input ref is not set.\", async() => {\n        const gameLobbyPlayerInput = wrapper.findComponent<typeof GameLobbyPlayerInput>(\"#game-lobby-player-input\");\n        (gameLobbyPlayerInput.vm as VueVm).$emit(\"update:modelValue\", \"Player 1\");\n        (wrapper.vm.$root?.$refs.VTU_COMPONENT as { gameLobbyPlayerInput: Ref }).gameLobbyPlayerInput.value = null;\n        const form = wrapper.find<HTMLFormElement>(\"#game-lobby-header-form\");\n        await form.trigger(\"submit\");\n\n        expect(createError).toHaveBeenCalledExactlyOnceWith(\"Game Lobby Player Input is not initialized\");\n      });\n\n      it(\"should not empty input when add button is disabled.\", async() => {\n        const gameLobbyPlayerInput = wrapper.findComponent<typeof GameLobbyPlayerInput>(\"#game-lobby-player-input\");\n        (gameLobbyPlayerInput.vm as VueVm).$emit(\"update:modelValue\", \"Player 1\");\n        (gameLobbyPlayerInput.vm as unknown as typeof GameLobbyPlayerInput).isAddButtonDisabled = true;\n        const form = wrapper.find<HTMLFormElement>(\"#game-lobby-header-form\");\n        await form.trigger(\"submit\");\n\n        expect(gameLobbyPlayerInput.props(\"modelValue\")).toBe(\"Player 1\");\n      });\n\n      it(\"should not trim player input value when add button is disabled and form is submitted.\", async() => {\n        const gameLobbyPlayerInput = wrapper.findComponent<typeof GameLobbyPlayerInput>(\"#game-lobby-player-input\");\n        (gameLobbyPlayerInput.vm as VueVm).$emit(\"update:modelValue\", \"Player 1  \");\n        (gameLobbyPlayerInput.vm as unknown as typeof GameLobbyPlayerInput).isAddButtonDisabled = true;\n        const form = wrapper.find<HTMLFormElement>(\"#game-lobby-header-form\");\n        await form.trigger(\"submit\");\n\n        expect(gameLobbyPlayerInput.props(\"modelValue\")).toBe(\"Player 1  \");\n      });\n\n      it(\"should not add player when trimmed input is empty.\", async() => {\n        const gameLobbyPlayerInput = wrapper.findComponent<typeof GameLobbyPlayerInput>(\"#game-lobby-player-input\");\n        (gameLobbyPlayerInput.vm as VueVm).$emit(\"update:modelValue\", \"   \");\n        const form = wrapper.find<HTMLFormElement>(\"#game-lobby-header-form\");\n        await form.trigger(\"submit\");\n        const createGameDtoStore = useCreateGameDtoStore();\n\n        expect(createGameDtoStore.addPlayerToCreateGameDto).not.toHaveBeenCalled();\n      });\n\n      it(\"should add player when form is valid and submitted.\", async() => {\n        const gameLobbyPlayerInput = wrapper.findComponent<typeof GameLobbyPlayerInput>(\"#game-lobby-player-input\");\n        (gameLobbyPlayerInput.vm as VueVm).$emit(\"update:modelValue\", \"Player 1\");\n        const form = wrapper.find<HTMLFormElement>(\"#game-lobby-header-form\");\n        await form.trigger(\"submit\");\n        const createGameDtoStore = useCreateGameDtoStore();\n        const expectedCreatedPlayer = createFakeCreateGamePlayerDto({\n          name: \"Player 1\",\n          role: { name: undefined },\n        });\n\n        expect(createGameDtoStore.addPlayerToCreateGameDto).toHaveBeenCalledExactlyOnceWith(expectedCreatedPlayer);\n      });\n\n      it(\"should empty player input when form is valid and submitted.\", async() => {\n        const gameLobbyPlayerInput = wrapper.findComponent<typeof GameLobbyPlayerInput>(\"#game-lobby-player-input\");\n        (gameLobbyPlayerInput.vm as VueVm).$emit(\"update:modelValue\", \"Player 1\");\n        const form = wrapper.find<HTMLFormElement>(\"#game-lobby-header-form\");\n        await form.trigger(\"submit\");\n\n        expect(gameLobbyPlayerInput.props(\"modelValue\")).toBe(\"\");\n      });\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/about/AboutWerewolvesAssistant/AboutWerewolvesAssistant.nuxt.spec.ts": {
      "tests": [
        {
          "id": "78",
          "name": "About Werewolves Assistant Component should render component and match snapshot when mounted."
        },
        {
          "id": "79",
          "name": "About Werewolves Assistant Component Title should display translated title when rendered."
        },
        {
          "id": "80",
          "name": "About Werewolves Assistant Component Sections should translate first section when rendered."
        },
        {
          "id": "81",
          "name": "About Werewolves Assistant Component Sections should translate second section when rendered."
        },
        {
          "id": "82",
          "name": "About Werewolves Assistant Component Sections should translate third section for each bullet item when rendered."
        },
        {
          "id": "83",
          "name": "About Werewolves Assistant Component Sections should translate fourth section when rendered."
        },
        {
          "id": "84",
          "name": "About Werewolves Assistant Component Sections Disclaimer should translate disclaimer title when rendered."
        },
        {
          "id": "85",
          "name": "About Werewolves Assistant Component Sections Disclaimer should translate disclaimer first section when rendered."
        },
        {
          "id": "86",
          "name": "About Werewolves Assistant Component Sections Disclaimer should translate disclaimer second section when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport { expect } from \"vitest\";\n\nimport AboutWerewolvesAssistant from \"~/components/pages/about/AboutWerewolvesAssistant.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"About Werewolves Assistant Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof AboutWerewolvesAssistant>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(AboutWerewolvesAssistant);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Title\", () => {\n    it(\"should display translated title when rendered.\", () => {\n      const title = wrapper.find<HTMLHeadElement>(\"#about-werewolves-assistant-title\");\n\n      expect(title.text()).toBe(\"The Werewolves Assistant takes the stage !\");\n    });\n  });\n\n  describe(\"Sections\", () => {\n    it(\"should translate first section when rendered.\", () => {\n      const firstSection = wrapper.find<HTMLParagraphElement>(\"#about-werewolves-assistant-first-section\");\n\n      expect(firstSection.text()).toBe(\"To ease the heavy task that falls on the game master when hosting a Werewolves game, \" +\n      \"the Werewolves Assistant proves to be the ideal tool !\");\n    });\n\n    it(\"should translate second section when rendered.\", () => {\n      const secondSection = wrapper.find<HTMLParagraphElement>(\"#about-werewolves-assistant-second-section\");\n\n      expect(secondSection.text()).toBe(\"This Assistant offers a variety of features, including:\");\n    });\n\n    it(\"should translate third section for each bullet item when rendered.\", () => {\n      const thirdSection = wrapper.find<HTMLUListElement>(\"#about-werewolves-assistant-third-section\");\n      const thirdSectionBulletItems = thirdSection.findAll<HTMLLIElement>(\"li\");\n\n      expect(thirdSectionBulletItems).toHaveLength(5);\n      expect(thirdSectionBulletItems[0].text()).toBe(\"A game composition screen allowing the creation of sessions for 4 to 40 players, \" +\n      \"with the option to randomly assign roles.\");\n      expect(thirdSectionBulletItems[1].text()).toBe(\"A playful game tracking interface, providing a pleasant visual experience.\");\n      expect(thirdSectionBulletItems[2].text()).toBe(\"For each key event, the ability to input players' choices, such as the selection of \" +\n      \"the Werewolves' target or the election of the mayor.\");\n      expect(thirdSectionBulletItems[3].text()).toBe(\"The Assistant handles the scheduling of game turns, displaying deaths and other events, \" +\n      \"as well as retaining all choices made during the game.\");\n      expect(thirdSectionBulletItems[4].text()).toBe(\"At the end of the game, a summary is generated, indicating the victorious camp and \" +\n      \"providing a complete history of past actions.\");\n    });\n\n    it(\"should translate fourth section when rendered.\", () => {\n      const fourthSection = wrapper.find<HTMLParagraphElement>(\"#about-werewolves-assistant-fourth-section\");\n\n      expect(fourthSection.text()).toBe(\"In summary, the Werewolves Assistant invites you to (re)discover the joy of taking on the role of the game master in a Werewolves \" +\n      \"game. Accessible from any device with an internet browser, this tool is and will remain entirely FREE.\");\n    });\n\n    describe(\"Disclaimer\", () => {\n      it(\"should translate disclaimer title when rendered.\", () => {\n        const disclaimerTitle = wrapper.find<HTMLParagraphElement>(\"#about-werewolves-assistant-disclaimer-title\");\n\n        expect(disclaimerTitle.text()).toBe(\"However, please be aware\");\n      });\n\n      it(\"should translate disclaimer first section when rendered.\", () => {\n        const disclaimerFirstSection = wrapper.find<HTMLParagraphElement>(\"#about-werewolves-assistant-disclaimer-first-section\");\n\n        expect(disclaimerFirstSection.text()).toBe(\"The Werewolves Assistant has no intention of replacing the original \" +\n        \"Werewolves of Miller's Hollow™ game. Its use requires prior possession of a game with its cards.\");\n      });\n\n      it(\"should translate disclaimer second section when rendered.\", () => {\n        const disclaimerSecondSection = wrapper.find<HTMLParagraphElement>(\"#about-werewolves-assistant-disclaimer-second-section\");\n\n        expect(disclaimerSecondSection.text()).toBe(\"It is important to emphasize that the Assistant positions itself as an exclusive aid \" +\n        \"to the game master, facilitating game management without altering the essence and experience unique to the original board game. \" +\n        \"Thus, it complements and enhances the game's dynamics while preserving its authentic character.\");\n      });\n    });\n  });\n});"
    },
    "tests/unit/specs/stores/game/create-game-dto/useCreateGameDtoStore.spec.ts": {
      "tests": [
        {
          "id": "87",
          "name": "Create Game Dto Store should have initial state when created."
        },
        {
          "id": "88",
          "name": "Create Game Dto Store setCreateGameDto should set createGameDto when called."
        },
        {
          "id": "89",
          "name": "Create Game Dto Store resetCreateGameDto should reset create game dto when called."
        },
        {
          "id": "90",
          "name": "Create Game Dto Store addPlayerToCreateGameDto should add player to createGameDto when called."
        },
        {
          "id": "91",
          "name": "Create Game Dto Store setPlayersToCreateGameDto should set players to createGameDto when called."
        },
        {
          "id": "92",
          "name": "Create Game Dto Store removePlayerFromCreateGameDto should remove player from createGameDto when called."
        },
        {
          "id": "93",
          "name": "Create Game Dto Store removePlayerFromCreateGameDto should not remove player from createGameDto when player not found."
        }
      ],
      "source": "import { createPinia, setActivePinia } from \"pinia\";\n\nimport type { CreateGamePlayerDto } from \"~/composables/api/game/dto/create-game/create-game-player/create-game-player.dto\";\nimport type { CreateGameDto } from \"~/composables/api/game/dto/create-game/create-game.dto\";\nimport { useCreateGameDtoStore } from \"~/stores/game/create-game-dto/useCreateGameDtoStore\";\nimport { createFakeCreateGamePlayerDto } from \"~/tests/unit/utils/factories/composables/api/game/dto/create-game/create-game-player/create-game-player.dto.factory\";\nimport { createFakeCreateGameDto } from \"~/tests/unit/utils/factories/composables/api/game/dto/create-game/create-game.dto.factory\";\n\ndescribe(\"Create Game Dto Store\", () => {\n  beforeEach(() => {\n    setActivePinia(createPinia());\n  });\n\n  it(\"should have initial state when created.\", () => {\n    const createGameDtoStore = useCreateGameDtoStore();\n    const expectedCreateGameDto = createFakeCreateGameDto();\n\n    expect(createGameDtoStore.createGameDto).toStrictEqual<CreateGameDto>(expectedCreateGameDto);\n  });\n\n  describe(\"setCreateGameDto\", () => {\n    it(\"should set createGameDto when called.\", () => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      const expectedCreateGameDto = createFakeCreateGameDto({\n        players: [\n          createFakeCreateGamePlayerDto(),\n          createFakeCreateGamePlayerDto(),\n          createFakeCreateGamePlayerDto(),\n        ],\n      });\n\n      createGameDtoStore.setCreateGameDto(expectedCreateGameDto);\n\n      expect(createGameDtoStore.createGameDto).toStrictEqual<CreateGameDto>(expectedCreateGameDto);\n    });\n  });\n\n  describe(\"resetCreateGameDto\", () => {\n    it(\"should reset create game dto when called.\", () => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      createGameDtoStore.createGameDto = createFakeCreateGameDto({\n        players: [\n          createFakeCreateGamePlayerDto(),\n          createFakeCreateGamePlayerDto(),\n          createFakeCreateGamePlayerDto(),\n        ],\n      });\n      const expectedCreateGameDto = createFakeCreateGameDto({ players: [] });\n      createGameDtoStore.resetCreateGameDto();\n\n      expect(createGameDtoStore.createGameDto).toStrictEqual<CreateGameDto>(expectedCreateGameDto);\n    });\n  });\n\n  describe(\"addPlayerToCreateGameDto\", () => {\n    it(\"should add player to createGameDto when called.\", () => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      const player = createFakeCreateGamePlayerDto();\n      const expectedCreateGameDto = createFakeCreateGameDto({ players: [player] });\n\n      createGameDtoStore.addPlayerToCreateGameDto(player);\n\n      expect(createGameDtoStore.createGameDto).toStrictEqual<CreateGameDto>(expectedCreateGameDto);\n    });\n  });\n\n  describe(\"setPlayersToCreateGameDto\", () => {\n    it(\"should set players to createGameDto when called.\", () => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      const players = [\n        createFakeCreateGamePlayerDto(),\n        createFakeCreateGamePlayerDto(),\n        createFakeCreateGamePlayerDto(),\n      ];\n      createGameDtoStore.setPlayersToCreateGameDto(players);\n\n      expect(createGameDtoStore.createGameDto.players).toStrictEqual<CreateGamePlayerDto[]>(players);\n    });\n  });\n\n  describe(\"removePlayerFromCreateGameDto\", () => {\n    it(\"should remove player from createGameDto when called.\", () => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      const players = [\n        createFakeCreateGamePlayerDto({ name: \"player1\" }),\n        createFakeCreateGamePlayerDto({ name: \"player2\" }),\n        createFakeCreateGamePlayerDto({ name: \"player3\" }),\n      ];\n      createGameDtoStore.createGameDto.players = players;\n      const expectedCreateGameDto = createFakeCreateGameDto({\n        players: [\n          players[0],\n          players[2],\n        ],\n      });\n      createGameDtoStore.removePlayerFromCreateGameDto(players[1].name);\n\n      expect(createGameDtoStore.createGameDto).toStrictEqual<CreateGameDto>(expectedCreateGameDto);\n    });\n\n    it(\"should not remove player from createGameDto when player not found.\", () => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      const players = [\n        createFakeCreateGamePlayerDto({ name: \"player1\" }),\n        createFakeCreateGamePlayerDto({ name: \"player2\" }),\n        createFakeCreateGamePlayerDto({ name: \"player3\" }),\n      ];\n      createGameDtoStore.createGameDto.players = players;\n      const expectedCreateGameDto = createFakeCreateGameDto({ players });\n\n      createGameDtoStore.removePlayerFromCreateGameDto(\"player4\");\n\n      expect(createGameDtoStore.createGameDto).toStrictEqual<CreateGameDto>(expectedCreateGameDto);\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/about/AboutAvailableRoles/AboutAvailableRoleDescription/AboutAvailableRoleDescription.nuxt.spec.ts": {
      "tests": [
        {
          "id": "94",
          "name": "About Available Role Description Component should render component and match snapshot when mounted."
        },
        {
          "id": "95",
          "name": "About Available Role Description Component Role Left Description Role Image should display role image when rendered."
        },
        {
          "id": "96",
          "name": "About Available Role Description Component Role Left Description Role Image should display role image with correct alt when rendered."
        },
        {
          "id": "97",
          "name": "About Available Role Description Component Role Left Description should display role name when rendered."
        },
        {
          "id": "98",
          "name": "About Available Role Description Component Role Left Description should display role type badge when rendered."
        },
        {
          "id": "99",
          "name": "About Available Role Description Component Role Left Description should display role origin badge when rendered."
        },
        {
          "id": "100",
          "name": "About Available Role Description Component Role Right Description should display role description lines when rendered."
        },
        {
          "id": "101",
          "name": "About Available Role Description Component Role Right Description should not display role description lines when rendered if role description is not set in messages."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport type { AboutAvailableRoleDescriptionProps } from \"~/components/pages/about/AboutAvailableRoles/AboutAvailableRoleDescription/about-available-role-description.types\";\nimport AboutAvailableRoleDescription from \"~/components/pages/about/AboutAvailableRoles/AboutAvailableRoleDescription/AboutAvailableRoleDescription.vue\";\nimport type RoleImage from \"~/components/shared/role/RoleImage/RoleImage.vue\";\nimport type RoleOriginBadge from \"~/components/shared/role/RoleOriginBadge/RoleOriginBadge.vue\";\nimport type RoleTypeBadge from \"~/components/shared/role/RoleTypeBadge/RoleTypeBadge.vue\";\nimport { RoleNames, RoleOrigins, RoleTypes } from \"~/composables/api/role/enums/role.enums\";\nimport type { Role } from \"~/composables/api/role/types/role.class\";\nimport { createFakeRole } from \"~/tests/unit/utils/factories/composables/api/role/role.factory\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"About Available Role Description Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof AboutAvailableRoleDescription>>;\n  const defaultRole: Role = createFakeRole({\n    name: RoleNames.WEREWOLF,\n    type: RoleTypes.WEREWOLF,\n    origin: RoleOrigins.CLASSIC,\n  });\n  const defaultProps: AboutAvailableRoleDescriptionProps = { role: defaultRole };\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(AboutAvailableRoleDescription, { props: defaultProps });\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Role Left Description\", () => {\n    describe(\"Role Image\", () => {\n      it(\"should display role image when rendered.\", () => {\n        const roleImage = wrapper.findComponent<typeof RoleImage>(\".available-role-description-role-image\");\n\n        expect(roleImage.props(\"roleName\")).toBe(RoleNames.WEREWOLF);\n      });\n\n      it(\"should display role image with correct alt when rendered.\", () => {\n        const roleImage = wrapper.find<HTMLImageElement>(\".available-role-description-role-image\");\n\n        expect(roleImage.attributes(\"alt\")).toBe(\"components.AboutAvailableRoleDescription.roleDescriptionLeftImageAlt, {\\\"role\\\":\\\"shared.role.name.werewolf\\\"}\");\n      });\n    });\n\n    it(\"should display role name when rendered.\", () => {\n      const roleName = wrapper.find<HTMLHeadElement>(\".available-role-description-role-name\");\n\n      expect(roleName.text()).toBe(\"shared.role.name.werewolf\");\n    });\n\n    it(\"should display role type badge when rendered.\", () => {\n      const roleTypeBadge = wrapper.findComponent<typeof RoleTypeBadge>(\".available-role-description-role-type-badge\");\n\n      expect(roleTypeBadge.props(\"roleType\")).toBe(RoleTypes.WEREWOLF);\n    });\n\n    it(\"should display role origin badge when rendered.\", () => {\n      const roleOriginBadge = wrapper.findComponent<typeof RoleOriginBadge>(\".available-role-description-role-origin-badge\");\n\n      expect(roleOriginBadge.props(\"roleOrigin\")).toBe(RoleOrigins.CLASSIC);\n    });\n  });\n\n  describe(\"Role Right Description\", () => {\n    it(\"should display role description lines when rendered.\", () => {\n      const roleDescriptionLines = wrapper.findAll<HTMLParagraphElement>(\".available-role-description-role-description-line\");\n\n      expect(roleDescriptionLines).toHaveLength(4);\n      expect(roleDescriptionLines[0].text()).toBe(\"components.AboutAvailableRoleDescription.descriptions.werewolf.hisGoalIsToKillVillagers\");\n      expect(roleDescriptionLines[1].text()).toBe(\"components.AboutAvailableRoleDescription.descriptions.werewolf.eachNightEatsVillager\");\n      expect(roleDescriptionLines[2].text()).toBe(\"components.AboutAvailableRoleDescription.descriptions.werewolf.numberOfWolvesVaries\");\n      expect(roleDescriptionLines[3].text()).toBe(\"components.AboutAvailableRoleDescription.descriptions.werewolf.werewolvesCantEatEachOther\");\n    });\n\n    it(\"should not display role description lines when rendered if role description is not set in messages.\", async() => {\n      const unknownRole = createFakeRole({ name: \"unknown\" as RoleNames });\n      wrapper = await mountSuspendedComponent(AboutAvailableRoleDescription, { props: { role: unknownRole } });\n      const roleDescriptionLines = wrapper.findAll<HTMLParagraphElement>(\".available-role-description-role-description-line\");\n\n      expect(roleDescriptionLines).toHaveLength(0);\n    });\n  });\n});"
    },
    "tests/unit/specs/components/layouts/default/ParametersMenu/ParametersMenu.nuxt.spec.ts": {
      "tests": [
        {
          "id": "102",
          "name": "Parameters Menu Component should render component and match snapshot when mounted."
        },
        {
          "id": "103",
          "name": "Parameters Menu Component Parameters Menu Button should open the parameters menu when clicked."
        },
        {
          "id": "104",
          "name": "Parameters Menu Component Parameters Menu Button should not open the parameters menu and throw error when clicked if the menu is not found in refs."
        },
        {
          "id": "105",
          "name": "Parameters Menu Component Parameters Menu should pass the correct items to the menu when mounted."
        },
        {
          "id": "106",
          "name": "Parameters Menu Component Parameters Menu should navigate to home page when clicking on back to home button."
        }
      ],
      "source": "import { mockNuxtImport } from \"@nuxt/test-utils/runtime\";\nimport type { mount } from \"@vue/test-utils\";\nimport { MouseEvent } from \"happy-dom\";\nimport Menu from \"primevue/menu\";\nimport type { MenuItem } from \"primevue/menuitem\";\nimport { beforeAll, expect } from \"vitest\";\nimport type { Mock } from \"vitest\";\nimport type { Ref } from \"vue\";\n\nimport type { VuePrimeButton } from \"#components\";\nimport ParametersMenu from \"~/components/layouts/default/NavBar/ParametersMenu/ParametersMenu.vue\";\nimport { createFakeI18n } from \"~/tests/unit/utils/factories/composables/i18n/useI18n.factory\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"Parameters Menu Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof ParametersMenu>>;\n\n  beforeAll(() => {\n    mockNuxtImport<() => ReturnType<typeof createFakeI18n>>(\n      \"useI18n\",\n    () => vi.fn(() => createFakeI18n()),\n    );\n  });\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(ParametersMenu);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Parameters Menu Button\", () => {\n    let toggleMenuMock: Mock;\n\n    beforeEach(async() => {\n      toggleMenuMock = vi.fn();\n      wrapper = await mountSuspendedComponent(ParametersMenu, {\n        global: {\n          stubs: {\n            Menu: {\n              template: \"<div></div>\",\n              methods: { toggle: toggleMenuMock },\n            },\n          },\n        },\n      });\n    });\n\n    it(\"should open the parameters menu when clicked.\", async() => {\n      const parametersMenuButton = wrapper.findComponent<typeof VuePrimeButton>(\"[aria-label='Parameters']\");\n      await parametersMenuButton.trigger(\"click\");\n\n      expect(toggleMenuMock).toHaveBeenCalledExactlyOnceWith(expect.any(MouseEvent));\n    });\n\n    it(\"should not open the parameters menu and throw error when clicked if the menu is not found in refs.\", async() => {\n      wrapper = await mountSuspendedComponent(ParametersMenu, {\n        global: {\n          stubs: {\n            Menu: {\n              template: \"<div></div>\",\n              methods: { toggle: toggleMenuMock },\n            },\n          },\n        },\n      });\n      (wrapper.vm.$root?.$refs.VTU_COMPONENT as { parametersMenu: Ref }).parametersMenu.value = null;\n      const parametersMenuButton = wrapper.findComponent<typeof VuePrimeButton>(\"[aria-label='Parameters']\");\n      await parametersMenuButton.trigger(\"click\");\n\n      expect(toggleMenuMock).not.toHaveBeenCalled();\n      expect(createError).toHaveBeenCalledExactlyOnceWith(\"Parameters Menu is not initialized\");\n    });\n  });\n\n  describe(\"Parameters Menu\", () => {\n    beforeEach(async() => {\n      wrapper = await mountSuspendedComponent(ParametersMenu, { shallow: false });\n      const parametersMenuButton = wrapper.findComponent<typeof VuePrimeButton>(\"[aria-label='Parameters']\");\n      await parametersMenuButton.trigger(\"click\");\n    });\n\n    it(\"should pass the correct items to the menu when mounted.\", () => {\n      const parametersMenu = wrapper.findComponent<typeof Menu>(Menu);\n\n      expect(parametersMenu.props(\"model\")).toStrictEqual<MenuItem[]>([\n        {\n          label: \"components.ParametersMenu.backToHome\",\n          icon: \"fa fa-sign-out\",\n          arialLabel: \"components.ParametersMenu.backToHome\",\n          command: expect.any(Function) as () => Promise<void>,\n        },\n      ]);\n    });\n\n    it(\"should navigate to home page when clicking on back to home button.\", () => {\n      document.querySelector<HTMLElement>(\"[aria-label=\\\"components.ParametersMenu.backToHome\\\"] .p-menuitem-link\")?.click();\n\n      expect(navigateTo).toHaveBeenCalledExactlyOnceWith(\"/\");\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/game-lobby/GameLobbyPlayersParty/GameLobbyPlayerCard/GameLobbyPlayerCard.nuxt.spec.ts": {
      "tests": [
        {
          "id": "107",
          "name": "Game Lobby Player Card Component should render component and match snapshot when mounted."
        },
        {
          "id": "108",
          "name": "Game Lobby Player Card Component Delete button should have translated tooltip with player name when rendered."
        },
        {
          "id": "109",
          "name": "Game Lobby Player Card Component Delete button should remove player from party when clicked."
        },
        {
          "id": "110",
          "name": "Game Lobby Player Card Component Role should translate role not selected when player doesn't have role yet."
        },
        {
          "id": "111",
          "name": "Game Lobby Player Card Component Role should translate role when player has role."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport type Button from \"primevue/button\";\nimport type { Mock } from \"vitest\";\n\nimport type { GameLobbyPlayerCardProps } from \"~/components/pages/game-lobby/GameLobbyPlayersParty/GameLobbyPlayerCard/game-lobby-player-card.types\";\nimport GameLobbyPlayerCard from \"~/components/pages/game-lobby/GameLobbyPlayersParty/GameLobbyPlayerCard/GameLobbyPlayerCard.vue\";\nimport { RoleNames } from \"~/composables/api/role/enums/role.enums\";\nimport * as UseRoleName from \"~/composables/api/role/useRoleName\";\nimport { useCreateGameDtoStore } from \"~/stores/game/create-game-dto/useCreateGameDtoStore\";\nimport { createFakeCreateGamePlayerDto } from \"~/tests/unit/utils/factories/composables/api/game/dto/create-game/create-game-player/create-game-player.dto.factory\";\nimport { pTooltipDirectiveBinder } from \"~/tests/unit/utils/helpers/directive.helpers\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"Game Lobby Player Card Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof GameLobbyPlayerCard>>;\n  const defaultProps: GameLobbyPlayerCardProps = {\n    player: createFakeCreateGamePlayerDto({\n      name: \"Toto\",\n      role: { name: RoleNames.WEREWOLF },\n    }),\n  };\n  let mocks: {\n    composables: {\n      useRoleName: {\n        getRoleNameLabel: Mock;\n      }\n    }\n  };\n\n  beforeEach(async() => {\n    mocks = { composables: { useRoleName: { getRoleNameLabel: vi.fn() } } };\n    vi.spyOn(UseRoleName, \"useRoleName\").mockImplementation(() => mocks.composables.useRoleName);\n    wrapper = await mountSuspendedComponent(GameLobbyPlayerCard, { props: defaultProps });\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Delete button\", () => {\n    it(\"should have translated tooltip with player name when rendered.\", async() => {\n      const tooltip = { value: undefined };\n      const directives = { ...pTooltipDirectiveBinder(tooltip, \"[aria-label='Remove player Toto']\") };\n      wrapper = await mountSuspendedComponent(GameLobbyPlayerCard, { props: defaultProps, global: { directives } });\n\n      expect(tooltip.value).toBe(\"Remove player Toto\");\n    });\n\n    it(\"should remove player from party when clicked.\", async() => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      const deleteButton = wrapper.findComponent<Button>(\"[aria-label='Remove player Toto']\");\n      await deleteButton.trigger(\"click\");\n\n      expect(createGameDtoStore.removePlayerFromCreateGameDto).toHaveBeenCalledExactlyOnceWith(defaultProps.player.name);\n    });\n  });\n\n  describe(\"Role\", () => {\n    it(\"should translate role not selected when player doesn't have role yet.\", async() => {\n      wrapper = await mountSuspendedComponent(GameLobbyPlayerCard, { props: { player: createFakeCreateGamePlayerDto({ name: \"Toto\" }) } });\n      const role = wrapper.find<HTMLSpanElement>(\".player-card-role\");\n\n      expect(role.text()).toBe(\"components.GameLobbyPlayerCard.roleNotSelected\");\n    });\n\n    it(\"should translate role when player has role.\", async() => {\n      mocks.composables.useRoleName.getRoleNameLabel.mockReturnValue(\"Translated Role\");\n      wrapper = await mountSuspendedComponent(GameLobbyPlayerCard, { props: defaultProps });\n      const role = wrapper.find<HTMLSpanElement>(\".player-card-role\");\n\n      expect(role.text()).toBe(\"Translated Role\");\n    });\n  });\n});"
    },
    "tests/unit/specs/composables/vue-prime/useVuePrimeToasts.spec.ts": {
      "tests": [
        {
          "id": "112",
          "name": "Use Vue Prime Toasts Composable addToast should add a toast with default options when called."
        },
        {
          "id": "113",
          "name": "Use Vue Prime Toasts Composable addSuccessToast should add a success toast with default options when called."
        },
        {
          "id": "114",
          "name": "Use Vue Prime Toasts Composable addInfoToast should add an info toast with default options when called."
        },
        {
          "id": "115",
          "name": "Use Vue Prime Toasts Composable addWarnToast should add a warn toast with default options when called."
        },
        {
          "id": "116",
          "name": "Use Vue Prime Toasts Composable addErrorToast should add an error toast with default options when called."
        }
      ],
      "source": "import type { ToastMessageOptions } from \"primevue/toast\";\nimport type { Mock } from \"vitest\";\nimport * as UseToast from \"primevue/usetoast\";\n\nimport { useVuePrimeToasts } from \"~/composables/vue-prime/useVuePrimeToasts\";\n\ndescribe(\"Use Vue Prime Toasts Composable\", () => {\n  let mocks: {\n    composables: {\n      useToast: {\n        add: Mock;\n        remove: Mock;\n        removeGroup: Mock;\n        removeAllGroups: Mock;\n      };\n    };\n  };\n\n  beforeEach(() => {\n    mocks = {\n      composables: {\n        useToast: {\n          add: vi.fn(),\n          remove: vi.fn(),\n          removeGroup: vi.fn(),\n          removeAllGroups: vi.fn(),\n        },\n      },\n    };\n    vi.spyOn(UseToast, \"useToast\").mockReturnValue(mocks.composables.useToast);\n  });\n\n  describe(\"addToast\", () => {\n    it(\"should add a toast with default options when called.\", () => {\n      const { addToast } = useVuePrimeToasts();\n      const options: ToastMessageOptions = { summary: \"summary\", detail: \"detail\" };\n      addToast(options);\n      const expectedOptions = { life: 4000, closable: true, ...options };\n\n      expect(mocks.composables.useToast.add).toHaveBeenCalledExactlyOnceWith(expectedOptions);\n    });\n  });\n\n  describe(\"addSuccessToast\", () => {\n    it(\"should add a success toast with default options when called.\", () => {\n      const { addSuccessToast } = useVuePrimeToasts();\n      const options: ToastMessageOptions = { summary: \"summary\", detail: \"detail\" };\n      addSuccessToast(options);\n      const expectedOptions = { severity: \"success\", life: 4000, closable: true, ...options };\n\n      expect(mocks.composables.useToast.add).toHaveBeenCalledExactlyOnceWith(expectedOptions);\n    });\n  });\n\n  describe(\"addInfoToast\", () => {\n    it(\"should add an info toast with default options when called.\", () => {\n      const { addInfoToast } = useVuePrimeToasts();\n      const options: ToastMessageOptions = { summary: \"summary\", detail: \"detail\" };\n      addInfoToast(options);\n      const expectedOptions = { severity: \"info\", life: 4000, closable: true, ...options };\n\n      expect(mocks.composables.useToast.add).toHaveBeenCalledExactlyOnceWith(expectedOptions);\n    });\n  });\n\n  describe(\"addWarnToast\", () => {\n    it(\"should add a warn toast with default options when called.\", () => {\n      const { addWarnToast } = useVuePrimeToasts();\n      const options: ToastMessageOptions = { summary: \"summary\", detail: \"detail\" };\n      addWarnToast(options);\n      const expectedOptions = { severity: \"warn\", life: 4000, closable: true, ...options };\n\n      expect(mocks.composables.useToast.add).toHaveBeenCalledExactlyOnceWith(expectedOptions);\n    });\n  });\n\n  describe(\"addErrorToast\", () => {\n    it(\"should add an error toast with default options when called.\", () => {\n      const { addErrorToast } = useVuePrimeToasts();\n      const options: ToastMessageOptions = { summary: \"summary\", detail: \"detail\" };\n      addErrorToast(options);\n      const expectedOptions = { severity: \"error\", life: 4000, closable: true, ...options };\n\n      expect(mocks.composables.useToast.add).toHaveBeenCalledExactlyOnceWith(expectedOptions);\n    });\n  });\n});"
    },
    "tests/unit/specs/components/shared/game/player/PlayerCard/PlayerCard.nuxt.spec.ts": {
      "tests": [
        {
          "id": "117",
          "name": "Player Card Component should render component and match snapshot when mounted."
        },
        {
          "id": "118",
          "name": "Player Card Component Selector Button should render selector button without aria label when not provided in props."
        },
        {
          "id": "119",
          "name": "Player Card Component Selector Button should emit playerCardSelectorClick event when clicked."
        },
        {
          "id": "120",
          "name": "Player Card Component Selector Button should have tooltip with aria label as value when doesShowSelectorTooltip prop is true."
        },
        {
          "id": "121",
          "name": "Player Card Component Selector Button should not have tooltip when doesShowSelectorTooltip prop is false."
        },
        {
          "id": "122",
          "name": "Player Card Component Selector Button Role Image should render role image of player with correct alt when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport type { PlayerCardProps } from \"~/components/shared/game/player/PlayerCard/player-card.types\";\nimport PlayerCard from \"~/components/shared/game/player/PlayerCard/PlayerCard.vue\";\nimport RoleImage from \"~/components/shared/role/RoleImage/RoleImage.vue\";\nimport { RoleNames } from \"~/composables/api/role/enums/role.enums\";\nimport { pTooltipDirectiveBinder } from \"~/tests/unit/utils/helpers/directive.helpers\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"Player Card Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof PlayerCard>>;\n  const defaultProps: PlayerCardProps = {\n    playerName: \"Player\",\n    playerRole: RoleNames.WEREWOLF,\n    selectorAriaLabel: \"Select Player\",\n  };\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(PlayerCard, { props: defaultProps });\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Selector Button\", () => {\n    it(\"should render selector button without aria label when not provided in props.\", async() => {\n      wrapper = await mountSuspendedComponent(PlayerCard, { props: { ...defaultProps, selectorAriaLabel: undefined } });\n      const selectorButton = wrapper.find<HTMLButtonElement>(\".player-card-selector\");\n\n      expect(selectorButton.attributes(\"aria-label\")).toBeUndefined();\n    });\n\n    it(\"should emit playerCardSelectorClick event when clicked.\", async() => {\n      const selectorButton = wrapper.find<HTMLButtonElement>(\"[aria-label=\\\"Select Player\\\"]\");\n      await selectorButton.trigger(\"click\");\n      const emittedEvents = wrapper.emitted(\"playerCardSelectorClick\");\n\n      expect(emittedEvents).toHaveLength(1);\n    });\n\n    it(\"should have tooltip with aria label as value when doesShowSelectorTooltip prop is true.\", async() => {\n      const tooltip = { value: undefined };\n      const directives = { ...pTooltipDirectiveBinder(tooltip, \".player-card-selector\") };\n      wrapper = await mountSuspendedComponent(PlayerCard, { props: { ...defaultProps, doesShowSelectorTooltip: true }, global: { directives } });\n\n      expect(tooltip.value).toBe(\"Select Player\");\n    });\n\n    it(\"should not have tooltip when doesShowSelectorTooltip prop is false.\", async() => {\n      const tooltip = { value: undefined };\n      const directives = { ...pTooltipDirectiveBinder(tooltip, \".player-card-selector\") };\n      wrapper = await mountSuspendedComponent(PlayerCard, { props: { ...defaultProps, doesShowSelectorTooltip: false }, global: { directives } });\n\n      expect(tooltip.value).toBeUndefined();\n    });\n\n    describe(\"Role Image\", () => {\n      it(\"should render role image of player with correct alt when rendered.\", () => {\n        const roleImage = wrapper.findComponent<typeof RoleImage>(RoleImage);\n\n        expect(roleImage.attributes(\"alt\")).toBe(\"components.PlayerCard.playerCardRoleImageAlt, {\\\"playerName\\\":\\\"Player\\\"}\");\n      });\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/about/AboutCreator/AboutCreator.nuxt.spec.ts": {
      "tests": [
        {
          "id": "123",
          "name": "About Creator Component should render component and match snapshot when mounted."
        },
        {
          "id": "124",
          "name": "About Creator Component Title should translate title when rendered."
        },
        {
          "id": "125",
          "name": "About Creator Component Sections should translate first section when rendered."
        },
        {
          "id": "126",
          "name": "About Creator Component Sections should translate portfolio button when rendered."
        },
        {
          "id": "127",
          "name": "About Creator Component Sections should translate second section when rendered."
        },
        {
          "id": "128",
          "name": "About Creator Component Sections should translate third section when rendered."
        },
        {
          "id": "129",
          "name": "About Creator Component Sections should translate fourth section when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport AboutCreator from \"~/components/pages/about/AboutCreator.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"About Creator Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof AboutCreator>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(AboutCreator);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Title\", () => {\n    it(\"should translate title when rendered.\", () => {\n      const title = wrapper.find<HTMLHeadElement>(\"#about-creator-title\");\n\n      expect(title.text()).toBe(\"A word from the creator\");\n    });\n  });\n\n  describe(\"Sections\", () => {\n    it(\"should translate first section when rendered.\", () => {\n      const firstSection = wrapper.find<HTMLParagraphElement>(\"#about-creator-first-section\");\n\n      expect(firstSection.text()).toBe(\"I am Antoine ZANARDI, a Full-Stack Web developer and a fan of open source in general. \" +\n      \"If you want to learn more about me, I invite you to explore my portfolio.\");\n    });\n\n    it(\"should translate portfolio button when rendered.\", () => {\n      const portfolioButton = wrapper.find<HTMLAnchorElement>(\"#about-creator-portfolio-button\");\n\n      expect(portfolioButton.text()).toBe(\"My portfolio\");\n    });\n\n    it(\"should translate second section when rendered.\", () => {\n      const secondSection = wrapper.find<HTMLParagraphElement>(\"#about-creator-second-section\");\n\n      expect(secondSection.text()).toBe(\"For me, Werewolves of Miller's Hollow™ game is one of the best games to play with friends or \" +\n      \"family around a table, where alliances and betrayals intertwine, much like in Mario Kart. \" +\n      \"As the game progresses, the true nature of each player is revealed, masks fall, and everyone feels threatened. Each game is a unique adventure, full of unexpected twists.\");\n    });\n\n    it(\"should translate third section when rendered.\", () => {\n      const thirdSection = wrapper.find<HTMLParagraphElement>(\"#about-creator-third-section\");\n\n      expect(thirdSection.text()).toBe(\"As a big fan of the game master role, I've always wanted to share the rewarding feeling of being \" +\n      \"the conductor during a game. So, I created this assistant so that anyone can take on this important role, in any game configuration.\");\n    });\n\n    it(\"should translate fourth section when rendered.\", () => {\n      const fourthSection = wrapper.find<HTMLParagraphElement>(\"#about-creator-forth-section\");\n\n      expect(fourthSection.text()).toBe(\"Your feedback on this assistant is welcome. \" +\n      \"It was created to serve all game masters, whether novice or expert, and make your games memorable. Have fun!\");\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/about/AboutHowToContribute/AboutHowToContribute.nuxt.spec.ts": {
      "tests": [
        {
          "id": "130",
          "name": "About How To Contribute Component should render component and match snapshot when mounted."
        },
        {
          "id": "131",
          "name": "About How To Contribute Component Title should translate title when rendered."
        },
        {
          "id": "132",
          "name": "About How To Contribute Component Sections should translate first section when rendered."
        },
        {
          "id": "133",
          "name": "About How To Contribute Component Sections should translate second section for each bullet item when rendered."
        },
        {
          "id": "134",
          "name": "About How To Contribute Component Sections should translate gitHub text button when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport AboutHowToContribute from \"~/components/pages/about/AboutHowToContribute.vue\";\nimport type GitHubRepositoryButton from \"~/components/shared/external/GitHubRepositoryButton/GitHubRepositoryButton.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"About How To Contribute Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof AboutHowToContribute>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(AboutHowToContribute);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Title\", () => {\n    it(\"should translate title when rendered.\", () => {\n      const title = wrapper.find<HTMLHeadElement>(\"#about-how-to-contribute-title\");\n\n      expect(title.text()).toBe(\"How to contribute to this project?\");\n    });\n  });\n\n  describe(\"Sections\", () => {\n    it(\"should translate first section when rendered.\", () => {\n      const firstSection = wrapper.find<HTMLParagraphElement>(\"#about-how-to-contribute-first-section\");\n\n      expect(firstSection.text()).toBe(\"There are several ways to contribute to this project:\");\n    });\n\n    it(\"should translate second section for each bullet item when rendered.\", () => {\n      const secondSection = wrapper.find<HTMLUListElement>(\"#about-how-to-contribute-second-section\");\n      const secondSectionBulletItems = secondSection.findAll<HTMLLIElement>(\"li\");\n\n      expect(secondSectionBulletItems).toHaveLength(3);\n      expect(secondSectionBulletItems[0].text()).toBe(\"The Werewolf Assistant is an open-source project! Available on GitHub, whether you are a developer, graphic designer, \" +\n      \"or even a tester, your help is welcome. If you like the project, feel free to star it or follow the creator!\");\n      expect(secondSectionBulletItems[1].text()).toBe(\"This project is intended to remain a free service. However, both hosting and tool infrastructure are paid for. \" +\n      \"If you would like to contribute or appreciate the creator's work, you can make a donation on their Buy Me A Coffee page.\");\n      expect(secondSectionBulletItems[2].text()).toBe(\"Talk about this project around you! \" +\n      \"Word of mouth will encourage many role-play enthusiasts to embark on the grand adventure of the game master with the Werewolf Assistant.\");\n    });\n\n    it(\"should translate gitHub text button when rendered.\", () => {\n      const gitHubButton = wrapper.findComponent<typeof GitHubRepositoryButton>(\"#about-how-to-contribute-github-button\");\n\n      expect(gitHubButton.props(\"textButton\")).toBe(\"Access the project on GitHub\");\n    });\n  });\n});"
    },
    "tests/unit/specs/components/shared/role/RoleImage/RoleImage.nuxt.spec.ts": {
      "tests": [
        {
          "id": "135",
          "name": "Role Image Component should render component and match snapshot when mounted."
        },
        {
          "id": "136",
          "name": "Role Image Component Image should have default width and height from props sizes when mounted."
        },
        {
          "id": "137",
          "name": "Role Image Component Image should have back src when prop role image is undefined."
        },
        {
          "id": "138",
          "name": "Role Image Component Image should have src based on role name from props when mounted."
        },
        {
          "id": "139",
          "name": "Role Image Component Image should have small suffix for src when definition from props is small."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport type { ComponentMountingOptions } from \"@vue/test-utils/dist/mount\";\n\nimport type { NuxtImg } from \"#components\";\nimport type { RoleImageProps } from \"~/components/shared/role/RoleImage/role-image.types\";\nimport RoleImage from \"~/components/shared/role/RoleImage/RoleImage.vue\";\nimport { RoleNames } from \"~/composables/api/role/enums/role.enums\";\nimport * as UseRoleName from \"~/composables/api/role/useRoleName\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"Role Image Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof RoleImage>>;\n  const defaultProps: RoleImageProps = {\n    alt: \"werewolf img\",\n    roleName: RoleNames.WEREWOLF,\n  };\n\n  async function mountRoleImageComponent(options: ComponentMountingOptions<typeof RoleImage> = {}): Promise<ReturnType<typeof mount<typeof RoleImage>>> {\n    return mountSuspendedComponent(RoleImage, {\n      props: defaultProps,\n      ...options,\n    });\n  }\n\n  beforeEach(async() => {\n    vi.spyOn(UseRoleName, \"useRoleName\").mockReturnValue({ getRoleNameLabel: vi.fn().mockReturnValue(RoleNames.WEREWOLF) });\n    wrapper = await mountRoleImageComponent();\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Image\", () => {\n    it(\"should have default width and height from props sizes when mounted.\", () => {\n      const image = wrapper.findComponent<typeof NuxtImg>(\"[alt='werewolf img']\");\n\n      expect(image.attributes(\"width\")).toBe(\"50\");\n      expect(image.attributes(\"height\")).toBe(\"50\");\n    });\n\n    it(\"should have back src when prop role image is undefined.\", async() => {\n      wrapper = await mountRoleImageComponent({ props: { alt: \"back image\" } });\n      const image = wrapper.findComponent<typeof NuxtImg>(\"[alt='back image']\");\n\n      expect(image.attributes(\"src\")).toBe(\"/img/role/back.jpeg\");\n    });\n\n    it(\"should have src based on role name from props when mounted.\", () => {\n      const image = wrapper.findComponent<typeof NuxtImg>(\"[alt='werewolf img']\");\n\n      expect(image.attributes(\"src\")).toBe(\"http://127.0.0.1/public/assets/images/roles/werewolf/werewolf.jpeg\");\n    });\n\n    it(\"should have small suffix for src when definition from props is small.\", async() => {\n      await wrapper.setProps({ definition: \"small\" });\n      const image = wrapper.findComponent<typeof NuxtImg>(\"[alt='werewolf img']\");\n\n      expect(image.attributes(\"src\")).toBe(\"http://127.0.0.1/public/assets/images/roles/werewolf/werewolf-small.jpeg\");\n    });\n  });\n});"
    },
    "tests/unit/specs/components/shared/role/RoleTypeBadge/RoleTypeBadge.nuxt.spec.ts": {
      "tests": [
        {
          "id": "140",
          "name": "Role Type Badge Component should render component and match snapshot when mounted."
        },
        {
          "id": "141",
          "name": "Role Type Badge Component Badge should have tooltip when mounted."
        },
        {
          "id": "142",
          "name": "Role Type Badge Component Badge should translate role type when mounted."
        },
        {
          "id": "143",
          "name": "Role Type Badge Component Badge 'should have severity of danger when r…'"
        },
        {
          "id": "144",
          "name": "Role Type Badge Component Badge 'should have severity of success when …'"
        },
        {
          "id": "145",
          "name": "Role Type Badge Component Badge 'should have severity of warning when …'"
        },
        {
          "id": "146",
          "name": "Role Type Badge Component Badge 'should have severity of info when rol…'"
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport type { ComponentMountingOptions } from \"@vue/test-utils/dist/mount\";\n\nimport type { RoleTypeBadgeProps } from \"~/components/shared/role/RoleTypeBadge/role-type-badge-types\";\nimport RoleTypeBadge from \"~/components/shared/role/RoleTypeBadge/RoleTypeBadge.vue\";\nimport { RoleTypes } from \"~/composables/api/role/enums/role.enums\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"Role Type Badge Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof RoleTypeBadge>>;\n  const defaultProps: RoleTypeBadgeProps = { roleType: RoleTypes.WEREWOLF };\n\n  async function mountRoleTypeBadgeComponent(options: ComponentMountingOptions<typeof RoleTypeBadge> = {}): Promise<ReturnType<typeof mount<typeof RoleTypeBadge>>> {\n    return mountSuspendedComponent(RoleTypeBadge, {\n      props: defaultProps,\n      ...options,\n    });\n  }\n\n  beforeEach(async() => {\n    wrapper = await mountRoleTypeBadgeComponent();\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Badge\", () => {\n    it(\"should have tooltip when mounted.\", () => {\n      const badge = wrapper.findComponent(\"[aria-label='Role Type']\");\n\n      expect(badge.attributes(\"data-pd-tooltip\")).toBe(\"true\");\n    });\n\n    it(\"should translate role type when mounted.\", () => {\n      const badge = wrapper.findComponent(\"[aria-label='Role Type']\");\n\n      expect(badge.attributes(\"value\")).toBe(\"Werewolf\");\n    });\n\n    it.each< {\n      roleType: RoleTypes;\n      expectedSeverity: \"danger\" | \"info\" | \"success\" | \"warning\";\n      test: string;\n    }>([\n      {\n        roleType: RoleTypes.WEREWOLF,\n        expectedSeverity: \"danger\",\n        test: \"should have severity of danger when role type is werewolf.\",\n      },\n      {\n        roleType: RoleTypes.VILLAGER,\n        expectedSeverity: \"success\",\n        test: \"should have severity of success when role type is villager.\",\n      },\n      {\n        roleType: RoleTypes.AMBIGUOUS,\n        expectedSeverity: \"warning\",\n        test: \"should have severity of warning when role type is ambiguous.\",\n      },\n      {\n        roleType: RoleTypes.LONELY,\n        expectedSeverity: \"info\",\n        test: \"should have severity of info when role type is lonely.\",\n      },\n    ])(\"$test\", async({ roleType, expectedSeverity }) => {\n      await wrapper.setProps({ roleType });\n      const badge = wrapper.findComponent(\"[aria-label='Role Type']\");\n\n      expect(badge.attributes(\"severity\")).toBe(expectedSeverity);\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/about/AboutWerewolvesGame/AboutWerewolvesGame.nuxt.spec.ts": {
      "tests": [
        {
          "id": "147",
          "name": "About Werewolves Game Component should render component and match snapshot when mounted."
        },
        {
          "id": "148",
          "name": "About Werewolves Game Component Title should display translated title when rendered."
        },
        {
          "id": "149",
          "name": "About Werewolves Game Component Watch tutorial on Youtube Anchor should have tooltip when rendered."
        },
        {
          "id": "150",
          "name": "About Werewolves Game Component Watch tutorial on Youtube Anchor should have translated button when rendered."
        },
        {
          "id": "151",
          "name": "About Werewolves Game Component Sections should translate first section when rendered."
        },
        {
          "id": "152",
          "name": "About Werewolves Game Component Sections should translate second section when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport AboutWerewolvesGame from \"~/components/pages/about/AboutWerewolvesGame.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"About Werewolves Game Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof AboutWerewolvesGame>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(AboutWerewolvesGame);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Title\", () => {\n    it(\"should display translated title when rendered.\", () => {\n      const title = wrapper.find<HTMLHeadElement>(\"#about-werewolves-game-title\");\n\n      expect(title.text()).toBe(\"The Werewolves of Miller's Hollow™ game\");\n    });\n  });\n\n  describe(\"Watch tutorial on Youtube Anchor\", () => {\n    it(\"should have tooltip when rendered.\", () => {\n      const watchTutorialOnYoutubeAnchor = wrapper.find<HTMLAnchorElement>(\"#about-werewolves-game-watch-tutorial-video-on-youtube\");\n\n      expect(watchTutorialOnYoutubeAnchor.attributes(\"data-pd-tooltip\")).toBeTruthy();\n    });\n\n    it(\"should have translated button when rendered.\", () => {\n      const watchTutorialOnYoutubeAnchor = wrapper.find<HTMLAnchorElement>(\"#about-werewolves-game-watch-tutorial-video-on-youtube\");\n\n      expect(watchTutorialOnYoutubeAnchor.text()).toBe(\"I don't know this game\");\n    });\n  });\n\n  describe(\"Sections\", () => {\n    it(\"should translate first section when rendered.\", () => {\n      const firstSection = wrapper.find<HTMLParagraphElement>(\"#about-werewolves-game-first-section\");\n\n      expect(firstSection.text()).toBe(\"The Werewolves of Miller's Hollow™ is a captivating social board game, where each participant takes\" +\n      \" on the role of either a Villager or a Werewolf. Under the guidance of a game master, each session unveils a range of surprises,\" +\n      \" betrayals, twists, and even moments filled with laughter and sometimes tears.\");\n    });\n\n    it(\"should translate second section when rendered.\", () => {\n      const secondSection = wrapper.find<HTMLParagraphElement>(\"#about-werewolves-game-second-section\");\n\n      expect(secondSection.text()).toBe(\"The success of a game relies on the shoulders of the game master, tasked with creating an \" +\n      \"enchanting atmosphere, maintaining a dynamic pace, and mastering the subtleties of the game rules. Managing a sizable group of players, \" +\n      \"lacking experience, or being in a state of distraction make this task a significant challenge.\");\n    });\n  });\n});"
    },
    "tests/unit/specs/components/layouts/default/NavBar.nuxt.spec.ts": {
      "tests": [
        {
          "id": "153",
          "name": "NavBar Component should render component and match snapshot when mounted."
        },
        {
          "id": "154",
          "name": "NavBar Component Home Page Link should have the prop 'to' set to home page when mounted."
        },
        {
          "id": "155",
          "name": "NavBar Component Home Page Link Werewolves Assistant Logo should have the prop 'src' set to the small logo when mounted."
        },
        {
          "id": "156",
          "name": "NavBar Component Home Page Link Werewolves Assistant Logo Text should translate the logo text when mounted."
        },
        {
          "id": "157",
          "name": "NavBar Component Parameters Menu should have left tooltip when mounted."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport type { ComponentMountingOptions } from \"@vue/test-utils/dist/mount\";\n\nimport type { NuxtImg, NuxtLink } from \"#components\";\nimport NavBar from \"~/components/layouts/default/NavBar/NavBar.vue\";\nimport type ParametersMenu from \"~/components/layouts/default/NavBar/ParametersMenu/ParametersMenu.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"NavBar Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof NavBar>>;\n\n  async function mountNavBarComponent(options: ComponentMountingOptions<typeof NavBar> = {}): Promise<ReturnType<typeof mount<typeof NavBar>>> {\n    const defaultMountingOptions: ComponentMountingOptions<typeof NavBar> = { global: { stubs: { ParametersMenu: true } } };\n\n    return mountSuspendedComponent(NavBar, {\n      ...defaultMountingOptions,\n      ...options,\n    });\n  }\n\n  beforeEach(async() => {\n    wrapper = await mountNavBarComponent();\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Home Page Link\", () => {\n    it(\"should have the prop 'to' set to home page when mounted.\", () => {\n      const homePageLink = wrapper.findComponent<typeof NuxtLink>(\"[aria-label='Home page link']\");\n\n      expect(homePageLink.props(\"to\")).toBe(\"/\");\n    });\n\n    describe(\"Werewolves Assistant Logo\", () => {\n      it(\"should have the prop 'src' set to the small logo when mounted.\", async() => {\n        wrapper = await mountNavBarComponent({ shallow: false });\n        const werewolvesAssistantLogo = wrapper.findComponent<typeof NuxtImg>(\"[alt='Werewolves Assistant logo']\");\n\n        expect(werewolvesAssistantLogo.attributes(\"src\")).toBe(\"/_ipx/_/img/logo/square/werewolves-logo-small.png\");\n      });\n    });\n\n    describe(\"Werewolves Assistant Logo Text\", () => {\n      it(\"should translate the logo text when mounted.\", async() => {\n        wrapper = await mountNavBarComponent({ shallow: false });\n        const werewolvesAssistantLogoText = wrapper.find<HTMLHeadElement>(\"[aria-label='Werewolves Assistant']\");\n\n        expect(werewolvesAssistantLogoText.text()).toBe(\"Werewolves Assistant\");\n      });\n    });\n  });\n\n  describe(\"Parameters Menu\", () => {\n    it(\"should have left tooltip when mounted.\", async() => {\n      wrapper = await mountNavBarComponent({ shallow: false });\n      const parametersMenu = wrapper.findComponent<typeof ParametersMenu>(\"[aria-label='Parameters menu']\");\n\n      expect(parametersMenu.attributes(\"data-pd-tooltip\")).toBe(\"true\");\n    });\n  });\n});"
    },
    "tests/unit/specs/composables/api/game/useFetchGames.spec.ts": {
      "tests": [
        {
          "id": "158",
          "name": "Use Fetch Game Composable createGame should create game when called."
        },
        {
          "id": "159",
          "name": "Use Fetch Game Composable createGame should return null when create game throws."
        },
        {
          "id": "160",
          "name": "Use Fetch Game Composable getGame should get game when called."
        },
        {
          "id": "161",
          "name": "Use Fetch Game Composable getGame should return null when get game throws."
        }
      ],
      "source": "import type { Mock } from \"vitest\";\n\nimport { useFetchGames } from \"~/composables/api/game/useFetchGames\";\nimport * as UseWerewolvesAssistantApi from \"~/composables/api/useWerewolvesAssistantApi\";\nimport { createFakeCreateGameDto } from \"~/tests/unit/utils/factories/composables/api/game/dto/create-game/create-game.dto.factory\";\n\ndescribe(\"Use Fetch Game Composable\", () => {\n  let mocks: {\n    composables: {\n      useWerewolvesAssistantApi: {\n        fetchWerewolvesAssistantApi: Mock;\n      }\n    }\n  };\n\n  beforeEach(() => {\n    mocks = { composables: { useWerewolvesAssistantApi: { fetchWerewolvesAssistantApi: vi.fn() } } };\n    const useWerewolvesAssistantApiMock = mocks.composables.useWerewolvesAssistantApi as unknown as ReturnType<typeof UseWerewolvesAssistantApi.useWerewolvesAssistantApi>;\n    vi.spyOn(UseWerewolvesAssistantApi, \"useWerewolvesAssistantApi\").mockReturnValue(useWerewolvesAssistantApiMock);\n  });\n\n  describe(\"createGame\", () => {\n    it(\"should create game when called.\", async() => {\n      const createGameDto = createFakeCreateGameDto();\n      await useFetchGames().createGame(createGameDto);\n      const expectedOptions = { method: \"POST\", body: JSON.stringify(createGameDto) };\n\n      expect(mocks.composables.useWerewolvesAssistantApi.fetchWerewolvesAssistantApi).toHaveBeenCalledExactlyOnceWith(`/games`, expectedOptions);\n    });\n\n    it(\"should return null when create game throws.\", async() => {\n      vi.spyOn(mocks.composables.useWerewolvesAssistantApi, \"fetchWerewolvesAssistantApi\").mockRejectedValue(undefined);\n      const result = await useFetchGames().createGame(createFakeCreateGameDto());\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe(\"getGame\", () => {\n    it(\"should get game when called.\", async() => {\n      const gameId = \"game-id\";\n      await useFetchGames().getGame(gameId);\n\n      expect(mocks.composables.useWerewolvesAssistantApi.fetchWerewolvesAssistantApi).toHaveBeenCalledExactlyOnceWith(`/games/${gameId}`, { method: \"GET\" });\n    });\n\n    it(\"should return null when get game throws.\", async() => {\n      vi.spyOn(mocks.composables.useWerewolvesAssistantApi, \"fetchWerewolvesAssistantApi\").mockRejectedValue(new Error(\"error\"));\n      const result = await useFetchGames().getGame(\"game-id\");\n\n      expect(result).toBeNull();\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/game-lobby/GameLobbyPlayersParty/GameLobbyPlayersParty.nuxt.spec.ts": {
      "tests": [
        {
          "id": "162",
          "name": "Game Lobby Players Party Component should render component and match snapshot when mounted."
        },
        {
          "id": "163",
          "name": "Game Lobby Players Party Component Player Cards should render add player with input message when there are no players in the create game dto."
        },
        {
          "id": "164",
          "name": "Game Lobby Players Party Component Player Cards should render no players in lobby when there are no players in the create game dto."
        },
        {
          "id": "165",
          "name": "Game Lobby Players Party Component Player Cards should render 4 players cards when there are 4 players in the create game dto."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport GameLobbyPlayerCard from \"~/components/pages/game-lobby/GameLobbyPlayersParty/GameLobbyPlayerCard/GameLobbyPlayerCard.vue\";\nimport GameLobbyPlayersParty from \"~/components/pages/game-lobby/GameLobbyPlayersParty/GameLobbyPlayersParty.vue\";\nimport { useCreateGameDtoStore } from \"~/stores/game/create-game-dto/useCreateGameDtoStore\";\nimport { createFakeCreateGamePlayerDto } from \"~/tests/unit/utils/factories/composables/api/game/dto/create-game/create-game-player/create-game-player.dto.factory\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"Game Lobby Players Party Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof GameLobbyPlayersParty>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(GameLobbyPlayersParty);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Player Cards\", () => {\n    it(\"should render add player with input message when there are no players in the create game dto.\", async() => {\n      const addPlayerWithInputMessage = wrapper.find<HTMLHeadingElement>(\"#no-players-in-lobby-message\");\n\n      expect(addPlayerWithInputMessage.exists()).toBeTruthy();\n    });\n\n    it(\"should render no players in lobby when there are no players in the create game dto.\", async() => {\n      const playerCards = wrapper.findAllComponents<typeof GameLobbyPlayerCard>(GameLobbyPlayerCard);\n\n      expect(playerCards).toHaveLength(0);\n    });\n\n    it(\"should render 4 players cards when there are 4 players in the create game dto.\", async() => {\n      const createGameDtoStore = useCreateGameDtoStore();\n      createGameDtoStore.createGameDto.players = [\n        createFakeCreateGamePlayerDto({ name: \"Player 1\" }),\n        createFakeCreateGamePlayerDto({ name: \"Player 2\" }),\n        createFakeCreateGamePlayerDto({ name: \"Player 3\" }),\n        createFakeCreateGamePlayerDto({ name: \"Player 4\" }),\n      ];\n      await nextTick();\n      const playerCards = wrapper.findAllComponents<typeof GameLobbyPlayerCard>(GameLobbyPlayerCard);\n\n      expect(playerCards).toHaveLength(4);\n    });\n  });\n});"
    },
    "tests/unit/specs/composables/api/error/useWerewolvesAssistantApiError.spec.ts": {
      "tests": [
        {
          "id": "166",
          "name": "Use Werewolves Assistant Api Error Composable handleWerewolvesAssistantApiError should log error in console when called."
        },
        {
          "id": "167",
          "name": "Use Werewolves Assistant Api Error Composable handleWerewolvesAssistantApiError should add error toast when called."
        }
      ],
      "source": "import type { FetchResponse } from \"ofetch\";\nimport type { Mock, MockInstance } from \"vitest\";\n\nimport type { WerewolvesAssistantApiError } from \"~/composables/api/error/types/api-error.types\";\nimport { useWerewolvesAssistantApiError } from \"~/composables/api/error/useWerewolvesAssistantApiError\";\nimport * as UseVuePrimeToasts from \"~/composables/vue-prime/useVuePrimeToasts\";\n\ndescribe(\"Use Werewolves Assistant Api Error Composable\", () => {\n  let mocks: {\n    console: {\n      error: MockInstance;\n    };\n    composables: {\n      useVuePrimeToasts: {\n        addToast: Mock;\n        addSuccessToast: Mock;\n        addInfoToast: Mock;\n        addWarnToast: Mock;\n        addErrorToast: Mock;\n      }\n    }\n  };\n\n  beforeEach(() => {\n    mocks = {\n      console: { error: vi.spyOn(console, \"error\").mockImplementation(vi.fn()) },\n      composables: {\n        useVuePrimeToasts: {\n          addToast: vi.fn(),\n          addErrorToast: vi.fn(),\n          addInfoToast: vi.fn(),\n          addSuccessToast: vi.fn(),\n          addWarnToast: vi.fn(),\n        },\n      },\n    };\n    vi.spyOn(UseVuePrimeToasts, \"useVuePrimeToasts\").mockReturnValue(mocks.composables.useVuePrimeToasts);\n  });\n\n  describe(\"handleWerewolvesAssistantApiError\", () => {\n    it(\"should log error in console when called.\", () => {\n      const response = { _data: \"error-data\" } as unknown as FetchResponse<WerewolvesAssistantApiError>;\n      useWerewolvesAssistantApiError().handleWerewolvesAssistantApiError({ response });\n      const { _data: expectedData } = response;\n\n      expect(mocks.console.error).toHaveBeenCalledExactlyOnceWith(expectedData);\n    });\n\n    it(\"should add error toast when called.\", () => {\n      const response = { status: 404 } as unknown as FetchResponse<WerewolvesAssistantApiError>;\n      useWerewolvesAssistantApiError().handleWerewolvesAssistantApiError({ response });\n\n      expect(mocks.composables.useVuePrimeToasts.addErrorToast).toHaveBeenCalledExactlyOnceWith({\n        summary: \"composables.useWerewolvesAssistantApiError.statusCode.404\",\n        detail: \"composables.useWerewolvesAssistantApiError.checkConsoleForMoreDetails\",\n      });\n    });\n  });\n});"
    },
    "tests/unit/specs/pages/about/about.nuxt.spec.ts": {
      "tests": [
        {
          "id": "168",
          "name": "About Page Component should render component and match snapshot when mounted."
        },
        {
          "id": "169",
          "name": "About Page Component Title should display role image of werewolf when rendered."
        },
        {
          "id": "170",
          "name": "About Page Component Title should display translated title when rendered."
        },
        {
          "id": "171",
          "name": "About Page Component Footer should have 'to' prop set to home for back to home button when rendered."
        },
        {
          "id": "172",
          "name": "About Page Component Footer should translate back to home button when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport { expect } from \"vitest\";\n\nimport type { NuxtLink } from \"#components\";\nimport type RoleImage from \"~/components/shared/role/RoleImage/RoleImage.vue\";\nimport { RoleNames } from \"~/composables/api/role/enums/role.enums\";\nimport About from \"~/pages/about.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"About Page Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof About>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(About);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Title\", () => {\n    it(\"should display role image of werewolf when rendered.\", () => {\n      const roleImage = wrapper.findComponent<typeof RoleImage>(\"#about-role-image-title\");\n\n      expect(roleImage.props(\"roleName\")).toBe(RoleNames.WEREWOLF);\n    });\n\n    it(\"should display translated title when rendered.\", () => {\n      const title = wrapper.find<HTMLHeadElement>(\"#about-title\");\n\n      expect(title.text()).toBe(\"Why an assistant ?\");\n    });\n  });\n\n  describe(\"Footer\", () => {\n    it(\"should have 'to' prop set to home for back to home button when rendered.\", () => {\n      const backToHomeButton = wrapper.findComponent<typeof NuxtLink>(\"#about-back-to-home-button\");\n\n      expect(backToHomeButton.props(\"to\")).toBe(\"/\");\n    });\n\n    it(\"should translate back to home button when rendered.\", async() => {\n      wrapper = await mountSuspendedComponent(About, {\n        shallow: false,\n        global: {\n          stubs: {\n            AboutWerewolvesGame: true,\n            AboutWerewolvesAssistant: true,\n            AboutAvailableRoles: true,\n            AboutHowToContribute: true,\n            AboutCreator: true,\n          },\n        },\n      });\n\n      const backToHomeButton = wrapper.findComponent<typeof NuxtLink>(\"#about-back-to-home-button\");\n\n      expect(backToHomeButton.text()).toBe(\"Back to home\");\n    });\n  });\n});"
    },
    "tests/unit/specs/components/shared/role/RoleOriginBadge/RoleOriginBadge.nuxt.spec.ts": {
      "tests": [
        {
          "id": "173",
          "name": "Role Origin Badge Component should render component and match snapshot when mounted."
        },
        {
          "id": "174",
          "name": "Role Origin Badge Component Badge should have tooltip when mounted."
        },
        {
          "id": "175",
          "name": "Role Origin Badge Component Badge should translate role origin when mounted."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport type { ComponentMountingOptions } from \"@vue/test-utils/dist/mount\";\nimport { expect } from \"vitest\";\n\nimport type { VuePrimeBadge } from \"#components\";\nimport type { RoleOriginBadgeProps } from \"~/components/shared/role/RoleOriginBadge/role-origin-badge.types\";\nimport RoleOriginBadge from \"~/components/shared/role/RoleOriginBadge/RoleOriginBadge.vue\";\nimport { RoleOrigins } from \"~/composables/api/role/enums/role.enums\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"Role Origin Badge Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof RoleOriginBadge>>;\n  const defaultProps: RoleOriginBadgeProps = { roleOrigin: RoleOrigins.CLASSIC };\n\n  async function mountRoleOriginBadgeComponent(options: ComponentMountingOptions<typeof RoleOriginBadge> = {}): Promise<ReturnType<typeof mount<typeof RoleOriginBadge>>> {\n    return mountSuspendedComponent(RoleOriginBadge, {\n      props: defaultProps,\n      ...options,\n    });\n  }\n\n  beforeEach(async() => {\n    wrapper = await mountRoleOriginBadgeComponent();\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Badge\", () => {\n    it(\"should have tooltip when mounted.\", () => {\n      const badge = wrapper.findComponent<typeof VuePrimeBadge>(\"[aria-label='Role Origin']\");\n\n      expect(badge.attributes(\"data-pd-tooltip\")).toBe(\"true\");\n    });\n\n    it(\"should translate role origin when mounted.\", () => {\n      const badge = wrapper.findComponent<typeof VuePrimeBadge>(\"[aria-label='Role Origin']\");\n\n      expect(badge.attributes(\"value\")).toBe(\"Base Game\");\n    });\n  });\n});"
    },
    "tests/unit/specs/stores/role/useRolesStore.spec.ts": {
      "tests": [
        {
          "id": "176",
          "name": "Roles Store should have initial state when created."
        },
        {
          "id": "177",
          "name": "Roles Store fetchAndSetRoles should fetch roles when called."
        },
        {
          "id": "178",
          "name": "Roles Store fetchAndSetRoles should set roles when called."
        }
      ],
      "source": "import { createPinia, setActivePinia } from \"pinia\";\nimport { expect } from \"vitest\";\nimport type { Mock } from \"vitest\";\n\nimport type { Role } from \"~/composables/api/role/types/role.class\";\nimport { useRolesStore } from \"~/stores/role/useRolesStore\";\nimport * as UseFetchRolesComposable from \"~/composables/api/role/useFetchRoles\";\nimport { createFakeRole } from \"~/tests/unit/utils/factories/composables/api/role/role.factory\";\n\ndescribe(\"Roles Store\", () => {\n  let mocks: {\n    composables: {\n      useFetchRoles: {\n        fetchRoles: Mock;\n      }\n    }\n  };\n\n  beforeEach(() => {\n    mocks = { composables: { useFetchRoles: { fetchRoles: vi.fn() } } };\n    vi.spyOn(UseFetchRolesComposable, \"useFetchRoles\").mockImplementation(() => mocks.composables.useFetchRoles);\n    setActivePinia(createPinia());\n  });\n\n  it(\"should have initial state when created.\", () => {\n    const rolesStore = useRolesStore();\n\n    expect(rolesStore.roles).toBeNull();\n    expect(rolesStore.fetchingRoleStatus).toBe(\"idle\");\n  });\n\n  describe(\"fetchAndSetRoles\", () => {\n    it(\"should fetch roles when called.\", async() => {\n      const rolesStore = useRolesStore();\n      await rolesStore.fetchAndSetRoles();\n\n      expect(mocks.composables.useFetchRoles.fetchRoles).toHaveBeenCalledExactlyOnceWith();\n    });\n\n    it(\"should set roles when called.\", async() => {\n      const roles = [\n        createFakeRole(),\n        createFakeRole(),\n        createFakeRole(),\n      ];\n      mocks.composables.useFetchRoles.fetchRoles.mockResolvedValue(roles);\n      const rolesStore = useRolesStore();\n      await rolesStore.fetchAndSetRoles();\n\n      expect(rolesStore.roles).toStrictEqual<Role[]>(roles);\n    });\n  });\n});"
    },
    "tests/unit/specs/components/shared/external/GitHubRepositoryButton/GitHubRepositoryButton.nuxt.spec.ts": {
      "tests": [
        {
          "id": "179",
          "name": "GitHub Repository Button should render component and match snapshot when mounted."
        },
        {
          "id": "180",
          "name": "GitHub Repository Button Button Text should render button text with other text when text is passed as prop."
        },
        {
          "id": "181",
          "name": "GitHub Repository Button Button Text should render button text with default text when text is not passed as prop."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport type { GitHubRepositoryButtonProps } from \"~/components/shared/external/GitHubRepositoryButton/git-hub-repository-button.types\";\nimport GitHubRepositoryButton from \"~/components/shared/external/GitHubRepositoryButton/GitHubRepositoryButton.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"GitHub Repository Button\", () => {\n  let wrapper: ReturnType<typeof mount<typeof GitHubRepositoryButton>>;\n  const defaultProps: GitHubRepositoryButtonProps = { textButton: \"GitHub\" };\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(GitHubRepositoryButton, { props: defaultProps });\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Button Text\", () => {\n    it(\"should render button text with other text when text is passed as prop.\", async() => {\n      wrapper = await mountSuspendedComponent(GitHubRepositoryButton, { props: { textButton: \"Other text\" } });\n      const buttonText = wrapper.find<HTMLAnchorElement>(\"#github-repository-link\");\n\n      expect(buttonText.text()).toBe(\"Other text\");\n    });\n\n    it(\"should render button text with default text when text is not passed as prop.\", async() => {\n      wrapper = await mountSuspendedComponent(GitHubRepositoryButton);\n      const buttonText = wrapper.find<HTMLAnchorElement>(\"#github-repository-link\");\n\n      expect(buttonText.text()).toBe(\"components.GitHubRepositoryButton.thisProjectIsOpenSource\");\n    });\n  });\n});"
    },
    "tests/unit/specs/composables/api/game/useFetchRandomGameComposition.spec.ts": {
      "tests": [
        {
          "id": "182",
          "name": "Use Fetch Random Game Composition fetchRandomGameComposition should fetch random game composition when called."
        }
      ],
      "source": "import type { $Fetch } from \"nitropack\";\n\nimport { useFetchRandomGameComposition } from \"~/composables/api/game/useFetchRandomGameComposition\";\nimport * as UseWerewolvesAssistantApi from \"~/composables/api/useWerewolvesAssistantApi\";\n\nconst { stringifyMock } = vi.hoisted(() => ({ stringifyMock: vi.fn() }));\n\nvi.mock(\"qs\", () => ({ stringify: stringifyMock }));\n\ndescribe(\"Use Fetch Random Game Composition\", () => {\n  let mocks: {\n    composables: {\n      useWerewolvesAssistantApi: {\n        fetchWerewolvesAssistantApi: $Fetch;\n      }\n    }\n  };\n\n  beforeEach(() => {\n    mocks = { composables: { useWerewolvesAssistantApi: { fetchWerewolvesAssistantApi: vi.fn() as unknown as $Fetch } } };\n    vi.spyOn(UseWerewolvesAssistantApi, \"useWerewolvesAssistantApi\").mockReturnValue(mocks.composables.useWerewolvesAssistantApi);\n  });\n\n  describe(\"fetchRandomGameComposition\", () => {\n    it(\"should fetch random game composition when called.\", async() => {\n      stringifyMock.mockReturnValue(\"stringifiedQuery\");\n      const expectedUrl = `/games/random-composition?stringifiedQuery`;\n      await useFetchRandomGameComposition().fetchRandomGameComposition({\n        players: [\n          { name: \"Player 1\" },\n          { name: \"Player 2\" },\n          { name: \"Player 3\" },\n        ],\n      });\n\n      expect(mocks.composables.useWerewolvesAssistantApi.fetchWerewolvesAssistantApi).toHaveBeenCalledExactlyOnceWith(expectedUrl, { method: \"GET\" });\n    });\n  });\n});"
    },
    "tests/unit/specs/composables/api/game/dto/create-game/create-game-player/create-game-player.dto.spec.ts": {
      "tests": [
        {
          "id": "183",
          "name": "Create Game Player Dto create should create a game player dto when called."
        }
      ],
      "source": "import { CreateGamePlayerDto } from \"~/composables/api/game/dto/create-game/create-game-player/create-game-player.dto\";\nimport { RoleNames } from \"~/composables/api/role/enums/role.enums\";\nimport { createFakeCreateGamePlayerRoleDto } from \"~/tests/unit/utils/factories/composables/api/game/dto/create-game/create-game-player/create-game-player-role/create-game-player-role.dto.factory\";\nimport { createFakeCreateGamePlayerSideDto } from \"~/tests/unit/utils/factories/composables/api/game/dto/create-game/create-game-player/create-game-player-side/create-game-player-side.dto.factory\";\n\ndescribe(\"Create Game Player Dto\", () => {\n  describe(\"create\", () => {\n    it(\"should create a game player dto when called.\", () => {\n      const expectedRole = createFakeCreateGamePlayerRoleDto({ name: RoleNames.WEREWOLF });\n      const expectedSide = createFakeCreateGamePlayerSideDto();\n      const createGamePlayerDto = CreateGamePlayerDto.create({\n        name: \"Player 1\",\n        role: expectedRole,\n        side: {},\n        extra: \"Extra\",\n      } as CreateGamePlayerDto);\n      const expectedCreateGamePlayerDto = new CreateGamePlayerDto();\n      expectedCreateGamePlayerDto.name = \"Player 1\";\n      expectedCreateGamePlayerDto.role = expectedRole;\n      expectedCreateGamePlayerDto.side = expectedSide;\n\n      expect(createGamePlayerDto).toStrictEqual<CreateGamePlayerDto>(expectedCreateGamePlayerDto);\n    });\n  });\n});"
    },
    "tests/unit/specs/composables/api/role/useFetchRoles.spec.ts": {
      "tests": [
        {
          "id": "184",
          "name": "Use Fetch Roles Composable fetchRoles should fetch roles when called."
        },
        {
          "id": "185",
          "name": "Use Fetch Roles Composable fetchRoles should return null when fetch roles throws."
        }
      ],
      "source": "import type { Mock } from \"vitest\";\n\nimport { useFetchRoles } from \"~/composables/api/role/useFetchRoles\";\nimport * as UseWerewolvesAssistantApi from \"~/composables/api/useWerewolvesAssistantApi\";\n\ndescribe(\"Use Fetch Roles Composable\", () => {\n  let mocks: {\n    composables: {\n      useWerewolvesAssistantApi: {\n        fetchWerewolvesAssistantApi: Mock;\n      }\n    }\n  };\n\n  beforeEach(() => {\n    mocks = { composables: { useWerewolvesAssistantApi: { fetchWerewolvesAssistantApi: vi.fn() } } };\n    const useWerewolvesAssistantApiMock = mocks.composables.useWerewolvesAssistantApi as unknown as ReturnType<typeof UseWerewolvesAssistantApi.useWerewolvesAssistantApi>;\n    vi.spyOn(UseWerewolvesAssistantApi, \"useWerewolvesAssistantApi\").mockReturnValue(useWerewolvesAssistantApiMock);\n  });\n\n  describe(\"fetchRoles\", () => {\n    it(\"should fetch roles when called.\", async() => {\n      await useFetchRoles().fetchRoles();\n\n      expect(mocks.composables.useWerewolvesAssistantApi.fetchWerewolvesAssistantApi).toHaveBeenCalledExactlyOnceWith(`/roles`, { method: \"GET\" });\n    });\n\n    it(\"should return null when fetch roles throws.\", async() => {\n      vi.spyOn(mocks.composables.useWerewolvesAssistantApi, \"fetchWerewolvesAssistantApi\").mockRejectedValue(new Error(\"error\"));\n      const result = await useFetchRoles().fetchRoles();\n\n      expect(result).toBeNull();\n    });\n  });\n});"
    },
    "tests/unit/specs/pages/index/index.nuxt.spec.ts": {
      "tests": [
        {
          "id": "186",
          "name": "Index Page Component should render component and match snapshot when mounted."
        },
        {
          "id": "187",
          "name": "Index Page Component Title should display translated title when rendered."
        },
        {
          "id": "188",
          "name": "Index Page Component Play button should display play button with translated label when rendered."
        },
        {
          "id": "189",
          "name": "Index Page Component About button should display about button with translated label when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport type { NuxtLink } from \"#components\";\nimport Index from \"@/pages/index.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"Index Page Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof Index>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(Index);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Title\", () => {\n    it(\"should display translated title when rendered.\", () => {\n      const title = wrapper.find(\"[aria-label='Werewolves Assistant']\");\n\n      expect(title.text()).toBe(\"Werewolves Assistant\");\n    });\n  });\n\n  describe(\"Play button\", () => {\n    it(\"should display play button with translated label when rendered.\", () => {\n      const playButton = wrapper.findComponent<typeof NuxtLink>(\"[aria-label='Play']\");\n\n      expect(playButton.html()).toContain(\"Play\");\n    });\n  });\n\n  describe(\"About button\", () => {\n    it(\"should display about button with translated label when rendered.\", () => {\n      const aboutButton = wrapper.findComponent<typeof NuxtLink>(\"[aria-label='What is it ?']\");\n\n      expect(aboutButton.html()).toContain(\"What is it \");\n    });\n  });\n});"
    },
    "tests/unit/specs/components/shared/external/BuyMeACoffeeButton/BuyMeACoffeeButton.nuxt.spec.ts": {
      "tests": [
        {
          "id": "190",
          "name": "Buy Me A Coffee Button Component should render component and match snapshot when mounted."
        },
        {
          "id": "191",
          "name": "Buy Me A Coffee Button Component Link image should call link image with correct src when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport BuyMeACoffeeButton from \"~/components/shared/external/BuyMeACoffeeButton/BuyMeACoffeeButton.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"Buy Me A Coffee Button Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof BuyMeACoffeeButton>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(BuyMeACoffeeButton);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Link image\", () => {\n    it(\"should call link image with correct src when rendered.\", () => {\n      const linkImage = wrapper.find<HTMLImageElement>(\"[alt='Buy me a coffee']\");\n      const expectedSrc = \"https://img.buymeacoffee.com/button-api/?\" +\n        \"text=Buy%20me%20a%20coffee&slug=antoinezanardi&button_colour=46a6ff&font_colour=FFFFFF&font_family=Lato&outline_colour=000000&coffee_colour=FFDD00\";\n\n      expect(linkImage.attributes(\"src\")).toBe(expectedSrc);\n    });\n  });\n});"
    },
    "tests/unit/specs/app.nuxt.spec.ts": {
      "tests": [
        {
          "id": "192",
          "name": "App Component should render component and match snapshot when mounted."
        },
        {
          "id": "193",
          "name": "App Component should render component without shallow and match snapshot when mounted."
        },
        {
          "id": "194",
          "name": "App Component should fetch and set roles from store when mounted."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport App from \"@/app.vue\";\nimport { useRolesStore } from \"~/stores/role/useRolesStore\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"App Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof App>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(App);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  it(\"should render component without shallow and match snapshot when mounted.\", async() => {\n    wrapper = await mountSuspendedComponent(App, { shallow: false });\n\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  it(\"should fetch and set roles from store when mounted.\", () => {\n    const rolesStore = useRolesStore();\n    expect(rolesStore.fetchAndSetRoles).toHaveBeenCalledWith();\n  });\n});"
    },
    "tests/unit/specs/composables/api/game/dto/create-game/create-game-additional-card/create-game-additional-card.dto.spec.ts": {
      "tests": [
        {
          "id": "195",
          "name": "Create Game Additional Card Dto create should create a game additional card dto when called."
        }
      ],
      "source": "import { CreateGameAdditionalCardDto } from \"~/composables/api/game/dto/create-game/create-game-additional-card/create-game-additional-card.dto\";\nimport { RoleNames } from \"~/composables/api/role/enums/role.enums\";\n\ndescribe(\"Create Game Additional Card Dto\", () => {\n  describe(\"create\", () => {\n    it(\"should create a game additional card dto when called.\", () => {\n      const createGameAdditionalCardDto = CreateGameAdditionalCardDto.create({\n        roleName: RoleNames.WEREWOLF,\n        recipient: RoleNames.THIEF,\n        extra: \"Extra\",\n      } as CreateGameAdditionalCardDto);\n      const expectedCreateGameAdditionalCardDto = new CreateGameAdditionalCardDto();\n      expectedCreateGameAdditionalCardDto.roleName = RoleNames.WEREWOLF;\n      expectedCreateGameAdditionalCardDto.recipient = RoleNames.THIEF;\n\n      expect(createGameAdditionalCardDto).toStrictEqual<CreateGameAdditionalCardDto>(expectedCreateGameAdditionalCardDto);\n    });\n  });\n});"
    },
    "tests/unit/specs/composables/api/game/dto/create-game/create-game.dto.spec.ts": {
      "tests": [
        {
          "id": "196",
          "name": "Create Game Dto create should create a game when called."
        }
      ],
      "source": "import { CreateGameDto } from \"~/composables/api/game/dto/create-game/create-game.dto\";\nimport { RoleNames } from \"~/composables/api/role/enums/role.enums\";\nimport { createFakeCreateGamePlayerDto } from \"~/tests/unit/utils/factories/composables/api/game/dto/create-game/create-game-player/create-game-player.dto.factory\";\n\ndescribe(\"Create Game Dto\", () => {\n  describe(\"create\", () => {\n    it(\"should create a game when called.\", () => {\n      const players = [\n        createFakeCreateGamePlayerDto({\n          name: \"Player 1\",\n          role: { name: RoleNames.WEREWOLF },\n        }),\n      ];\n      const createGameDto = CreateGameDto.create({\n        players,\n        extra: \"Extra\",\n      } as CreateGameDto);\n      const expectedCreateGameDto = new CreateGameDto();\n      expectedCreateGameDto.players = players;\n\n      expect(createGameDto).toStrictEqual<CreateGameDto>(expectedCreateGameDto);\n    });\n  });\n});"
    },
    "tests/unit/specs/pages/game-lobby/game-lobby.nuxt.spec.ts": {
      "tests": [
        {
          "id": "197",
          "name": "Game Lobby Page should render component and match snapshot when mounted."
        },
        {
          "id": "198",
          "name": "Game Lobby Page Game Lobby Players Party should reset create game dto when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport GameLobby from \"~/pages/game-lobby.vue\";\nimport { useCreateGameDtoStore } from \"~/stores/game/create-game-dto/useCreateGameDtoStore\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"Game Lobby Page\", () => {\n  let wrapper: ReturnType<typeof mount<typeof GameLobby>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(GameLobby);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Game Lobby Players Party\", () => {\n    it(\"should reset create game dto when rendered.\", () => {\n      const createGameDtoStore = useCreateGameDtoStore();\n\n      expect(createGameDtoStore.resetCreateGameDto).toHaveBeenCalledExactlyOnceWith();\n    });\n  });\n});"
    },
    "tests/unit/specs/composables/api/game/game.class.spec.ts": {
      "tests": [
        {
          "id": "199",
          "name": "Game Class create should create a game when called."
        }
      ],
      "source": "import { Game } from \"~/composables/api/game/types/game.class\";\n\ndescribe(\"Game Class\", () => {\n  describe(\"create\", () => {\n    it(\"should create a game when called.\", () => {\n      const createdAt = new Date();\n      const updatedAt = new Date();\n      const createdGame = Game.create({\n        _id: \"1\",\n        phase: \"day\",\n        players: [],\n        status: \"playing\",\n        tick: 1,\n        turn: 1,\n        createdAt,\n        updatedAt,\n        extra: \"Extra\",\n      } as Game);\n      const expectedGame = new Game();\n      expectedGame._id = \"1\";\n      expectedGame.phase = \"day\";\n      expectedGame.players = [];\n      expectedGame.status = \"playing\";\n      expectedGame.tick = 1;\n      expectedGame.turn = 1;\n      expectedGame.createdAt = createdAt;\n      expectedGame.updatedAt = updatedAt;\n\n      expect(createdGame).toStrictEqual<Game>(expectedGame);\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/index/index-footer.nuxt.spec.ts": {
      "tests": [
        {
          "id": "200",
          "name": "Index Page Footer Component should render component and match snapshot when mounted."
        },
        {
          "id": "201",
          "name": "Index Page Footer Component Contact Me Button should render contact me with translated text button when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport IndexFooter from \"~/components/pages/index/IndexFooter.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"Index Page Footer Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof IndexFooter>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(IndexFooter);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Contact Me Button\", () => {\n    it(\"should render contact me with translated text button when rendered.\", () => {\n      const contactMeButton = wrapper.find(\"[aria-label='Contact me']\");\n\n      expect(contactMeButton.text()).toBe(\"Contact me\");\n    });\n  });\n});"
    },
    "tests/unit/specs/composables/api/role/useRoleName.spec.ts": {
      "tests": [
        {
          "id": "202",
          "name": "Use Role Name Composable getRoleLabel should translate role when called with role name."
        }
      ],
      "source": "import { mockNuxtImport } from \"@nuxt/test-utils/runtime\";\n\nimport { RoleNames } from \"~/composables/api/role/enums/role.enums\";\nimport { useRoleName } from \"~/composables/api/role/useRoleName\";\nimport { createFakeI18n } from \"~/tests/unit/utils/factories/composables/i18n/useI18n.factory\";\n\nconst { tMock } = vi.hoisted(() => ({ tMock: vi.fn() }));\n\ndescribe(\"Use Role Name Composable\", () => {\n  beforeEach(() => {\n    mockNuxtImport<() => ReturnType<typeof createFakeI18n>>(\n      \"useI18n\",\n    () => vi.fn(() => createFakeI18n({ t: tMock })),\n    );\n  });\n\n  describe(\"getRoleLabel\", () => {\n    it(\"should translate role when called with role name.\", () => {\n      useRoleName().getRoleNameLabel(RoleNames.WEREWOLF);\n\n      expect(tMock).toHaveBeenCalledExactlyOnceWith(\"shared.role.name.werewolf\");\n    });\n  });\n});"
    },
    "tests/unit/specs/composables/api/useWerewolvesAssistantApi.spec.ts": {
      "tests": [
        {
          "id": "203",
          "name": "Use Werewolves Assistant Api Composable fetchWerewolvesAssistantApi should create a fetch instance for Werewolves Assistant API when called."
        }
      ],
      "source": "import { useWerewolvesAssistantApi } from \"~/composables/api/useWerewolvesAssistantApi\";\n\nconst { createMock } = vi.hoisted(() => ({ createMock: vi.fn() }));\nvi.mock(\"ofetch\", () => ({ createFetch: vi.fn(() => ({ create: createMock })) }));\n\ndescribe(\"Use Werewolves Assistant Api Composable\", () => {\n  describe(\"fetchWerewolvesAssistantApi\", () => {\n    it(\"should create a fetch instance for Werewolves Assistant API when called.\", () => {\n      useWerewolvesAssistantApi();\n\n      expect(createMock).toHaveBeenCalledExactlyOnceWith({\n        baseURL: \"http://127.0.0.1\",\n        headers: { \"Content-Type\": \"application/json\" },\n        onResponseError: expect.any(Function) as () => void,\n      });\n    });\n  });\n});"
    },
    "tests/unit/specs/components/pages/game-lobby/GameLobbyFooter/GameLobbyFooter.nuxt.spec.ts": {
      "tests": [
        {
          "id": "204",
          "name": "Game Lobby Footer Component should render component and match snapshot when mounted."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport GameLobbyFooter from \"~/components/pages/game-lobby/GameLobbyFooter/GameLobbyFooter.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"Game Lobby Footer Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof GameLobbyFooter>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(GameLobbyFooter);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n});"
    },
    "tests/unit/specs/modules/i18n.spec.ts": {
      "tests": [
        {
          "id": "205",
          "name": "I18n module Locales should contain all keys set in fr locale when locale is en."
        }
      ],
      "source": "import { crush } from \"radash\";\n\nimport fr from \"~/modules/i18n/locales/fr.json\";\nimport en from \"~/modules/i18n/locales/en.json\";\n\ndescribe(\"I18n module\", () => {\n  describe(\"Locales\", () => {\n    const flatFrLocale = crush(fr);\n    const frKeys = Object.keys(flatFrLocale).toSorted();\n\n    it(\"should contain all keys set in fr locale when locale is en.\", () => {\n      const flatEnLocale = crush(en);\n      const enKeys = Object.keys(flatEnLocale).toSorted();\n\n      expect(frKeys).toStrictEqual<string[]>(enKeys);\n    });\n  });\n});"
    },
    "tests/unit/specs/composables/api/game/player/player.class.spec.ts": {
      "tests": [
        {
          "id": "206",
          "name": "Player Class create should create a player when called."
        }
      ],
      "source": "import { Player } from \"~/composables/api/game/types/players/player.class\";\n\ndescribe(\"Player Class\", () => {\n  describe(\"create\", () => {\n    it(\"should create a player when called.\", () => {\n      const createdPlayer = Player.create({\n        _id: \"1\",\n        name: \"Player 1\",\n        extra: \"Extra\",\n      } as Player);\n      const expectedPlayer = new Player();\n      expectedPlayer._id = \"1\";\n      expectedPlayer.name = \"Player 1\";\n\n      expect(createdPlayer).toStrictEqual<Player>(expectedPlayer);\n    });\n  });\n});"
    },
    "tests/unit/specs/layouts/default.nuxt.spec.ts": {
      "tests": [
        {
          "id": "207",
          "name": "Default Layout should render component and match snapshot when mounted."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport Default from \"~/layouts/default.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/helpers/mount.helpers\";\n\ndescribe(\"Default Layout\", () => {\n  let wrapper: ReturnType<typeof mount<typeof Default>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(Default);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n});"
    },
    "tests/unit/specs/utils/url.utils.spec.ts": {
      "tests": [
        {
          "id": "208",
          "name": "URL Utils removeTrailingSlashes should remove trailing slashes when called."
        }
      ],
      "source": "import { removeTrailingSlashes } from \"~/utils/url.utils\";\n\ndescribe(\"URL Utils\", () => {\n  describe(\"removeTrailingSlashes\", () => {\n    it(\"should remove trailing slashes when called.\", () => {\n      const url = \"https://example.com///\";\n      const expected = \"https://example.com\";\n\n      expect(removeTrailingSlashes(url)).toBe(expected);\n    });\n  });\n});"
    }
  },
  "projectRoot": "/Users/antoinezanardi/WebstormProjects/werewolves-assistant-web-next",
  "config": {
    "cleanTempDir": "always",
    "incremental": true,
    "incrementalFile": "tests/stryker/incremental.json",
    "checkers": [
      "typescript"
    ],
    "tsconfigFile": "tsconfig.json",
    "testRunner": "vitest",
    "ignoreStatic": true,
    "mutate": [
      "app.vue",
      "components/**/*.{ts,vue}",
      "composables/**/*.ts",
      "pages/**/*.{ts,vue}",
      "layouts/**/*.{ts,vue}",
      "stores/**/*.ts",
      "utils/**/*.ts"
    ],
    "plugins": [
      "@stryker-mutator/vitest-runner",
      "@stryker-mutator/typescript-checker",
      "./config/stryker/plugins/stryker-define-props-ignorer-plugin.mjs",
      "./config/stryker/plugins/stryker-define-emits-ignorer-plugin.mjs",
      "./config/stryker/plugins/stryker-define-page-meta-ignorer-plugin.mjs",
      "./config/stryker/plugins/stryker-define-model-ignorer-plugin.mjs",
      "./config/stryker/plugins/stryker-define-expose-ignorer-plugin.mjs"
    ],
    "ignorers": [
      "defineProps",
      "defineEmits",
      "definePageMeta",
      "defineModel",
      "defineExpose"
    ],
    "ignorePatterns": [
      "!.nuxt/",
      ".github/",
      ".husky/",
      ".output/",
      ".run/",
      ".idea/",
      "config/commitlint",
      "config/cucumber",
      "config/eslint",
      "config/lint-staged",
      "config/stryker",
      "scripts/",
      "server/",
      ".editorconfig",
      ".npmrc",
      ".nvmrc",
      ".releaserc.js",
      ".DS_Store",
      ".validate-branch-namerc.json",
      "CHANGELOG.md",
      "LICENSE",
      "pnpm-lock.yaml",
      "sonar-project.properties",
      "README.md"
    ],
    "symlinkNodeModules": false,
    "vitest": {
      "configFile": "config/vitest/vitest.unit-config.ts"
    },
    "reporters": [
      "clear-text",
      "progress",
      "html",
      "json"
    ],
    "htmlReporter": {
      "fileName": "tests/stryker/coverage/index.html"
    },
    "jsonReporter": {
      "fileName": "tests/stryker/coverage/mutation.json"
    },
    "thresholds": {
      "high": 100,
      "low": 100,
      "break": 100
    },
    "disableTypeChecks": true,
    "configFile": "config/stryker/stryker.conf.mjs",
    "allowConsoleColors": true,
    "checkerNodeArgs": [],
    "commandRunner": {
      "command": "npm test"
    },
    "coverageAnalysis": "perTest",
    "clearTextReporter": {
      "allowColor": true,
      "allowEmojis": false,
      "logTests": true,
      "maxTestsToLog": 3,
      "reportTests": true,
      "reportMutants": true,
      "reportScoreTable": true
    },
    "dashboard": {
      "baseUrl": "https://dashboard.stryker-mutator.io/api/reports",
      "reportType": "full"
    },
    "dryRunOnly": false,
    "eventReporter": {
      "baseDir": "reports/mutation/events"
    },
    "force": false,
    "fileLogLevel": "off",
    "inPlace": false,
    "logLevel": "info",
    "maxConcurrentTestRunners": 9007199254740991,
    "maxTestRunnerReuse": 0,
    "mutator": {
      "plugins": null,
      "excludedMutations": []
    },
    "appendPlugins": [],
    "tempDirName": ".stryker-tmp",
    "testRunnerNodeArgs": [],
    "timeoutFactor": 1.5,
    "timeoutMS": 5000,
    "dryRunTimeoutMinutes": 5,
    "warnings": true,
    "disableBail": false,
    "allowEmpty": false,
    "typescriptChecker": {
      "prioritizePerformanceOverAccuracy": true
    }
  },
  "framework": {
    "name": "StrykerJS",
    "version": "8.2.3",
    "branding": {
      "homepageUrl": "https://stryker-mutator.io",
      "imageUrl": "data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"
    },
    "dependencies": {
      "@stryker-mutator/typescript-checker": "8.2.3",
      "typescript": "5.3.3"
    }
  }
}