{
  "files": {
    "pages/index.vue": {
      "language": "html",
      "mutants": [
        {
          "id": "2",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected { …(2) } to strictly equal { icon: 'fa-2x', …(1) }",
          "status": "Killed",
          "static": false,
          "testsCompleted": 4,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5"
          ],
          "location": {
            "end": {
              "column": 16,
              "line": 60
            },
            "start": {
              "column": 9,
              "line": 60
            }
          }
        },
        {
          "id": "0",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected {} to strictly equal { icon: 'fa-2x', …(1) }",
          "status": "Killed",
          "static": false,
          "testsCompleted": 4,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 61
            },
            "start": {
              "column": 77,
              "line": 58
            }
          }
        },
        {
          "id": "1",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected { label: '', icon: 'fa-2x' } to strictly equal { icon: 'fa-2x', …(1) }",
          "status": "Killed",
          "static": false,
          "testsCompleted": 4,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5"
          ],
          "location": {
            "end": {
              "column": 39,
              "line": 59
            },
            "start": {
              "column": 10,
              "line": 59
            }
          }
        }
      ],
      "source": "<template>\n  <div class=\"container-fluid d-flex flex-column\">\n    <div class=\"align-items-center container-fluid d-flex flex-column flex-grow-1 justify-content-center\">\n      <div class=\"col-12 text-center\">\n        <NuxtImg\n          sizes=\"lg:200px\"\n          src=\"/img/logo/square/werewolves-logo.png\"\n        />\n      </div>\n\n      <div class=\"col-12 text-center\">\n        <h1\n          id=\"title\"\n          :aria-label=\"$t('shared.werewolvesAssistant')\"\n          class=\"mt-0\"\n        >\n          {{ $t('shared.werewolvesAssistant') }}\n        </h1>\n      </div>\n\n      <div class=\"col-12 col-lg-3\">\n        <VuePrimeButton\n          class=\"w-100\"\n          icon=\"fa fa-play-circle\"\n          :label=\"$t('pages.index.play')\"\n          :pt=\"buttonsPassThroughProperties\"\n          raised\n          size=\"large\"\n        />\n      </div>\n\n      <div class=\"col-12 col-lg-3 mt-4\">\n        <VuePrimeButton\n          class=\"w-100\"\n          icon=\"fas fa-question\"\n          icon-pos=\"right\"\n          :label=\"$t('pages.index.about')\"\n          :pt=\"buttonsPassThroughProperties\"\n          raised\n          severity=\"secondary\"\n          size=\"large\"\n        />\n      </div>\n    </div>\n\n    <hr class=\"w-100\">\n\n    <IndexFooter/>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport type { ButtonPassThroughOptions } from \"primevue/button\";\nimport type { PassThrough } from \"primevue/ts-helpers\";\n\nimport IndexFooter from \"~/components/index/IndexFooter.vue\";\n\nconst buttonsPassThroughProperties: PassThrough<ButtonPassThroughOptions> = {\n  label: \"fs-3 fw-bold text-uppercase\",\n  icon: \"fa-2x\",\n};\n</script>\n\n<style>\n#title {\n  font-size: 4rem;\n}\n</style>"
    }
  },
  "schemaVersion": "1.0",
  "thresholds": {
    "high": 100,
    "low": 100,
    "break": 100
  },
  "testFiles": {
    "tests/unit/specs/pages/index.nuxt.spec.ts": {
      "tests": [
        {
          "id": "0",
          "name": "Index Page Component should render component and match snapshot when mounted."
        },
        {
          "id": "1",
          "name": "Index Page Component Title should display translated title when rendered."
        },
        {
          "id": "2",
          "name": "Index Page Component Play button should display play button with translated label when rendered."
        },
        {
          "id": "3",
          "name": "Index Page Component Play button should display play button with pass through data when rendered."
        },
        {
          "id": "4",
          "name": "Index Page Component About button should display about button with translated label when rendered."
        },
        {
          "id": "5",
          "name": "Index Page Component About button should display about button with pass through data when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\nimport type { ButtonPassThroughOptions } from \"primevue/button\";\nimport type { PassThrough } from \"primevue/ts-helpers\";\n\nimport type { VuePrimeButton } from \"#components\";\nimport Index from \"@/pages/index.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"Index Page Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof Index>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(Index);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Title\", () => {\n    it(\"should display translated title when rendered.\", () => {\n      const title = wrapper.find(\"[aria-label='Werewolves Assistant']\");\n\n      expect(title.text()).toBe(\"Werewolves Assistant\");\n    });\n  });\n\n  describe(\"Play button\", () => {\n    it(\"should display play button with translated label when rendered.\", () => {\n      const playButton = wrapper.findComponent<typeof VuePrimeButton>(\"[label='Play']\");\n\n      expect(playButton.attributes(\"label\")).toBe(\"Play\");\n    });\n\n    it(\"should display play button with pass through data when rendered.\", async() => {\n      wrapper = await mountSuspendedComponent(Index, { shallow: false });\n      const playButton = wrapper.findComponent<typeof VuePrimeButton>(\"[aria-label='Play']\");\n\n      expect(playButton.props(\"pt\")).toStrictEqual<PassThrough<ButtonPassThroughOptions>>({\n        icon: \"fa-2x\",\n        label: \"fs-3 fw-bold text-uppercase\",\n      });\n    });\n  });\n\n  describe(\"About button\", () => {\n    it(\"should display about button with translated label when rendered.\", () => {\n      const aboutButton = wrapper.findComponent<typeof VuePrimeButton>(\"[label='About']\");\n\n      expect(aboutButton.attributes(\"label\")).toBe(\"About\");\n    });\n\n    it(\"should display about button with pass through data when rendered.\", async() => {\n      wrapper = await mountSuspendedComponent(Index, { shallow: false });\n      const aboutButton = wrapper.findComponent<typeof VuePrimeButton>(\"[aria-label='About']\");\n\n      expect(aboutButton.props(\"pt\")).toStrictEqual<PassThrough<ButtonPassThroughOptions>>({\n        icon: \"fa-2x\",\n        label: \"fs-3 fw-bold text-uppercase\",\n      });\n    });\n  });\n});"
    },
    "tests/unit/specs/components/index/index-footer.nuxt.spec.ts": {
      "tests": [
        {
          "id": "6",
          "name": "Index Footer Component should render component and match snapshot when mounted."
        },
        {
          "id": "7",
          "name": "Index Footer Component Contact Me Button should render contact me with translated text button when rendered."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport { IndexFooter } from \"#components\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"Index Footer Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof IndexFooter>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(IndexFooter);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n\n  describe(\"Contact Me Button\", () => {\n    it(\"should render contact me with translated text button when rendered.\", () => {\n      const contactMeButton = wrapper.find(\"[aria-label='Contact me']\");\n\n      expect(contactMeButton.text()).toBe(\"Contact me\");\n    });\n  });\n});"
    },
    "tests/unit/specs/app.nuxt.spec.ts": {
      "tests": [
        {
          "id": "8",
          "name": "App Component should render component and match snapshot when mounted."
        }
      ],
      "source": "import type { mount } from \"@vue/test-utils\";\n\nimport App from \"@/app.vue\";\nimport { mountSuspendedComponent } from \"~/tests/unit/utils/mount.utils\";\n\ndescribe(\"App Component\", () => {\n  let wrapper: ReturnType<typeof mount<typeof App>>;\n\n  beforeEach(async() => {\n    wrapper = await mountSuspendedComponent(App);\n  });\n\n  it(\"should render component and match snapshot when mounted.\", () => {\n    expect(wrapper).toBeTruthy();\n    expect(wrapper.html()).toMatchSnapshot();\n  });\n});"
    },
    "tests/unit/specs/modules/i18n.spec.ts": {
      "tests": [
        {
          "id": "9",
          "name": "I18n module Locales should contain all keys set in fr locale when locale is en."
        }
      ],
      "source": "import { crush } from \"radash\";\n\nimport fr from \"~/modules/i18n/locales/fr.json\";\nimport en from \"~/modules/i18n/locales/en.json\";\n\ndescribe(\"I18n module\", () => {\n  describe(\"Locales\", () => {\n    const flatFrLocale = crush(fr);\n    const frKeys = Object.keys(flatFrLocale).toSorted();\n\n    it(\"should contain all keys set in fr locale when locale is en.\", () => {\n      const flatEnLocale = crush(en);\n      const enKeys = Object.keys(flatEnLocale).toSorted();\n\n      expect(frKeys).toStrictEqual<string[]>(enKeys);\n    });\n  });\n});"
    }
  },
  "projectRoot": "/Users/antoinezanardi/WebstormProjects/werewolves-assistant-web-next",
  "config": {
    "cleanTempDir": "always",
    "incremental": true,
    "incrementalFile": "tests/stryker/incremental.json",
    "checkers": [
      "typescript"
    ],
    "tsconfigFile": "tsconfig.json",
    "testRunner": "vitest",
    "ignoreStatic": true,
    "mutate": [
      "app.vue",
      "components/**/*.{ts,vue}",
      "composables/**/*.ts",
      "pages/**/*.{ts,vue}",
      "store/**/*.ts"
    ],
    "plugins": [
      "@stryker-mutator/vitest-runner",
      "@stryker-mutator/typescript-checker"
    ],
    "vitest": {
      "configFile": "config/vitest/vitest.unit-config.ts"
    },
    "reporters": [
      "clear-text",
      "progress",
      "html",
      "json"
    ],
    "htmlReporter": {
      "fileName": "tests/stryker/coverage/index.html"
    },
    "jsonReporter": {
      "fileName": "tests/stryker/coverage/mutation.json"
    },
    "thresholds": {
      "high": 100,
      "low": 100,
      "break": 100
    },
    "disableTypeChecks": "{tests,src,lib}/**/*.{js,ts,jsx,tsx,html,vue}",
    "configFile": "config/stryker/stryker.conf.mjs",
    "allowConsoleColors": true,
    "checkerNodeArgs": [],
    "commandRunner": {
      "command": "npm test"
    },
    "coverageAnalysis": "perTest",
    "clearTextReporter": {
      "allowColor": true,
      "allowEmojis": false,
      "logTests": true,
      "maxTestsToLog": 3,
      "reportTests": true,
      "reportMutants": true,
      "reportScoreTable": true
    },
    "dashboard": {
      "baseUrl": "https://dashboard.stryker-mutator.io/api/reports",
      "reportType": "full"
    },
    "dryRunOnly": false,
    "eventReporter": {
      "baseDir": "reports/mutation/events"
    },
    "ignorePatterns": [],
    "force": false,
    "fileLogLevel": "off",
    "inPlace": false,
    "logLevel": "info",
    "maxConcurrentTestRunners": 9007199254740991,
    "maxTestRunnerReuse": 0,
    "mutator": {
      "plugins": null,
      "excludedMutations": []
    },
    "appendPlugins": [],
    "symlinkNodeModules": true,
    "tempDirName": ".stryker-tmp",
    "testRunnerNodeArgs": [],
    "timeoutFactor": 1.5,
    "timeoutMS": 5000,
    "dryRunTimeoutMinutes": 5,
    "warnings": true,
    "disableBail": false,
    "allowEmpty": false,
    "ignorers": [],
    "typescriptChecker": {
      "prioritizePerformanceOverAccuracy": true
    }
  },
  "framework": {
    "name": "StrykerJS",
    "version": "8.0.0",
    "branding": {
      "homepageUrl": "https://stryker-mutator.io",
      "imageUrl": "data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"
    },
    "dependencies": {
      "@stryker-mutator/typescript-checker": "8.0.0",
      "typescript": "5.3.3"
    }
  }
}