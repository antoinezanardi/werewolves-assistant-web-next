name: 🏷️ Release Creation Workflow

on:
  push:
    branches:
      - 'main'

env:
  GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

jobs:
  code-ql:
    name: CodeQL Scan ❇️
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout GitHub repository 📡
        uses: actions/checkout@v4

      - name: Initialize CodeQL ⚙️
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: AutoBuild 🌡️
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis ❇️
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  install:
    name: Install ⚙️
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitHub repository 📡
        uses: actions/checkout@v4

      - name: Install pnpm 🏗️
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Setup NodeJS ✨
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Cache pnpm dependencies 🥡
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-pnpm-v3-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Install project dependencies 📦
        run: pnpm install
        if: steps.cache-node-modules.outputs.cache-hit != 'true'

  release:
    name: Release 🏷️
    runs-on: ubuntu-latest
    needs:
      - install
    steps:
      - name: Checkout GitHub repository 📡
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install pnpm 🏗️
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Setup NodeJS ✨
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Restore pnpm dependencies from cache 🥡
        uses: actions/cache/restore@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-pnpm-v3-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Release 🏷️
        id: release
        run: npx semantic-release

    outputs:
      new-release-published: ${{ steps.release.outputs.new-release-published }}
      new-release-version: ${{ steps.release.outputs.new-release-version }}

  unit-tests:
    name: Unit Tests 🧪
    runs-on: ubuntu-latest
    env:
      UNIT_TESTS_COVERAGE_REPORTS_PATH: tests/unit/coverage
    needs:
      - install
    outputs:
      VITEST_TESTS_COUNT: ${{ steps.outputs.outputs.VITEST_TESTS_COUNT }}
      VITEST_STATEMENTS_COUNT: ${{ steps.outputs.outputs.VITEST_STATEMENTS_COUNT }}
      VITEST_BRANCHES_COUNT: ${{ steps.outputs.outputs.VITEST_BRANCHES_COUNT }}
      VITEST_FUNCTIONS_COUNT: ${{ steps.outputs.outputs.VITEST_FUNCTIONS_COUNT }}
      VITEST_LINES_COUNT: ${{ steps.outputs.outputs.VITEST_LINES_COUNT }}
      VITEST_STATEMENTS_PERCENT: ${{ steps.outputs.outputs.VITEST_STATEMENTS_PERCENT }}
      VITEST_BRANCHES_PERCENT: ${{ steps.outputs.outputs.VITEST_BRANCHES_PERCENT }}
      VITEST_FUNCTIONS_PERCENT: ${{ steps.outputs.outputs.VITEST_FUNCTIONS_PERCENT }}
      VITEST_LINES_PERCENT: ${{ steps.outputs.outputs.VITEST_LINES_PERCENT }}
    steps:
      - name: Checkout GitHub repository 📡
        uses: actions/checkout@v4

      - name: Install pnpm 🏗️
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Setup NodeJS ✨
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Restore pnpm dependencies from cache 🥡
        uses: actions/cache/restore@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-pnpm-v3-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Create Nuxt types ⛰️
        run: pnpm run postinstall

      - name: Unit tests 🧪
        id: unit-tests
        continue-on-error: true
        run: pnpm run test:unit:cov 2>&1 | ./scripts/transform-vitest-results-as-env-variables.sh >> "$GITHUB_ENV"

      - name: Set Vitest Results As Outputs 📝
        id: outputs
        run: |
          echo "VITEST_TESTS_COUNT=${{ env.VITEST_TESTS_COUNT }}" >> "$GITHUB_OUTPUT"
          echo "VITEST_STATEMENTS_COUNT=${{ env.VITEST_STATEMENTS_COUNT }}" >> "$GITHUB_OUTPUT"
          echo "VITEST_BRANCHES_COUNT=${{ env.VITEST_BRANCHES_COUNT }}" >> "$GITHUB_OUTPUT"
          echo "VITEST_FUNCTIONS_COUNT=${{ env.VITEST_FUNCTIONS_COUNT }}" >> "$GITHUB_OUTPUT"
          echo "VITEST_LINES_COUNT=${{ env.VITEST_LINES_COUNT }}" >> "$GITHUB_OUTPUT"
          echo "VITEST_STATEMENTS_PERCENT=${{ env.VITEST_STATEMENTS_PERCENT }}" >> "$GITHUB_OUTPUT"
          echo "VITEST_BRANCHES_PERCENT=${{ env.VITEST_BRANCHES_PERCENT }}" >> "$GITHUB_OUTPUT"
          echo "VITEST_FUNCTIONS_PERCENT=${{ env.VITEST_FUNCTIONS_PERCENT }}" >> "$GITHUB_OUTPUT"
          echo "VITEST_LINES_PERCENT=${{ env.VITEST_LINES_PERCENT }}" >> "$GITHUB_OUTPUT"

      - name: Save tests coverage in cache 🥡
        uses: actions/cache/save@v4
        id: cache-unit-tests-coverage
        with:
          path: tests/unit/coverage
          key: ${{ runner.os }}-tests-unit-coverage-v3-main-${{hashFiles('tests/unit/coverage/lcov.info')}}

      - name: Save unit tests coverage report as artifact 💎
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-coverage-report
          path: ${{ env.UNIT_TESTS_COVERAGE_REPORTS_PATH }}

      - name: Exit with error if unit tests failed 🚨
        if: steps.unit-tests.outcome != 'success'
        run: exit 1;

  e2e-tests:
    name: E2E Tests ⚗️
    runs-on: ubuntu-latest
    env:
      ACCEPTANCE_TESTS_REPORTS_PATH: tests/acceptance/reports
    outputs:
      CUCUMBER_SCENARIOS_COUNT: ${{ steps.outputs.outputs.CUCUMBER_SCENARIOS_COUNT }}
    needs:
      - install
    steps:
      - name: Checkout GitHub repository 📡
        uses: actions/checkout@v4

      - name: Install pnpm 🏗️
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Setup NodeJS ✨
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Restore pnpm dependencies from cache 🥡
        uses: actions/cache/restore@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-pnpm-v3-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Create Nuxt types ⛰️
        run: pnpm run postinstall

      - name: Start Docker Sandbox API containers 🐳
        run: pnpm run docker:sandbox-api:start

      - name: Prepare E2E tests 🧭
        run: pnpm run test:cucumber:prepare

      - name: E2E tests ⚗️
        id: e2e-tests
        continue-on-error: true
        run: pnpm run test:cucumber

      - name: Set Cucumber Results As Outputs 📝
        id: outputs
        run: ./scripts/transform-cucumber-report-as-env-variables.sh >> "$GITHUB_OUTPUT"

      - name: Save E2E tests reports in cache 🥡
        uses: actions/cache/save@v4
        id: cache-e2e-tests-reports
        with:
          path: tests/acceptance/reports
          key: ${{ runner.os }}-tests-acceptance-reports-v3-main-${{hashFiles('tests/acceptance/reports/junit.xml')}}

      - name: Stop Docker Sandbox API containers 🐳
        run: pnpm run docker:sandbox-api:stop

      - name: Exit with error if E2E tests failed 🚨
        if: steps.e2e-tests.outcome != 'success'
        run: exit 1;

  mutant-tests:
    name: Mutant Tests 👽
    runs-on: ubuntu-latest
    env:
      STRYKER_DASHBOARD_API_KEY: ${{ secrets.STRYKER_DASHBOARD_API_KEY }}
      STRYKER_REPORT_PATH: tests/stryker/coverage
      VERSION: 'main'
    needs:
      - install
    steps:
      - name: Checkout GitHub repository 📡
        uses: actions/checkout@v4

      - name: Install pnpm 🏗️
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Setup NodeJS ✨
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Restore pnpm dependencies from cache 🥡
        uses: actions/cache/restore@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-pnpm-v3-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Create Nuxt types ⛰️
        run: pnpm run postinstall

      - name: Mutant tests 👽
        id: mutant-tests
        continue-on-error: true
        run: pnpm run test:stryker:ci

      - name: Save stryker report as artifact 💎
        uses: actions/upload-artifact@v4
        with:
          name: stryker-html-report
          path: ${{ env.STRYKER_REPORT_PATH }}/index.html

      - name: Exit with error if mutant tests failed 🚨
        if: steps.mutant-tests.outcome != 'success'
        run: exit 1;

  badges:
    name: Generate Badges 💠
    runs-on: ubuntu-latest
    needs:
      - unit-tests
      - e2e-tests
    steps:
      - name: Tests Count Badge 💠
        uses: RubbaBoy/BYOB@v1.3.0
        with:
          NAME: tests-count
          LABEL: Tests
          STATUS: ${{ needs.unit-tests.outputs.VITEST_TESTS_COUNT }}
          ICON: https://cdn.simpleicons.org/vitest/white
          COLOR: 109B08
          GITHUB_TOKEN: ${{ secrets.BYOB_TOKEN }}

      - name: Covered Statements Badge 💠
        uses: RubbaBoy/BYOB@v1.3.0
        with:
          NAME: covered-statements
          LABEL: Statements
          STATUS: ${{ needs.unit-tests.outputs.VITEST_STATEMENTS_COUNT }} covered (${{needs.unit-tests.outputs.VITEST_STATEMENTS_PERCENT}})
          ICON: https://cdn.simpleicons.org/codecov/white
          COLOR: 109B08
          GITHUB_TOKEN: ${{ secrets.BYOB_TOKEN }}

      - name: Covered Branches Badge 💠
        uses: RubbaBoy/BYOB@v1.3.0
        with:
          NAME: covered-branches
          LABEL: Branches
          STATUS: ${{ needs.unit-tests.outputs.VITEST_BRANCHES_COUNT }} covered (${{needs.unit-tests.outputs.VITEST_BRANCHES_PERCENT}})
          ICON: https://cdn.simpleicons.org/codecov/white
          COLOR: 109B08
          GITHUB_TOKEN: ${{ secrets.BYOB_TOKEN }}

      - name: Covered Functions Badge 💠
        uses: RubbaBoy/BYOB@v1.3.0
        with:
          NAME: covered-functions
          LABEL: Functions
          STATUS: ${{ needs.unit-tests.outputs.VITEST_FUNCTIONS_COUNT }} covered (${{needs.unit-tests.outputs.VITEST_FUNCTIONS_PERCENT}})
          ICON: https://cdn.simpleicons.org/codecov/white
          COLOR: 109B08
          GITHUB_TOKEN: ${{ secrets.BYOB_TOKEN }}

      - name: Covered Lines Badge 💠
        uses: RubbaBoy/BYOB@v1.3.0
        with:
          NAME: covered-lines
          LABEL: Lines
          STATUS: ${{ needs.unit-tests.outputs.VITEST_LINES_COUNT }} covered (${{needs.unit-tests.outputs.VITEST_LINES_PERCENT}})
          ICON: https://cdn.simpleicons.org/codecov/white
          COLOR: 109B08
          GITHUB_TOKEN: ${{ secrets.BYOB_TOKEN }}

      - name: Scenarios Badge 💠
        uses: RubbaBoy/BYOB@v1.3.0
        with:
          NAME: scenarios
          LABEL: Scenarios
          STATUS: ${{ needs.e2e-tests.outputs.CUCUMBER_SCENARIOS_COUNT }} scenarios
          ICON: https://cdn.simpleicons.org/cucumber/white
          COLOR: 169652
          GITHUB_TOKEN: ${{ secrets.BYOB_TOKEN }}

  sonarcloud:
    name: SonarCloud Analysis 🌥️
    runs-on: ubuntu-latest
    needs:
      - unit-tests
    steps:
      - name: Checkout GitHub repository 📡
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm 🏗️
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Restore pnpm dependencies from cache 🥡
        uses: actions/cache/restore@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-pnpm-v3-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Restore tests coverage from cache 🥡
        uses: actions/cache/restore@v4
        id: cache-unit-tests-coverage
        with:
          path: tests/unit/coverage
          key: ${{ runner.os }}-tests-unit-coverage-v3-
          restore-keys: |
            ${{ runner.os }}-tests-unit-coverage-v3-main-

      - name: Create Nuxt types ⛰️
        run: pnpm run postinstall

      - name: SonarCloud Scan 🌥️
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}

  deploy-tests-reports:
    name: Deploy Tests Reports 📑
    runs-on: ubuntu-latest
    needs:
      - unit-tests
      - e2e-tests
      - mutant-tests
    if: always()
    steps:
      - name: Checkout GitHub repository 📡
        uses: actions/checkout@v4

      - name: Invoke reports to GitHub Pages Workflow 📑
        run: gh workflow run deploy-reports-to-github-pages.yml --ref main -f branch=main